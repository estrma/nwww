{"version":3,"sources":["webpack:///intro.js","webpack:///webpack/bootstrap 414f27732772d4ecbeae","webpack:///./assets/js/intro.js","webpack:///./~/snapsvg/dist/snap.svg.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","shuffle","a","i","length","j","Math","floor","random","_ref","intro_start","sh","arr","groups","forEach","elem","matrix","Snap","Matrix","hh","margin","ih","ww","iw","scale","h","translate","attr","transform","s","viewBox","w","join","selectAll","curindex","$","click","photos","intro_content","lead","photo","text","img","Image","src","onload","window","width","height","document","ready","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_LOCAL_MODULE_0__","__WEBPACK_AMD_DEFINE_RESULT__","_typeof","Symbol","iterator","obj","constructor","prototype","glob","current_event","stop","version","has","separator","comaseparator","wildcard","numsort","b","events","n","firstDefined","ii","this","lastDefined","objtos","Object","toString","Str","String","isArray","Array","ar","eve","_x","_x2","_eve","apply","arguments","name","scope","l","oldstop","args","slice","listeners","z","indexed","queue","out","ce","push","zIndex","sort","_events","item","items","k","jj","nes","names","split","e","es","concat","f","sep","replace","RegExp","on","exist","hasOwnProperty","event","attrs","nt","subname","cur","test","nts","off","unbind","key","splice","inodes","unshift","funcs","prune","once","f2","undefined","factory","mina","requestID","animations","requestAnimFrame","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","Date","getTime","idgen","idprefix","ID","timer","now","sta","val","ds","dur","B","speed","spd","duration","stopit","update","pause","pdif","get","resume","frame","res","start","end","easing","set","timeStamp","len","A","anim","linear","status","time","getById","easeout","pow","easein","easeinout","q","Q","sqrt","x","X","abs","y","Y","t","backin","backout","elastic","sin","PI","bounce","root","nodeType","wrap","is","Element","doc","querySelector","Paper","el","createTextNode","createComment","substring","getAttributeNS","xlink","xmlns","getAttribute","nodeValue","setAttributeNS","setAttribute","removeAttribute","createElementNS","o","type","toLowerCase","isFinite","objectToString","clone","repush","array","cacher","postprocessor","newf","arg","cache","count","shift","angle","x1","y1","x2","y2","x3","y3","math","atan2","rad","deg","svgTransform2string","tstr","all","params","tan","charAt","transform2matrix","bbox","tdata","parseTransformString","bb","tlen","command","absolute","inver","invert","rotate","add","getSomeDefs","node","ownerSVGElement","parentNode","select","pdefs","defs","make","getSomeSVG","unit2px","value","getW","E","mgr","getBBox","getH","nam","svg","class","fill","appendChild","removeChild","add2group","list","children","childNodes","snap","hub","paper","tagName","nodeName","anims","_","g","mask","pattern","symbol","method","Fragment","frag","parent","desc","proto","ownerDocument","getElementsByTagName","body","dom","contentDocument","jsonFiller","win","toFloat","parseFloat","toInt","parseInt","mmax","max","mmin","min","round","colourRegExp","commaSpaces","hsrg","hs","rg","pathCommand","tCommand","pathValues","url","format","tokenRegex","objNotationRegex","replacer","quote","quotedName","isFunc","str","cos","asin","num","acos","atan","len2","closestPoint","path","distance2","dx","dy","best","bestLength","scan","scanDistance","pathNode","pathLength","getTotalLength","precision","pathSegList","numberOfItems","bestDistance","Infinity","scanLength","getPointAtLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","distance","snapTo","values","tolerance","rem","getRGB","colour","indexOf","r","hex","error","rgbtoString","toHex","red","green","blue","opacity","rgb","match","hsb2rgb","hsl2rgb","hsb","hsl","toFixed","color","style","defaultView","getComputedStyle","getPropertyValue","hsbtoString","hsltoString","prepareRGB","string","clr","packageRGB","rgb2hsl","rgb2hsb","v","R","G","C","H","S","V","L","M","parsePathString","pathString","pth","paramCounts","u","data","TString","rgTransform","_unit2px","contains","compareDocumentPosition","adown","documentElement","bup","query","nodelist","querySelectorAll","setInterval","attributes","json","att","parse","createDocumentFragment","full","div","createElement","innerHTML","firstChild","fragment","ch","toJSON","lastIndexOf","css","letter","cssAttr","alignment-baseline","baseline-shift","clip","clip-path","clip-rule","color-interpolation","color-interpolation-filters","color-profile","color-rendering","cursor","direction","display","dominant-baseline","enable-background","fill-opacity","fill-rule","filter","flood-color","flood-opacity","font","font-family","font-size","font-size-adjust","font-stretch","font-style","font-variant","font-weight","glyph-orientation-horizontal","glyph-orientation-vertical","image-rendering","kerning","letter-spacing","lighting-color","marker","marker-end","marker-mid","marker-start","overflow","pointer-events","shape-rendering","stop-color","stop-opacity","stroke","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-linejoin","stroke-miterlimit","stroke-opacity","stroke-width","text-anchor","text-decoration","text-rendering","unicode-bidi","visibility","word-spacing","writing-mode","toUpperCase","ajax","postData","req","XMLHttpRequest","pd","encodeURIComponent","open","setRequestHeader","onreadystatechange","readyState","send","load","responseText","getOffset","box","getBoundingClientRect","docElem","clientTop","clientLeft","top","pageYOffset","scrollTop","left","pageXOffset","scrollLeft","getElementByPoint","target","canvas","elementFromPoint","opera","so","sr","createSVGRect","hits","getIntersectionList","plugin","extractTransform","doReturn","fixids","urltest","it","uses","linktest","els","ids","oldid","old","fs","chld","elproto","isWithoutTransform","getClientRects","removed","localMatrix","original","href","getElementById","pathfinder","deflt","bboxwt","realPath","map","propString","papa","global","getCTM","local","ms","localString","toTransformString","globalMatrix","totalMatrix","diffMatrix","total","gradientTransform","patternTransform","append","appendTo","prepend","first","insertBefore","prependTo","nextSibling","insertAfter","remove","asPX","use","xlink:href","cloneNode","toDefs","toPattern","patternUnits","refX","refY","cx","cy","markerWidth","markerHeight","orient","eldata","removeData","outerSVG","innerSVG","toDataURL","btoa","contents","unescape","from","to","Animation","animation","inAnim","_attrs","_callback","curStatus","animate","setter","eq","fkeys","tkeys","keys","equal","d","matrixproto","norm","normalize","mag","aNew","bNew","multLeft","cNew","eNew","me","skewX","skew","skewY","fromCharCode","offset","determinant","row","scalex","shear","scaley","isSimple","isSuperSimple","noRotation","shorter","fillStroke","URL","grad","gradient","setFontSize","fontSize","textExtract","chi","getFontSize","reURLValue","deurl","clipIt","gradrg","seed","step","stops","tokens","toAbsolute","txt","className","baseVal","vb","rx","ry","tp","textPath","tuner","chunk","tuned","getter","textContent","internal","rgNotSpace","addClass","pos","clazz","finalValue","classes","curClasses","removeClass","hasClass","toggleClass","flag","getNumber","getUnit","unit","operators","+","-","/","*","reUnit","reAddon","plus","evnt","atr","aUnit","op","isNaN","bplus","rect","circle","preload","onerror","cssText","image","preserveAspectRatio","offsetWidth","offsetHeight","ellipse","group","vbx","vby","vbw","vbh","ptrn","vx","vy","vw","vh","line","polyline","points","polygon","Gstops","GaddStop","inserted","stopOffset","GgetBBox","GsetStops","addStop","gradientLinear","gradientRadial","gradientUnits","setStops","fx","fy","clear","next","paths","ps","sleep","r1","r2","r0","rectPath","p2s","pathClone","pathArray","getPointAtSegmentLength","p1x","p1y","c1x","c1y","c2x","c2y","p2x","p2y","bezlen","findDotsAtSegment","getTotLen","getLengthFactory","istotal","subpath","O","onlystart","path2curve","point","sp","subpaths","t1","t13","t12","t2","t3","mx","my","nx","ny","ax","ay","alpha","bezierBBox","curveDim","isPointInsideBBox","isBBoxIntersect","bbox1","bbox2","base3","p1","p2","p3","p4","x4","y4","z2","Tvalues","Cvalues","sum","ct","xbase","ybase","comb","ll","intersect","denominator","px","py","px2","py2","interHelper","bez1","bez2","justCount","l1","l2","n1","n2","dots1","dots2","xy","di","di1","dj","dj1","ci","cj","pathIntersection","path1","path2","interPathHelper","pathIntersectionNumber","x1m","y1m","x2m","y2m","pi","pj","intr","kk","segment1","segment2","isPointInsidePath","pathBBox","dim","xmin","ymin","xmax","ymax","ellipsePath","pathToRelative","lowerCase","rel","pa","pathToAbsolute","pa0","crz","dots","pop","catmullRom2bezier","l2c","q2c","_13","_23","a2c","large_arc_flag","sweep_flag","recursive","_120","f1","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","hx","hy","m1","m2","m3","m4","newres","x0","y0","b2ac","sqrtb2ac","tvalues","bounds","mt","jlen","curve","bx","by","qx","qy","attrs2","processPath","pcom","T","fixArc","pp","pcoms1","pcoms2","fixM","a1","a2","pfirst","seg","seg2","seglen","seg2len","mapPath","pathi","crp","iLen","getSubpathsAtLength","getPath","getSubpath","closest","inside","found","intersection","intersectionNumber","isPointInside","toRelative","toCubic","Set","bindings","setproto","thisArg","each","begin","handler","cb","callbacker","bind","aname","unbound","index","insertion","tail","todel","arglen","exclude","getEmpty","equaliseTransform","tt1","tt2","maxlength","path2array","getViewBox","getColour","Function","isNumeric","arrayEqual","arr1","arr2","Number","bUnit","supportsTouch","touchMap","mousedown","mousemove","mouseup","getScroll","preventTouch","originalEvent","preventDefault","stopTouch","stopPropagation","addEvent","fn","element","realName","scrollY","scrollX","targetTouches","olde","clientX","clientY","addEventListener","removeEventListener","drag","dragMove","dragi","touch","touches","identifier","_drag","move_scope","dragUp","unmousemove","unmouseup","end_scope","start_scope","eventName","hover","f_in","f_out","scope_in","scope_out","mouseover","mouseout","unhover","unmouseover","unmouseout","draggable","onmove","onstart","onend","init","origTransform","undrag","unmousedown","pproto","rgurl","filstr","filterUnits","blur","def","shadow","grayscale","amount","sepia","saturate","hueRotate","amount2","brightness","contrast","firstLetter","getAlign","way","align","saveColor","colors","A100","A200","A400","A700","pink","purple","deeppurple","indigo","lightblue","cyan","teal","lightgreen","lime","yellow","amber","orange","deeporange","brown","grey","bluegrey","mui","flat","turquoise","greensea","sunflower","emerland","nephritis","carrot","pumpkin","peterriver","belizehole","alizarin","pomegranate","amethyst","wisteria","clouds","silver","wetasphalt","midnightblue","concrete","asbestos","importMUIColors"],"mappings":"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","file":"intro.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Snap = __webpack_require__(1);\n\t\n\tvar margin = 54,\n\t    arr = [0, 1, 2, 3],\n\t    w = $(window).width(),\n\t    h = $(window).height(),\n\t    iw = w / 4,\n\t    ih = h / 4;\n\t\n\tfunction shuffle(a) {\n\t    for (var i = a.length; i; i--) {\n\t        var j = Math.floor(Math.random() * i);\n\t        var _ref = [a[j], a[i - 1]];\n\t        a[i - 1] = _ref[0];\n\t        a[j] = _ref[1];\n\t    }\n\t}\n\t\n\tfunction intro_start() {\n\t\n\t    var s = Snap('#intrologo');\n\t\n\t    s.attr({ viewBox: [0, 0, w, h].join(',') }).attr('height', h).attr('width', w);\n\t\n\t    var groups = s.selectAll('.gr');\n\t\n\t    function sh() {\n\t        shuffle(arr);\n\t\n\t        groups.forEach(function (elem, i) {\n\t            var a = arr[i],\n\t                matrix = new Snap.Matrix(),\n\t                hh = margin + ih * a,\n\t                ww = margin + iw * i + a * 30;\n\t            matrix.scale(.8);\n\t\n\t            if (hh > h * 0.9 && i == 0) {\n\t                hh = hh - 300;\n\t            }\n\t\n\t            matrix.translate(ww, hh);\n\t\n\t            elem.attr({ transform: matrix });\n\t        });\n\t    }\n\t\n\t    sh();\n\t\n\t    s.attr('class', 'show');\n\t    var curindex = 0;\n\t    $('.intro__section').click(function () {\n\t        curindex = curindex + 1;\n\t\n\t        var photos = intro_content.photos,\n\t            lead = intro_content.lead,\n\t            photo = $('.intro__img'),\n\t            text = $('.intro__section h1 span');\n\t\n\t        if (typeof photos[curindex] === 'undefined') {\n\t            curindex = 0;\n\t        }\n\t\n\t        var img = new Image();\n\t        img.src = photos[curindex]['full'];\n\t\n\t        img.onload = function () {\n\t            photo.attr('src', img.src);\n\t        };\n\t\n\t        text.text(lead[curindex]['content']);\n\t\n\t        sh();\n\t    });\n\t}\n\t$(document).ready(function () {\n\t    intro_start();\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_0__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/\n\t(function() {\n\tvar fix = module.exports=0;\n\t\n\t\"use strict\";\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t// Snap.svg 0.5.0\n\t//\n\t// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n\t//\n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t//\n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t//\n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t//\n\t// build: 2017-02-06\n\t\n\t// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t// \n\t// Licensed under the Apache License, Version 2.0 (the \"License\");\n\t// you may not use this file except in compliance with the License.\n\t// You may obtain a copy of the License at\n\t// \n\t// http://www.apache.org/licenses/LICENSE-2.0\n\t// \n\t// Unless required by applicable law or agreed to in writing, software\n\t// distributed under the License is distributed on an \"AS IS\" BASIS,\n\t// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t// See the License for the specific language governing permissions and\n\t// limitations under the License.\n\t// ┌────────────────────────────────────────────────────────────┐ \\\\\n\t// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n\t// ├────────────────────────────────────────────────────────────┤ \\\\\n\t// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n\t// └────────────────────────────────────────────────────────────┘ \\\\\n\t\n\t(function (glob) {\n\t    var version = \"0.5.0\",\n\t        has = \"hasOwnProperty\",\n\t        separator = /[\\.\\/]/,\n\t        comaseparator = /\\s*,\\s*/,\n\t        wildcard = \"*\",\n\t        fun = function fun() {},\n\t        numsort = function numsort(a, b) {\n\t        return a - b;\n\t    },\n\t        current_event,\n\t        stop,\n\t        events = { n: {} },\n\t        firstDefined = function firstDefined() {\n\t        for (var i = 0, ii = this.length; i < ii; i++) {\n\t            if (typeof this[i] != \"undefined\") {\n\t                return this[i];\n\t            }\n\t        }\n\t    },\n\t        lastDefined = function lastDefined() {\n\t        var i = this.length;\n\t        while (--i) {\n\t            if (typeof this[i] != \"undefined\") {\n\t                return this[i];\n\t            }\n\t        }\n\t    },\n\t        objtos = Object.prototype.toString,\n\t        Str = String,\n\t        isArray = Array.isArray || function (ar) {\n\t        return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n\t    };\n\t    /*\\\n\t     * eve\n\t     [ method ]\n\t      * Fires event with given `name`, given scope and other parameters.\n\t      > Arguments\n\t      - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n\t     - scope (object) context for the event handlers\n\t     - varargs (...) the rest of arguments will be sent to event handlers\n\t      = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n\t    \\*/\n\t    eve = function (_eve) {\n\t        function eve(_x, _x2) {\n\t            return _eve.apply(this, arguments);\n\t        }\n\t\n\t        eve.toString = function () {\n\t            return _eve.toString();\n\t        };\n\t\n\t        return eve;\n\t    }(function (name, scope) {\n\t        var e = events,\n\t            oldstop = stop,\n\t            args = Array.prototype.slice.call(arguments, 2),\n\t            listeners = eve.listeners(name),\n\t            z = 0,\n\t            f = false,\n\t            l,\n\t            indexed = [],\n\t            queue = {},\n\t            out = [],\n\t            ce = current_event,\n\t            errors = [];\n\t        out.firstDefined = firstDefined;\n\t        out.lastDefined = lastDefined;\n\t        current_event = name;\n\t        stop = 0;\n\t        for (var i = 0, ii = listeners.length; i < ii; i++) {\n\t            if (\"zIndex\" in listeners[i]) {\n\t                indexed.push(listeners[i].zIndex);\n\t                if (listeners[i].zIndex < 0) {\n\t                    queue[listeners[i].zIndex] = listeners[i];\n\t                }\n\t            }\n\t        }indexed.sort(numsort);\n\t        while (indexed[z] < 0) {\n\t            l = queue[indexed[z++]];\n\t            out.push(l.apply(scope, args));\n\t            if (stop) {\n\t                stop = oldstop;\n\t                return out;\n\t            }\n\t        }\n\t        for (i = 0; i < ii; i++) {\n\t            l = listeners[i];\n\t            if (\"zIndex\" in l) {\n\t                if (l.zIndex == indexed[z]) {\n\t                    out.push(l.apply(scope, args));\n\t                    if (stop) {\n\t                        break;\n\t                    }\n\t                    do {\n\t                        z++;\n\t                        l = queue[indexed[z]];\n\t                        l && out.push(l.apply(scope, args));\n\t                        if (stop) {\n\t                            break;\n\t                        }\n\t                    } while (l);\n\t                } else {\n\t                    queue[l.zIndex] = l;\n\t                }\n\t            } else {\n\t                out.push(l.apply(scope, args));\n\t                if (stop) {\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        stop = oldstop;\n\t        current_event = ce;\n\t        return out;\n\t    });\n\t    // Undocumented. Debug only.\n\t    eve._events = events;\n\t    /*\\\n\t     * eve.listeners\n\t     [ method ]\n\t      * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\t      > Arguments\n\t      - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\t      = (array) array of event handlers\n\t    \\*/\n\t    eve.listeners = function (name) {\n\t        var names = isArray(name) ? name : name.split(separator),\n\t            e = events,\n\t            item,\n\t            items,\n\t            k,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            nes,\n\t            es = [e],\n\t            out = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            nes = [];\n\t            for (j = 0, jj = es.length; j < jj; j++) {\n\t                e = es[j].n;\n\t                items = [e[names[i]], e[wildcard]];\n\t                k = 2;\n\t                while (k--) {\n\t                    item = items[k];\n\t                    if (item) {\n\t                        nes.push(item);\n\t                        out = out.concat(item.f || []);\n\t                    }\n\t                }\n\t            }\n\t            es = nes;\n\t        }\n\t        return out;\n\t    };\n\t    /*\\\n\t     * eve.separator\n\t     [ method ]\n\t      * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n\t     * here. Be aware that if you pass a string longer than one character it will be treated as\n\t     * a list of characters.\n\t      - separator (string) new separator. Empty string resets to default: `.` or `/`.\n\t    \\*/\n\t    eve.separator = function (sep) {\n\t        if (sep) {\n\t            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n\t            sep = \"[\" + sep + \"]\";\n\t            separator = new RegExp(sep);\n\t        } else {\n\t            separator = /[\\.\\/]/;\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.on\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n\t     | eve.on(\"*.under.*\", f);\n\t     | eve(\"mouse.under.floor\"); // triggers f\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     - name (array) if you don’t want to use separators, you can use array of strings\n\t     - f (function) event handler function\n\t     **\n\t     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n\t     > Example:\n\t     | eve.on(\"mouse\", eatIt)(2);\n\t     | eve.on(\"mouse\", scream);\n\t     | eve.on(\"mouse\", catchIt)(1);\n\t     * This will ensure that `catchIt` function will be called before `eatIt`.\n\t     *\n\t     * If you want to put your handler before non-indexed handlers, specify a negative value.\n\t     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n\t    \\*/\n\t    eve.on = function (name, f) {\n\t        if (typeof f != \"function\") {\n\t            return function () {};\n\t        }\n\t        var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n\t        for (var i = 0, ii = names.length; i < ii; i++) {\n\t            (function (name) {\n\t                var names = isArray(name) ? name : Str(name).split(separator),\n\t                    e = events,\n\t                    exist;\n\t                for (var i = 0, ii = names.length; i < ii; i++) {\n\t                    e = e.n;\n\t                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = { n: {} });\n\t                }\n\t                e.f = e.f || [];\n\t                for (i = 0, ii = e.f.length; i < ii; i++) {\n\t                    if (e.f[i] == f) {\n\t                        exist = true;\n\t                        break;\n\t                    }\n\t                }!exist && e.f.push(f);\n\t            })(names[i]);\n\t        }\n\t        return function (zIndex) {\n\t            if (+zIndex == +zIndex) {\n\t                f.zIndex = +zIndex;\n\t            }\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.f\n\t     [ method ]\n\t     **\n\t     * Returns function that will fire given event with optional arguments.\n\t     * Arguments that will be passed to the result function will be also\n\t     * concated to the list of final arguments.\n\t     | el.onclick = eve.f(\"click\", 1, 2);\n\t     | eve.on(\"click\", function (a, b, c) {\n\t     |     console.log(a, b, c); // 1, 2, [event object]\n\t     | });\n\t     > Arguments\n\t     - event (string) event name\n\t     - varargs (…) and any other arguments\n\t     = (function) possible event handler function\n\t    \\*/\n\t    eve.f = function (event) {\n\t        var attrs = [].slice.call(arguments, 1);\n\t        return function () {\n\t            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n\t        };\n\t    };\n\t    /*\\\n\t     * eve.stop\n\t     [ method ]\n\t     **\n\t     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n\t    \\*/\n\t    eve.stop = function () {\n\t        stop = 1;\n\t    };\n\t    /*\\\n\t     * eve.nt\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     > Arguments\n\t     **\n\t     - subname (string) #optional subname of the event\n\t     **\n\t     = (string) name of the event, if `subname` is not specified\n\t     * or\n\t     = (boolean) `true`, if current event’s name contains `subname`\n\t    \\*/\n\t    eve.nt = function (subname) {\n\t        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n\t        if (subname) {\n\t            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n\t        }\n\t        return cur;\n\t    };\n\t    /*\\\n\t     * eve.nts\n\t     [ method ]\n\t     **\n\t     * Could be used inside event handler to figure out actual name of the event.\n\t     **\n\t     **\n\t     = (array) names of the event\n\t    \\*/\n\t    eve.nts = function () {\n\t        return isArray(current_event) ? current_event : current_event.split(separator);\n\t    };\n\t    /*\\\n\t     * eve.off\n\t     [ method ]\n\t     **\n\t     * Removes given function from the list of event listeners assigned to given name.\n\t     * If no arguments specified all the events will be cleared.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t    \\*/\n\t    /*\\\n\t     * eve.unbind\n\t     [ method ]\n\t     **\n\t     * See @eve.off\n\t    \\*/\n\t    eve.off = eve.unbind = function (name, f) {\n\t        if (!name) {\n\t            eve._events = events = { n: {} };\n\t            return;\n\t        }\n\t        var names = isArray(name) ? isArray(name[0]) ? name : [name] : Str(name).split(comaseparator);\n\t        if (names.length > 1) {\n\t            for (var i = 0, ii = names.length; i < ii; i++) {\n\t                eve.off(names[i], f);\n\t            }\n\t            return;\n\t        }\n\t        names = isArray(name) ? name : Str(name).split(separator);\n\t        var e,\n\t            key,\n\t            splice,\n\t            i,\n\t            ii,\n\t            j,\n\t            jj,\n\t            cur = [events],\n\t            inodes = [];\n\t        for (i = 0, ii = names.length; i < ii; i++) {\n\t            for (j = 0; j < cur.length; j += splice.length - 2) {\n\t                splice = [j, 1];\n\t                e = cur[j].n;\n\t                if (names[i] != wildcard) {\n\t                    if (e[names[i]]) {\n\t                        splice.push(e[names[i]]);\n\t                        inodes.unshift({\n\t                            n: e,\n\t                            name: names[i]\n\t                        });\n\t                    }\n\t                } else {\n\t                    for (key in e) {\n\t                        if (e[has](key)) {\n\t                            splice.push(e[key]);\n\t                            inodes.unshift({\n\t                                n: e,\n\t                                name: key\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t                cur.splice.apply(cur, splice);\n\t            }\n\t        }\n\t        for (i = 0, ii = cur.length; i < ii; i++) {\n\t            e = cur[i];\n\t            while (e.n) {\n\t                if (f) {\n\t                    if (e.f) {\n\t                        for (j = 0, jj = e.f.length; j < jj; j++) {\n\t                            if (e.f[j] == f) {\n\t                                e.f.splice(j, 1);\n\t                                break;\n\t                            }\n\t                        }!e.f.length && delete e.f;\n\t                    }\n\t                    for (key in e.n) {\n\t                        if (e.n[has](key) && e.n[key].f) {\n\t                            var funcs = e.n[key].f;\n\t                            for (j = 0, jj = funcs.length; j < jj; j++) {\n\t                                if (funcs[j] == f) {\n\t                                    funcs.splice(j, 1);\n\t                                    break;\n\t                                }\n\t                            }!funcs.length && delete e.n[key].f;\n\t                        }\n\t                    }\n\t                } else {\n\t                    delete e.f;\n\t                    for (key in e.n) {\n\t                        if (e.n[has](key) && e.n[key].f) {\n\t                            delete e.n[key].f;\n\t                        }\n\t                    }\n\t                }\n\t                e = e.n;\n\t            }\n\t        }\n\t        // prune inner nodes in path\n\t        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n\t            e = inodes[i];\n\t            for (key in e.n[e.name].f) {\n\t                // not empty (has listeners)\n\t                continue prune;\n\t            }\n\t            for (key in e.n[e.name].n) {\n\t                // not empty (has children)\n\t                continue prune;\n\t            }\n\t            // is empty\n\t            delete e.n[e.name];\n\t        }\n\t    };\n\t    /*\\\n\t     * eve.once\n\t     [ method ]\n\t     **\n\t     * Binds given event handler with a given name to only run once then unbind itself.\n\t     | eve.once(\"login\", f);\n\t     | eve(\"login\"); // triggers f\n\t     | eve(\"login\"); // no listeners\n\t     * Use @eve to trigger the listener.\n\t     **\n\t     > Arguments\n\t     **\n\t     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n\t     - f (function) event handler function\n\t     **\n\t     = (function) same return function as @eve.on\n\t    \\*/\n\t    eve.once = function (name, f) {\n\t        var f2 = function f2() {\n\t            eve.off(name, f2);\n\t            return f.apply(this, arguments);\n\t        };\n\t        return eve.on(name, f2);\n\t    };\n\t    /*\\\n\t     * eve.version\n\t     [ property (string) ]\n\t     **\n\t     * Current version of the library.\n\t    \\*/\n\t    eve.version = version;\n\t    eve.toString = function () {\n\t        return \"You are running Eve \" + version;\n\t    };\n\t    typeof module != \"undefined\" && module.exports ? module.exports = eve :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_0__ = (function () {\n\t        return eve;\n\t    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__))) : glob.eve = eve;\n\t})(undefined);\n\t\n\t(function (glob, factory) {\n\t    // AMD support\n\t    if (true) {\n\t        // Define as an anonymous module\n\t        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_RESULT__ = function (eve) {\n\t            return factory(glob, eve);\n\t        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t    } else if (typeof exports != \"undefined\") {\n\t        // Next for Node.js or CommonJS\n\t        var eve = require(\"eve\");\n\t        module.exports = factory(glob, eve);\n\t    } else {\n\t        // Browser globals (glob is window)\n\t        // Snap adds itself to window\n\t        factory(glob, glob.eve);\n\t    }\n\t})(window || undefined, function (window, eve) {\n\t\n\t    // Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    var mina = function (eve) {\n\t        var animations = {},\n\t            requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n\t            setTimeout(callback, 16, new Date().getTime());\n\t            return true;\n\t        },\n\t            requestID,\n\t            isArray = Array.isArray || function (a) {\n\t            return a instanceof Array || Object.prototype.toString.call(a) == \"[object Array]\";\n\t        },\n\t            idgen = 0,\n\t            idprefix = \"M\" + (+new Date()).toString(36),\n\t            ID = function ID() {\n\t            return idprefix + (idgen++).toString(36);\n\t        },\n\t            diff = function diff(a, b, A, B) {\n\t            if (isArray(a)) {\n\t                res = [];\n\t                for (var i = 0, ii = a.length; i < ii; i++) {\n\t                    res[i] = diff(a[i], b, A[i], B);\n\t                }\n\t                return res;\n\t            }\n\t            var dif = (A - a) / (B - b);\n\t            return function (bb) {\n\t                return a + dif * (bb - b);\n\t            };\n\t        },\n\t            timer = Date.now || function () {\n\t            return +new Date();\n\t        },\n\t            sta = function sta(val) {\n\t            var a = this;\n\t            if (val == null) {\n\t                return a.s;\n\t            }\n\t            var ds = a.s - val;\n\t            a.b += a.dur * ds;\n\t            a.B += a.dur * ds;\n\t            a.s = val;\n\t        },\n\t            speed = function speed(val) {\n\t            var a = this;\n\t            if (val == null) {\n\t                return a.spd;\n\t            }\n\t            a.spd = val;\n\t        },\n\t            duration = function duration(val) {\n\t            var a = this;\n\t            if (val == null) {\n\t                return a.dur;\n\t            }\n\t            a.s = a.s * val / a.dur;\n\t            a.dur = val;\n\t        },\n\t            stopit = function stopit() {\n\t            var a = this;\n\t            delete animations[a.id];\n\t            a.update();\n\t            eve(\"mina.stop.\" + a.id, a);\n\t        },\n\t            pause = function pause() {\n\t            var a = this;\n\t            if (a.pdif) {\n\t                return;\n\t            }\n\t            delete animations[a.id];\n\t            a.update();\n\t            a.pdif = a.get() - a.b;\n\t        },\n\t            resume = function resume() {\n\t            var a = this;\n\t            if (!a.pdif) {\n\t                return;\n\t            }\n\t            a.b = a.get() - a.pdif;\n\t            delete a.pdif;\n\t            animations[a.id] = a;\n\t            frame();\n\t        },\n\t            update = function update() {\n\t            var a = this,\n\t                res;\n\t            if (isArray(a.start)) {\n\t                res = [];\n\t                for (var j = 0, jj = a.start.length; j < jj; j++) {\n\t                    res[j] = +a.start[j] + (a.end[j] - a.start[j]) * a.easing(a.s);\n\t                }\n\t            } else {\n\t                res = +a.start + (a.end - a.start) * a.easing(a.s);\n\t            }\n\t            a.set(res);\n\t        },\n\t            frame = function frame(timeStamp) {\n\t            // Manual invokation?\n\t            if (!timeStamp) {\n\t                // Frame loop stopped?\n\t                if (!requestID) {\n\t                    // Start frame loop...\n\t                    requestID = requestAnimFrame(frame);\n\t                }\n\t                return;\n\t            }\n\t            var len = 0;\n\t            for (var i in animations) {\n\t                if (animations.hasOwnProperty(i)) {\n\t                    var a = animations[i],\n\t                        b = a.get(),\n\t                        res;\n\t                    len++;\n\t                    a.s = (b - a.b) / (a.dur / a.spd);\n\t                    if (a.s >= 1) {\n\t                        delete animations[i];\n\t                        a.s = 1;\n\t                        len--;\n\t                        (function (a) {\n\t                            setTimeout(function () {\n\t                                eve(\"mina.finish.\" + a.id, a);\n\t                            });\n\t                        })(a);\n\t                    }\n\t                    a.update();\n\t                }\n\t            }requestID = len ? requestAnimFrame(frame) : false;\n\t        },\n\t\n\t        /*\\\n\t         * mina\n\t         [ method ]\n\t         **\n\t         * Generic animation of numbers\n\t         **\n\t         - a (number) start _slave_ number\n\t         - A (number) end _slave_ number\n\t         - b (number) start _master_ number (start time in general case)\n\t         - B (number) end _master_ number (end time in general case)\n\t         - get (function) getter of _master_ number (see @mina.time)\n\t         - set (function) setter of _slave_ number\n\t         - easing (function) #optional easing function, default is @mina.linear\n\t         = (object) animation descriptor\n\t         o {\n\t         o         id (string) animation id,\n\t         o         start (number) start _slave_ number,\n\t         o         end (number) end _slave_ number,\n\t         o         b (number) start _master_ number,\n\t         o         s (number) animation status (0..1),\n\t         o         dur (number) animation duration,\n\t         o         spd (number) animation speed,\n\t         o         get (function) getter of _master_ number (see @mina.time),\n\t         o         set (function) setter of _slave_ number,\n\t         o         easing (function) easing function, default is @mina.linear,\n\t         o         status (function) status getter/setter,\n\t         o         speed (function) speed getter/setter,\n\t         o         duration (function) duration getter/setter,\n\t         o         stop (function) animation stopper\n\t         o         pause (function) pauses the animation\n\t         o         resume (function) resumes the animation\n\t         o         update (function) calles setter with the right value of the animation\n\t         o }\n\t        \\*/\n\t        mina = function mina(a, A, b, B, get, set, easing) {\n\t            var anim = {\n\t                id: ID(),\n\t                start: a,\n\t                end: A,\n\t                b: b,\n\t                s: 0,\n\t                dur: B - b,\n\t                spd: 1,\n\t                get: get,\n\t                set: set,\n\t                easing: easing || mina.linear,\n\t                status: sta,\n\t                speed: speed,\n\t                duration: duration,\n\t                stop: stopit,\n\t                pause: pause,\n\t                resume: resume,\n\t                update: update\n\t            };\n\t            animations[anim.id] = anim;\n\t            var len = 0,\n\t                i;\n\t            for (i in animations) {\n\t                if (animations.hasOwnProperty(i)) {\n\t                    len++;\n\t                    if (len == 2) {\n\t                        break;\n\t                    }\n\t                }\n\t            }len == 1 && frame();\n\t            return anim;\n\t        };\n\t        /*\\\n\t         * mina.time\n\t         [ method ]\n\t         **\n\t         * Returns the current time. Equivalent to:\n\t         | function () {\n\t         |     return (new Date).getTime();\n\t         | }\n\t        \\*/\n\t        mina.time = timer;\n\t        /*\\\n\t         * mina.getById\n\t         [ method ]\n\t         **\n\t         * Returns an animation by its id\n\t         - id (string) animation's id\n\t         = (object) See @mina\n\t        \\*/\n\t        mina.getById = function (id) {\n\t            return animations[id] || null;\n\t        };\n\t\n\t        /*\\\n\t         * mina.linear\n\t         [ method ]\n\t         **\n\t         * Default linear easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.linear = function (n) {\n\t            return n;\n\t        };\n\t        /*\\\n\t         * mina.easeout\n\t         [ method ]\n\t         **\n\t         * Easeout easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.easeout = function (n) {\n\t            return Math.pow(n, 1.7);\n\t        };\n\t        /*\\\n\t         * mina.easein\n\t         [ method ]\n\t         **\n\t         * Easein easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.easein = function (n) {\n\t            return Math.pow(n, .48);\n\t        };\n\t        /*\\\n\t         * mina.easeinout\n\t         [ method ]\n\t         **\n\t         * Easeinout easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.easeinout = function (n) {\n\t            if (n == 1) {\n\t                return 1;\n\t            }\n\t            if (n == 0) {\n\t                return 0;\n\t            }\n\t            var q = .48 - n / 1.04,\n\t                Q = Math.sqrt(.1734 + q * q),\n\t                x = Q - q,\n\t                X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n\t                y = -Q - q,\n\t                Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n\t                t = X + Y + .5;\n\t            return (1 - t) * 3 * t * t + t * t * t;\n\t        };\n\t        /*\\\n\t         * mina.backin\n\t         [ method ]\n\t         **\n\t         * Backin easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.backin = function (n) {\n\t            if (n == 1) {\n\t                return 1;\n\t            }\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n - s);\n\t        };\n\t        /*\\\n\t         * mina.backout\n\t         [ method ]\n\t         **\n\t         * Backout easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.backout = function (n) {\n\t            if (n == 0) {\n\t                return 0;\n\t            }\n\t            n = n - 1;\n\t            var s = 1.70158;\n\t            return n * n * ((s + 1) * n + s) + 1;\n\t        };\n\t        /*\\\n\t         * mina.elastic\n\t         [ method ]\n\t         **\n\t         * Elastic easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.elastic = function (n) {\n\t            if (n == !!n) {\n\t                return n;\n\t            }\n\t            return Math.pow(2, -10 * n) * Math.sin((n - .075) * (2 * Math.PI) / .3) + 1;\n\t        };\n\t        /*\\\n\t         * mina.bounce\n\t         [ method ]\n\t         **\n\t         * Bounce easing\n\t         - n (number) input 0..1\n\t         = (number) output 0..1\n\t        \\*/\n\t        mina.bounce = function (n) {\n\t            var s = 7.5625,\n\t                p = 2.75,\n\t                l;\n\t            if (n < 1 / p) {\n\t                l = s * n * n;\n\t            } else {\n\t                if (n < 2 / p) {\n\t                    n -= 1.5 / p;\n\t                    l = s * n * n + .75;\n\t                } else {\n\t                    if (n < 2.5 / p) {\n\t                        n -= 2.25 / p;\n\t                        l = s * n * n + .9375;\n\t                    } else {\n\t                        n -= 2.625 / p;\n\t                        l = s * n * n + .984375;\n\t                    }\n\t                }\n\t            }\n\t            return l;\n\t        };\n\t        window.mina = mina;\n\t        return mina;\n\t    }(typeof eve == \"undefined\" ? function () {} : eve);\n\t\n\t    // Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t\n\t    var Snap = function (root) {\n\t        Snap.version = \"0.5.1\";\n\t        /*\\\n\t         * Snap\n\t         [ method ]\n\t         **\n\t         * Creates a drawing surface or wraps existing SVG element.\n\t         **\n\t         - width (number|string) width of surface\n\t         - height (number|string) height of surface\n\t         * or\n\t         - DOM (SVGElement) element to be wrapped into Snap structure\n\t         * or\n\t         - array (array) array of elements (will return set of elements)\n\t         * or\n\t         - query (string) CSS query selector\n\t         = (object) @Element\n\t        \\*/\n\t        function Snap(w, h) {\n\t            if (w) {\n\t                if (w.nodeType) {\n\t                    return wrap(w);\n\t                }\n\t                if (is(w, \"array\") && Snap.set) {\n\t                    return Snap.set.apply(Snap, w);\n\t                }\n\t                if (w instanceof Element) {\n\t                    return w;\n\t                }\n\t                if (h == null) {\n\t                    // try {\n\t                    w = glob.doc.querySelector(String(w));\n\t                    return wrap(w);\n\t                    // } catch (e) {\n\t                    // return null;\n\t                    // }\n\t                }\n\t            }\n\t            w = w == null ? \"100%\" : w;\n\t            h = h == null ? \"100%\" : h;\n\t            return new Paper(w, h);\n\t        }\n\t        Snap.toString = function () {\n\t            return \"Snap v\" + this.version;\n\t        };\n\t        Snap._ = {};\n\t        var glob = {\n\t            win: root.window,\n\t            doc: root.window.document\n\t        };\n\t        Snap._.glob = glob;\n\t        var has = \"hasOwnProperty\",\n\t            Str = String,\n\t            toFloat = parseFloat,\n\t            toInt = parseInt,\n\t            math = Math,\n\t            mmax = math.max,\n\t            mmin = math.min,\n\t            abs = math.abs,\n\t            pow = math.pow,\n\t            PI = math.PI,\n\t            round = math.round,\n\t            E = \"\",\n\t            S = \" \",\n\t            objectToString = Object.prototype.toString,\n\t            ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n\t            colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n\t            bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n\t            separator = Snap._.separator = /[,\\s]+/,\n\t            whitespace = /[\\s]/g,\n\t            commaSpaces = /[\\s]*,[\\s]*/,\n\t            hsrg = { hs: 1, rg: 1 },\n\t            pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t            tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n\t            pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n\t            idgen = 0,\n\t            idprefix = \"S\" + (+new Date()).toString(36),\n\t            ID = function ID(el) {\n\t            return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n\t        },\n\t            xlink = \"http://www.w3.org/1999/xlink\",\n\t            xmlns = \"http://www.w3.org/2000/svg\",\n\t            hub = {},\n\t\n\t        /*\\\n\t         * Snap.url\n\t         [ method ]\n\t         **\n\t         * Wraps path into `\"url('<path>')\"`.\n\t         - value (string) path\n\t         = (string) wrapped path\n\t        \\*/\n\t        URL = Snap.url = function (url) {\n\t            return \"url('#\" + url + \"')\";\n\t        };\n\t\n\t        function $(el, attr) {\n\t            if (attr) {\n\t                if (el == \"#text\") {\n\t                    el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n\t                }\n\t                if (el == \"#comment\") {\n\t                    el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n\t                }\n\t                if (typeof el == \"string\") {\n\t                    el = $(el);\n\t                }\n\t                if (typeof attr == \"string\") {\n\t                    if (el.nodeType == 1) {\n\t                        if (attr.substring(0, 6) == \"xlink:\") {\n\t                            return el.getAttributeNS(xlink, attr.substring(6));\n\t                        }\n\t                        if (attr.substring(0, 4) == \"xml:\") {\n\t                            return el.getAttributeNS(xmlns, attr.substring(4));\n\t                        }\n\t                        return el.getAttribute(attr);\n\t                    } else if (attr == \"text\") {\n\t                        return el.nodeValue;\n\t                    } else {\n\t                        return null;\n\t                    }\n\t                }\n\t                if (el.nodeType == 1) {\n\t                    for (var key in attr) {\n\t                        if (attr[has](key)) {\n\t                            var val = Str(attr[key]);\n\t                            if (val) {\n\t                                if (key.substring(0, 6) == \"xlink:\") {\n\t                                    el.setAttributeNS(xlink, key.substring(6), val);\n\t                                } else if (key.substring(0, 4) == \"xml:\") {\n\t                                    el.setAttributeNS(xmlns, key.substring(4), val);\n\t                                } else {\n\t                                    el.setAttribute(key, val);\n\t                                }\n\t                            } else {\n\t                                el.removeAttribute(key);\n\t                            }\n\t                        }\n\t                    }\n\t                } else if (\"text\" in attr) {\n\t                    el.nodeValue = attr.text;\n\t                }\n\t            } else {\n\t                el = glob.doc.createElementNS(xmlns, el);\n\t            }\n\t            return el;\n\t        }\n\t        Snap._.$ = $;\n\t        Snap._.id = ID;\n\t        function getAttrs(el) {\n\t            var attrs = el.attributes,\n\t                name,\n\t                out = {};\n\t            for (var i = 0; i < attrs.length; i++) {\n\t                if (attrs[i].namespaceURI == xlink) {\n\t                    name = \"xlink:\";\n\t                } else {\n\t                    name = \"\";\n\t                }\n\t                name += attrs[i].name;\n\t                out[name] = attrs[i].textContent;\n\t            }\n\t            return out;\n\t        }\n\t        function is(o, type) {\n\t            type = Str.prototype.toLowerCase.call(type);\n\t            if (type == \"finite\") {\n\t                return isFinite(o);\n\t            }\n\t            if (type == \"array\" && (o instanceof Array || Array.isArray && Array.isArray(o))) {\n\t                return true;\n\t            }\n\t            return type == \"null\" && o === null || type == (typeof o === \"undefined\" ? \"undefined\" : _typeof(o)) && o !== null || type == \"object\" && o === Object(o) || objectToString.call(o).slice(8, -1).toLowerCase() == type;\n\t        }\n\t        /*\\\n\t         * Snap.format\n\t         [ method ]\n\t         **\n\t         * Replaces construction of type `{<name>}` to the corresponding argument\n\t         **\n\t         - token (string) string to format\n\t         - json (object) object which properties are used as a replacement\n\t         = (string) formatted string\n\t         > Usage\n\t         | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n\t         | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n\t         |     x: 10,\n\t         |     y: 20,\n\t         |     dim: {\n\t         |         width: 40,\n\t         |         height: 50,\n\t         |         \"negative width\": -40\n\t         |     }\n\t         | }));\n\t        \\*/\n\t        Snap.format = function () {\n\t            var tokenRegex = /\\{([^\\}]+)\\}/g,\n\t                objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g,\n\t                // matches .xxxxx or [\"xxxxx\"] to run over object properties\n\t            replacer = function replacer(all, key, obj) {\n\t                var res = obj;\n\t                key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n\t                    name = name || quotedName;\n\t                    if (res) {\n\t                        if (name in res) {\n\t                            res = res[name];\n\t                        }\n\t                        typeof res == \"function\" && isFunc && (res = res());\n\t                    }\n\t                });\n\t                res = (res == null || res == obj ? all : res) + \"\";\n\t                return res;\n\t            };\n\t            return function (str, obj) {\n\t                return Str(str).replace(tokenRegex, function (all, key) {\n\t                    return replacer(all, key, obj);\n\t                });\n\t            };\n\t        }();\n\t        function clone(obj) {\n\t            if (typeof obj == \"function\" || Object(obj) !== obj) {\n\t                return obj;\n\t            }\n\t            var res = new obj.constructor();\n\t            for (var key in obj) {\n\t                if (obj[has](key)) {\n\t                    res[key] = clone(obj[key]);\n\t                }\n\t            }return res;\n\t        }\n\t        Snap._.clone = clone;\n\t        function repush(array, item) {\n\t            for (var i = 0, ii = array.length; i < ii; i++) {\n\t                if (array[i] === item) {\n\t                    return array.push(array.splice(i, 1)[0]);\n\t                }\n\t            }\n\t        }\n\t        function cacher(f, scope, postprocessor) {\n\t            function newf() {\n\t                var arg = Array.prototype.slice.call(arguments, 0),\n\t                    args = arg.join(\"\\u2400\"),\n\t                    cache = newf.cache = newf.cache || {},\n\t                    count = newf.count = newf.count || [];\n\t                if (cache[has](args)) {\n\t                    repush(count, args);\n\t                    return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t                }\n\t                count.length >= 1e3 && delete cache[count.shift()];\n\t                count.push(args);\n\t                cache[args] = f.apply(scope, arg);\n\t                return postprocessor ? postprocessor(cache[args]) : cache[args];\n\t            }\n\t            return newf;\n\t        }\n\t        Snap._.cacher = cacher;\n\t        function angle(x1, y1, x2, y2, x3, y3) {\n\t            if (x3 == null) {\n\t                var x = x1 - x2,\n\t                    y = y1 - y2;\n\t                if (!x && !y) {\n\t                    return 0;\n\t                }\n\t                return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n\t            } else {\n\t                return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n\t            }\n\t        }\n\t        function rad(deg) {\n\t            return deg % 360 * PI / 180;\n\t        }\n\t        function deg(rad) {\n\t            return rad * 180 / PI % 360;\n\t        }\n\t        function x_y() {\n\t            return this.x + S + this.y;\n\t        }\n\t        function x_y_w_h() {\n\t            return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n\t        }\n\t\n\t        /*\\\n\t         * Snap.rad\n\t         [ method ]\n\t         **\n\t         * Transform angle to radians\n\t         - deg (number) angle in degrees\n\t         = (number) angle in radians\n\t        \\*/\n\t        Snap.rad = rad;\n\t        /*\\\n\t         * Snap.deg\n\t         [ method ]\n\t         **\n\t         * Transform angle to degrees\n\t         - rad (number) angle in radians\n\t         = (number) angle in degrees\n\t        \\*/\n\t        Snap.deg = deg;\n\t        /*\\\n\t         * Snap.sin\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.sin()` only works with degrees, not radians.\n\t         - angle (number) angle in degrees\n\t         = (number) sin\n\t        \\*/\n\t        Snap.sin = function (angle) {\n\t            return math.sin(Snap.rad(angle));\n\t        };\n\t        /*\\\n\t         * Snap.tan\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.tan()` only works with degrees, not radians.\n\t         - angle (number) angle in degrees\n\t         = (number) tan\n\t        \\*/\n\t        Snap.tan = function (angle) {\n\t            return math.tan(Snap.rad(angle));\n\t        };\n\t        /*\\\n\t         * Snap.cos\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.cos()` only works with degrees, not radians.\n\t         - angle (number) angle in degrees\n\t         = (number) cos\n\t        \\*/\n\t        Snap.cos = function (angle) {\n\t            return math.cos(Snap.rad(angle));\n\t        };\n\t        /*\\\n\t         * Snap.asin\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.asin()` only works with degrees, not radians.\n\t         - num (number) value\n\t         = (number) asin in degrees\n\t        \\*/\n\t        Snap.asin = function (num) {\n\t            return Snap.deg(math.asin(num));\n\t        };\n\t        /*\\\n\t         * Snap.acos\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.acos()` only works with degrees, not radians.\n\t         - num (number) value\n\t         = (number) acos in degrees\n\t        \\*/\n\t        Snap.acos = function (num) {\n\t            return Snap.deg(math.acos(num));\n\t        };\n\t        /*\\\n\t         * Snap.atan\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.atan()` only works with degrees, not radians.\n\t         - num (number) value\n\t         = (number) atan in degrees\n\t        \\*/\n\t        Snap.atan = function (num) {\n\t            return Snap.deg(math.atan(num));\n\t        };\n\t        /*\\\n\t         * Snap.atan2\n\t         [ method ]\n\t         **\n\t         * Equivalent to `Math.atan2()` only works with degrees, not radians.\n\t         - num (number) value\n\t         = (number) atan2 in degrees\n\t        \\*/\n\t        Snap.atan2 = function (num) {\n\t            return Snap.deg(math.atan2(num));\n\t        };\n\t        /*\\\n\t         * Snap.angle\n\t         [ method ]\n\t         **\n\t         * Returns an angle between two or three points\n\t         - x1 (number) x coord of first point\n\t         - y1 (number) y coord of first point\n\t         - x2 (number) x coord of second point\n\t         - y2 (number) y coord of second point\n\t         - x3 (number) #optional x coord of third point\n\t         - y3 (number) #optional y coord of third point\n\t         = (number) angle in degrees\n\t        \\*/\n\t        Snap.angle = angle;\n\t        /*\\\n\t         * Snap.len\n\t         [ method ]\n\t         **\n\t         * Returns distance between two points\n\t         - x1 (number) x coord of first point\n\t         - y1 (number) y coord of first point\n\t         - x2 (number) x coord of second point\n\t         - y2 (number) y coord of second point\n\t         = (number) distance\n\t        \\*/\n\t        Snap.len = function (x1, y1, x2, y2) {\n\t            return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n\t        };\n\t        /*\\\n\t         * Snap.len2\n\t         [ method ]\n\t         **\n\t         * Returns squared distance between two points\n\t         - x1 (number) x coord of first point\n\t         - y1 (number) y coord of first point\n\t         - x2 (number) x coord of second point\n\t         - y2 (number) y coord of second point\n\t         = (number) distance\n\t        \\*/\n\t        Snap.len2 = function (x1, y1, x2, y2) {\n\t            return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\t        };\n\t        /*\\\n\t         * Snap.closestPoint\n\t         [ method ]\n\t         **\n\t         * Returns closest point to a given one on a given path.\n\t         - path (Element) path element\n\t         - x (number) x coord of a point\n\t         - y (number) y coord of a point\n\t         = (object) in format\n\t         {\n\t            x (number) x coord of the point on the path\n\t            y (number) y coord of the point on the path\n\t            length (number) length of the path to the point\n\t            distance (number) distance from the given point to the path\n\t         }\n\t        \\*/\n\t        // Copied from http://bl.ocks.org/mbostock/8027637\n\t        Snap.closestPoint = function (path, x, y) {\n\t            function distance2(p) {\n\t                var dx = p.x - x,\n\t                    dy = p.y - y;\n\t                return dx * dx + dy * dy;\n\t            }\n\t            var pathNode = path.node,\n\t                pathLength = pathNode.getTotalLength(),\n\t                precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n\t                best,\n\t                bestLength,\n\t                bestDistance = Infinity;\n\t\n\t            // linear scan for coarse approximation\n\t            for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n\t                if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n\t                    best = scan;\n\t                    bestLength = scanLength;\n\t                    bestDistance = scanDistance;\n\t                }\n\t            }\n\t\n\t            // binary search for precise estimate\n\t            precision *= .5;\n\t            while (precision > .5) {\n\t                var before, after, beforeLength, afterLength, beforeDistance, afterDistance;\n\t                if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n\t                    best = before;\n\t                    bestLength = beforeLength;\n\t                    bestDistance = beforeDistance;\n\t                } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n\t                    best = after;\n\t                    bestLength = afterLength;\n\t                    bestDistance = afterDistance;\n\t                } else {\n\t                    precision *= .5;\n\t                }\n\t            }\n\t\n\t            best = {\n\t                x: best.x,\n\t                y: best.y,\n\t                length: bestLength,\n\t                distance: Math.sqrt(bestDistance)\n\t            };\n\t            return best;\n\t        };\n\t        /*\\\n\t         * Snap.is\n\t         [ method ]\n\t         **\n\t         * Handy replacement for the `typeof` operator\n\t         - o (…) any object or primitive\n\t         - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n\t         = (boolean) `true` if given value is of given type\n\t        \\*/\n\t        Snap.is = is;\n\t        /*\\\n\t         * Snap.snapTo\n\t         [ method ]\n\t         **\n\t         * Snaps given value to given grid\n\t         - values (array|number) given array of values or step of the grid\n\t         - value (number) value to adjust\n\t         - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n\t         = (number) adjusted value\n\t        \\*/\n\t        Snap.snapTo = function (values, value, tolerance) {\n\t            tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n\t            if (is(values, \"array\")) {\n\t                var i = values.length;\n\t                while (i--) {\n\t                    if (abs(values[i] - value) <= tolerance) {\n\t                        return values[i];\n\t                    }\n\t                }\n\t            } else {\n\t                values = +values;\n\t                var rem = value % values;\n\t                if (rem < tolerance) {\n\t                    return value - rem;\n\t                }\n\t                if (rem > values - tolerance) {\n\t                    return value - rem + values;\n\t                }\n\t            }\n\t            return value;\n\t        };\n\t        // Colour\n\t        /*\\\n\t         * Snap.getRGB\n\t         [ method ]\n\t         **\n\t         * Parses color string as RGB object\n\t         - color (string) color string in one of the following formats:\n\t         # <ul>\n\t         #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n\t         #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n\t         #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n\t         #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n\t         #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n\t         #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n\t         #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t         #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n\t         #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n\t         #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n\t         #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t         #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n\t         #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n\t         #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n\t         #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n\t         # </ul>\n\t         * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n\t         = (object) RGB object in the following format:\n\t         o {\n\t         o     r (number) red,\n\t         o     g (number) green,\n\t         o     b (number) blue,\n\t         o     hex (string) color in HTML/CSS format: #••••••,\n\t         o     error (boolean) true if string can't be parsed\n\t         o }\n\t        \\*/\n\t        Snap.getRGB = cacher(function (colour) {\n\t            if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n\t                return { r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString };\n\t            }\n\t            if (colour == \"none\") {\n\t                return { r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString };\n\t            }\n\t            !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = _toHex(colour));\n\t            if (!colour) {\n\t                return { r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString };\n\t            }\n\t            var res,\n\t                red,\n\t                green,\n\t                blue,\n\t                opacity,\n\t                t,\n\t                values,\n\t                rgb = colour.match(colourRegExp);\n\t            if (rgb) {\n\t                if (rgb[2]) {\n\t                    blue = toInt(rgb[2].substring(5), 16);\n\t                    green = toInt(rgb[2].substring(3, 5), 16);\n\t                    red = toInt(rgb[2].substring(1, 3), 16);\n\t                }\n\t                if (rgb[3]) {\n\t                    blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n\t                    green = toInt((t = rgb[3].charAt(2)) + t, 16);\n\t                    red = toInt((t = rgb[3].charAt(1)) + t, 16);\n\t                }\n\t                if (rgb[4]) {\n\t                    values = rgb[4].split(commaSpaces);\n\t                    red = toFloat(values[0]);\n\t                    values[0].slice(-1) == \"%\" && (red *= 2.55);\n\t                    green = toFloat(values[1]);\n\t                    values[1].slice(-1) == \"%\" && (green *= 2.55);\n\t                    blue = toFloat(values[2]);\n\t                    values[2].slice(-1) == \"%\" && (blue *= 2.55);\n\t                    rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n\t                    values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                }\n\t                if (rgb[5]) {\n\t                    values = rgb[5].split(commaSpaces);\n\t                    red = toFloat(values[0]);\n\t                    values[0].slice(-1) == \"%\" && (red /= 100);\n\t                    green = toFloat(values[1]);\n\t                    values[1].slice(-1) == \"%\" && (green /= 100);\n\t                    blue = toFloat(values[2]);\n\t                    values[2].slice(-1) == \"%\" && (blue /= 100);\n\t                    (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                    rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n\t                    values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                    return Snap.hsb2rgb(red, green, blue, opacity);\n\t                }\n\t                if (rgb[6]) {\n\t                    values = rgb[6].split(commaSpaces);\n\t                    red = toFloat(values[0]);\n\t                    values[0].slice(-1) == \"%\" && (red /= 100);\n\t                    green = toFloat(values[1]);\n\t                    values[1].slice(-1) == \"%\" && (green /= 100);\n\t                    blue = toFloat(values[2]);\n\t                    values[2].slice(-1) == \"%\" && (blue /= 100);\n\t                    (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n\t                    rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n\t                    values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n\t                    return Snap.hsl2rgb(red, green, blue, opacity);\n\t                }\n\t                red = mmin(math.round(red), 255);\n\t                green = mmin(math.round(green), 255);\n\t                blue = mmin(math.round(blue), 255);\n\t                opacity = mmin(mmax(opacity, 0), 1);\n\t                rgb = { r: red, g: green, b: blue, toString: rgbtoString };\n\t                rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n\t                rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n\t                return rgb;\n\t            }\n\t            return { r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString };\n\t        }, Snap);\n\t        /*\\\n\t         * Snap.hsb\n\t         [ method ]\n\t         **\n\t         * Converts HSB values to a hex representation of the color\n\t         - h (number) hue\n\t         - s (number) saturation\n\t         - b (number) value or brightness\n\t         = (string) hex representation of the color\n\t        \\*/\n\t        Snap.hsb = cacher(function (h, s, b) {\n\t            return Snap.hsb2rgb(h, s, b).hex;\n\t        });\n\t        /*\\\n\t         * Snap.hsl\n\t         [ method ]\n\t         **\n\t         * Converts HSL values to a hex representation of the color\n\t         - h (number) hue\n\t         - s (number) saturation\n\t         - l (number) luminosity\n\t         = (string) hex representation of the color\n\t        \\*/\n\t        Snap.hsl = cacher(function (h, s, l) {\n\t            return Snap.hsl2rgb(h, s, l).hex;\n\t        });\n\t        /*\\\n\t         * Snap.rgb\n\t         [ method ]\n\t         **\n\t         * Converts RGB values to a hex representation of the color\n\t         - r (number) red\n\t         - g (number) green\n\t         - b (number) blue\n\t         = (string) hex representation of the color\n\t        \\*/\n\t        Snap.rgb = cacher(function (r, g, b, o) {\n\t            if (is(o, \"finite\")) {\n\t                var round = math.round;\n\t                return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n\t            }\n\t            return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n\t        });\n\t        var _toHex = function toHex(color) {\n\t            var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n\t                red = \"rgb(255, 0, 0)\";\n\t            _toHex = cacher(function (color) {\n\t                if (color.toLowerCase() == \"red\") {\n\t                    return red;\n\t                }\n\t                i.style.color = red;\n\t                i.style.color = color;\n\t                var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n\t                return out == red ? null : out;\n\t            });\n\t            return _toHex(color);\n\t        },\n\t            hsbtoString = function hsbtoString() {\n\t            return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n\t        },\n\t            hsltoString = function hsltoString() {\n\t            return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n\t        },\n\t            rgbtoString = function rgbtoString() {\n\t            return this.opacity == 1 || this.opacity == null ? this.hex : \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n\t        },\n\t            prepareRGB = function prepareRGB(r, g, b) {\n\t            if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n\t                b = r.b;\n\t                g = r.g;\n\t                r = r.r;\n\t            }\n\t            if (g == null && is(r, string)) {\n\t                var clr = Snap.getRGB(r);\n\t                r = clr.r;\n\t                g = clr.g;\n\t                b = clr.b;\n\t            }\n\t            if (r > 1 || g > 1 || b > 1) {\n\t                r /= 255;\n\t                g /= 255;\n\t                b /= 255;\n\t            }\n\t\n\t            return [r, g, b];\n\t        },\n\t            packageRGB = function packageRGB(r, g, b, o) {\n\t            r = math.round(r * 255);\n\t            g = math.round(g * 255);\n\t            b = math.round(b * 255);\n\t            var rgb = {\n\t                r: r,\n\t                g: g,\n\t                b: b,\n\t                opacity: is(o, \"finite\") ? o : 1,\n\t                hex: Snap.rgb(r, g, b),\n\t                toString: rgbtoString\n\t            };\n\t            is(o, \"finite\") && (rgb.opacity = o);\n\t            return rgb;\n\t        };\n\t        /*\\\n\t         * Snap.color\n\t         [ method ]\n\t         **\n\t         * Parses the color string and returns an object featuring the color's component values\n\t         - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n\t         = (object) Combined RGB/HSB object in the following format:\n\t         o {\n\t         o     r (number) red,\n\t         o     g (number) green,\n\t         o     b (number) blue,\n\t         o     hex (string) color in HTML/CSS format: #••••••,\n\t         o     error (boolean) `true` if string can't be parsed,\n\t         o     h (number) hue,\n\t         o     s (number) saturation,\n\t         o     v (number) value (brightness),\n\t         o     l (number) lightness\n\t         o }\n\t        \\*/\n\t        Snap.color = function (clr) {\n\t            var rgb;\n\t            if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n\t                rgb = Snap.hsb2rgb(clr);\n\t                clr.r = rgb.r;\n\t                clr.g = rgb.g;\n\t                clr.b = rgb.b;\n\t                clr.opacity = 1;\n\t                clr.hex = rgb.hex;\n\t            } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n\t                rgb = Snap.hsl2rgb(clr);\n\t                clr.r = rgb.r;\n\t                clr.g = rgb.g;\n\t                clr.b = rgb.b;\n\t                clr.opacity = 1;\n\t                clr.hex = rgb.hex;\n\t            } else {\n\t                if (is(clr, \"string\")) {\n\t                    clr = Snap.getRGB(clr);\n\t                }\n\t                if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n\t                    rgb = Snap.rgb2hsl(clr);\n\t                    clr.h = rgb.h;\n\t                    clr.s = rgb.s;\n\t                    clr.l = rgb.l;\n\t                    rgb = Snap.rgb2hsb(clr);\n\t                    clr.v = rgb.b;\n\t                } else {\n\t                    clr = { hex: \"none\" };\n\t                    clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n\t                    clr.error = 1;\n\t                }\n\t            }\n\t            clr.toString = rgbtoString;\n\t            return clr;\n\t        };\n\t        /*\\\n\t         * Snap.hsb2rgb\n\t         [ method ]\n\t         **\n\t         * Converts HSB values to an RGB object\n\t         - h (number) hue\n\t         - s (number) saturation\n\t         - v (number) value or brightness\n\t         = (object) RGB object in the following format:\n\t         o {\n\t         o     r (number) red,\n\t         o     g (number) green,\n\t         o     b (number) blue,\n\t         o     hex (string) color in HTML/CSS format: #••••••\n\t         o }\n\t        \\*/\n\t        Snap.hsb2rgb = function (h, s, v, o) {\n\t            if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n\t                v = h.b;\n\t                s = h.s;\n\t                o = h.o;\n\t                h = h.h;\n\t            }\n\t            h *= 360;\n\t            var R, G, B, X, C;\n\t            h = h % 360 / 60;\n\t            C = v * s;\n\t            X = C * (1 - abs(h % 2 - 1));\n\t            R = G = B = v - C;\n\t\n\t            h = ~~h;\n\t            R += [C, X, 0, 0, X, C][h];\n\t            G += [X, C, C, X, 0, 0][h];\n\t            B += [0, 0, X, C, C, X][h];\n\t            return packageRGB(R, G, B, o);\n\t        };\n\t        /*\\\n\t         * Snap.hsl2rgb\n\t         [ method ]\n\t         **\n\t         * Converts HSL values to an RGB object\n\t         - h (number) hue\n\t         - s (number) saturation\n\t         - l (number) luminosity\n\t         = (object) RGB object in the following format:\n\t         o {\n\t         o     r (number) red,\n\t         o     g (number) green,\n\t         o     b (number) blue,\n\t         o     hex (string) color in HTML/CSS format: #••••••\n\t         o }\n\t        \\*/\n\t        Snap.hsl2rgb = function (h, s, l, o) {\n\t            if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n\t                l = h.l;\n\t                s = h.s;\n\t                h = h.h;\n\t            }\n\t            if (h > 1 || s > 1 || l > 1) {\n\t                h /= 360;\n\t                s /= 100;\n\t                l /= 100;\n\t            }\n\t            h *= 360;\n\t            var R, G, B, X, C;\n\t            h = h % 360 / 60;\n\t            C = 2 * s * (l < .5 ? l : 1 - l);\n\t            X = C * (1 - abs(h % 2 - 1));\n\t            R = G = B = l - C / 2;\n\t\n\t            h = ~~h;\n\t            R += [C, X, 0, 0, X, C][h];\n\t            G += [X, C, C, X, 0, 0][h];\n\t            B += [0, 0, X, C, C, X][h];\n\t            return packageRGB(R, G, B, o);\n\t        };\n\t        /*\\\n\t         * Snap.rgb2hsb\n\t         [ method ]\n\t         **\n\t         * Converts RGB values to an HSB object\n\t         - r (number) red\n\t         - g (number) green\n\t         - b (number) blue\n\t         = (object) HSB object in the following format:\n\t         o {\n\t         o     h (number) hue,\n\t         o     s (number) saturation,\n\t         o     b (number) brightness\n\t         o }\n\t        \\*/\n\t        Snap.rgb2hsb = function (r, g, b) {\n\t            b = prepareRGB(r, g, b);\n\t            r = b[0];\n\t            g = b[1];\n\t            b = b[2];\n\t\n\t            var H, S, V, C;\n\t            V = mmax(r, g, b);\n\t            C = V - mmin(r, g, b);\n\t            H = C == 0 ? null : V == r ? (g - b) / C : V == g ? (b - r) / C + 2 : (r - g) / C + 4;\n\t            H = (H + 360) % 6 * 60 / 360;\n\t            S = C == 0 ? 0 : C / V;\n\t            return { h: H, s: S, b: V, toString: hsbtoString };\n\t        };\n\t        /*\\\n\t         * Snap.rgb2hsl\n\t         [ method ]\n\t         **\n\t         * Converts RGB values to an HSL object\n\t         - r (number) red\n\t         - g (number) green\n\t         - b (number) blue\n\t         = (object) HSL object in the following format:\n\t         o {\n\t         o     h (number) hue,\n\t         o     s (number) saturation,\n\t         o     l (number) luminosity\n\t         o }\n\t        \\*/\n\t        Snap.rgb2hsl = function (r, g, b) {\n\t            b = prepareRGB(r, g, b);\n\t            r = b[0];\n\t            g = b[1];\n\t            b = b[2];\n\t\n\t            var H, S, L, M, m, C;\n\t            M = mmax(r, g, b);\n\t            m = mmin(r, g, b);\n\t            C = M - m;\n\t            H = C == 0 ? null : M == r ? (g - b) / C : M == g ? (b - r) / C + 2 : (r - g) / C + 4;\n\t            H = (H + 360) % 6 * 60 / 360;\n\t            L = (M + m) / 2;\n\t            S = C == 0 ? 0 : L < .5 ? C / (2 * L) : C / (2 - 2 * L);\n\t            return { h: H, s: S, l: L, toString: hsltoString };\n\t        };\n\t\n\t        // Transformations\n\t        /*\\\n\t         * Snap.parsePathString\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Parses given path string into an array of arrays of path segments\n\t         - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n\t         = (array) array of segments\n\t        \\*/\n\t        Snap.parsePathString = function (pathString) {\n\t            if (!pathString) {\n\t                return null;\n\t            }\n\t            var pth = Snap.path(pathString);\n\t            if (pth.arr) {\n\t                return Snap.path.clone(pth.arr);\n\t            }\n\t\n\t            var paramCounts = { a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0 },\n\t                data = [];\n\t            if (is(pathString, \"array\") && is(pathString[0], \"array\")) {\n\t                // rough assumption\n\t                data = Snap.path.clone(pathString);\n\t            }\n\t            if (!data.length) {\n\t                Str(pathString).replace(pathCommand, function (a, b, c) {\n\t                    var params = [],\n\t                        name = b.toLowerCase();\n\t                    c.replace(pathValues, function (a, b) {\n\t                        b && params.push(+b);\n\t                    });\n\t                    if (name == \"m\" && params.length > 2) {\n\t                        data.push([b].concat(params.splice(0, 2)));\n\t                        name = \"l\";\n\t                        b = b == \"m\" ? \"l\" : \"L\";\n\t                    }\n\t                    if (name == \"o\" && params.length == 1) {\n\t                        data.push([b, params[0]]);\n\t                    }\n\t                    if (name == \"r\") {\n\t                        data.push([b].concat(params));\n\t                    } else while (params.length >= paramCounts[name]) {\n\t                        data.push([b].concat(params.splice(0, paramCounts[name])));\n\t                        if (!paramCounts[name]) {\n\t                            break;\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t            data.toString = Snap.path.toString;\n\t            pth.arr = Snap.path.clone(data);\n\t            return data;\n\t        };\n\t        /*\\\n\t         * Snap.parseTransformString\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Parses given transform string into an array of transformations\n\t         - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n\t         = (array) array of transformations\n\t        \\*/\n\t        var parseTransformString = Snap.parseTransformString = function (TString) {\n\t            if (!TString) {\n\t                return null;\n\t            }\n\t            var paramCounts = { r: 3, s: 4, t: 2, m: 6 },\n\t                data = [];\n\t            if (is(TString, \"array\") && is(TString[0], \"array\")) {\n\t                // rough assumption\n\t                data = Snap.path.clone(TString);\n\t            }\n\t            if (!data.length) {\n\t                Str(TString).replace(tCommand, function (a, b, c) {\n\t                    var params = [],\n\t                        name = b.toLowerCase();\n\t                    c.replace(pathValues, function (a, b) {\n\t                        b && params.push(+b);\n\t                    });\n\t                    data.push([b].concat(params));\n\t                });\n\t            }\n\t            data.toString = Snap.path.toString;\n\t            return data;\n\t        };\n\t        function svgTransform2string(tstr) {\n\t            var res = [];\n\t            tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n\t                params = params.split(/\\s*,\\s*|\\s+/);\n\t                if (name == \"rotate\" && params.length == 1) {\n\t                    params.push(0, 0);\n\t                }\n\t                if (name == \"scale\") {\n\t                    if (params.length > 2) {\n\t                        params = params.slice(0, 2);\n\t                    } else if (params.length == 2) {\n\t                        params.push(0, 0);\n\t                    }\n\t                    if (params.length == 1) {\n\t                        params.push(params[0], 0, 0);\n\t                    }\n\t                }\n\t                if (name == \"skewX\") {\n\t                    res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n\t                } else if (name == \"skewY\") {\n\t                    res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n\t                } else {\n\t                    res.push([name.charAt(0)].concat(params));\n\t                }\n\t                return all;\n\t            });\n\t            return res;\n\t        }\n\t        Snap._.svgTransform2string = svgTransform2string;\n\t        Snap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\n\t        function transform2matrix(tstr, bbox) {\n\t            var tdata = parseTransformString(tstr),\n\t                m = new Snap.Matrix();\n\t            if (tdata) {\n\t                for (var i = 0, ii = tdata.length; i < ii; i++) {\n\t                    var t = tdata[i],\n\t                        tlen = t.length,\n\t                        command = Str(t[0]).toLowerCase(),\n\t                        absolute = t[0] != command,\n\t                        inver = absolute ? m.invert() : 0,\n\t                        x1,\n\t                        y1,\n\t                        x2,\n\t                        y2,\n\t                        bb;\n\t                    if (command == \"t\" && tlen == 2) {\n\t                        m.translate(t[1], 0);\n\t                    } else if (command == \"t\" && tlen == 3) {\n\t                        if (absolute) {\n\t                            x1 = inver.x(0, 0);\n\t                            y1 = inver.y(0, 0);\n\t                            x2 = inver.x(t[1], t[2]);\n\t                            y2 = inver.y(t[1], t[2]);\n\t                            m.translate(x2 - x1, y2 - y1);\n\t                        } else {\n\t                            m.translate(t[1], t[2]);\n\t                        }\n\t                    } else if (command == \"r\") {\n\t                        if (tlen == 2) {\n\t                            bb = bb || bbox;\n\t                            m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.rotate(t[1], x2, y2);\n\t                            } else {\n\t                                m.rotate(t[1], t[2], t[3]);\n\t                            }\n\t                        }\n\t                    } else if (command == \"s\") {\n\t                        if (tlen == 2 || tlen == 3) {\n\t                            bb = bb || bbox;\n\t                            m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n\t                        } else if (tlen == 4) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[2], t[3]);\n\t                                y2 = inver.y(t[2], t[3]);\n\t                                m.scale(t[1], t[1], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[1], t[2], t[3]);\n\t                            }\n\t                        } else if (tlen == 5) {\n\t                            if (absolute) {\n\t                                x2 = inver.x(t[3], t[4]);\n\t                                y2 = inver.y(t[3], t[4]);\n\t                                m.scale(t[1], t[2], x2, y2);\n\t                            } else {\n\t                                m.scale(t[1], t[2], t[3], t[4]);\n\t                            }\n\t                        }\n\t                    } else if (command == \"m\" && tlen == 7) {\n\t                        m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n\t                    }\n\t                }\n\t            }\n\t            return m;\n\t        }\n\t        Snap._.transform2matrix = transform2matrix;\n\t        Snap._unit2px = unit2px;\n\t        var contains = glob.doc.contains || glob.doc.compareDocumentPosition ? function (a, b) {\n\t            var adown = a.nodeType == 9 ? a.documentElement : a,\n\t                bup = b && b.parentNode;\n\t            return a == bup || !!(bup && bup.nodeType == 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n\t        } : function (a, b) {\n\t            if (b) {\n\t                while (b) {\n\t                    b = b.parentNode;\n\t                    if (b == a) {\n\t                        return true;\n\t                    }\n\t                }\n\t            }\n\t            return false;\n\t        };\n\t        function getSomeDefs(el) {\n\t            var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || el.node.parentNode && wrap(el.node.parentNode) || Snap.select(\"svg\") || Snap(0, 0),\n\t                pdefs = p.select(\"defs\"),\n\t                defs = pdefs == null ? false : pdefs.node;\n\t            if (!defs) {\n\t                defs = make(\"defs\", p.node).node;\n\t            }\n\t            return defs;\n\t        }\n\t        function getSomeSVG(el) {\n\t            return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n\t        }\n\t        Snap._.getSomeDefs = getSomeDefs;\n\t        Snap._.getSomeSVG = getSomeSVG;\n\t        function unit2px(el, name, value) {\n\t            var svg = getSomeSVG(el).node,\n\t                out = {},\n\t                mgr = svg.querySelector(\".svg---mgr\");\n\t            if (!mgr) {\n\t                mgr = $(\"rect\");\n\t                $(mgr, { x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\" });\n\t                svg.appendChild(mgr);\n\t            }\n\t            function getW(val) {\n\t                if (val == null) {\n\t                    return E;\n\t                }\n\t                if (val == +val) {\n\t                    return val;\n\t                }\n\t                $(mgr, { width: val });\n\t                try {\n\t                    return mgr.getBBox().width;\n\t                } catch (e) {\n\t                    return 0;\n\t                }\n\t            }\n\t            function getH(val) {\n\t                if (val == null) {\n\t                    return E;\n\t                }\n\t                if (val == +val) {\n\t                    return val;\n\t                }\n\t                $(mgr, { height: val });\n\t                try {\n\t                    return mgr.getBBox().height;\n\t                } catch (e) {\n\t                    return 0;\n\t                }\n\t            }\n\t            function set(nam, f) {\n\t                if (name == null) {\n\t                    out[nam] = f(el.attr(nam) || 0);\n\t                } else if (nam == name) {\n\t                    out = f(value == null ? el.attr(nam) || 0 : value);\n\t                }\n\t            }\n\t            switch (el.type) {\n\t                case \"rect\":\n\t                    set(\"rx\", getW);\n\t                    set(\"ry\", getH);\n\t                case \"image\":\n\t                    set(\"width\", getW);\n\t                    set(\"height\", getH);\n\t                case \"text\":\n\t                    set(\"x\", getW);\n\t                    set(\"y\", getH);\n\t                    break;\n\t                case \"circle\":\n\t                    set(\"cx\", getW);\n\t                    set(\"cy\", getH);\n\t                    set(\"r\", getW);\n\t                    break;\n\t                case \"ellipse\":\n\t                    set(\"cx\", getW);\n\t                    set(\"cy\", getH);\n\t                    set(\"rx\", getW);\n\t                    set(\"ry\", getH);\n\t                    break;\n\t                case \"line\":\n\t                    set(\"x1\", getW);\n\t                    set(\"x2\", getW);\n\t                    set(\"y1\", getH);\n\t                    set(\"y2\", getH);\n\t                    break;\n\t                case \"marker\":\n\t                    set(\"refX\", getW);\n\t                    set(\"markerWidth\", getW);\n\t                    set(\"refY\", getH);\n\t                    set(\"markerHeight\", getH);\n\t                    break;\n\t                case \"radialGradient\":\n\t                    set(\"fx\", getW);\n\t                    set(\"fy\", getH);\n\t                    break;\n\t                case \"tspan\":\n\t                    set(\"dx\", getW);\n\t                    set(\"dy\", getH);\n\t                    break;\n\t                default:\n\t                    set(name, getW);\n\t            }\n\t            svg.removeChild(mgr);\n\t            return out;\n\t        }\n\t        /*\\\n\t         * Snap.select\n\t         [ method ]\n\t         **\n\t         * Wraps a DOM element specified by CSS selector as @Element\n\t         - query (string) CSS selector of the element\n\t         = (Element) the current element\n\t        \\*/\n\t        Snap.select = function (query) {\n\t            query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n\t            return wrap(glob.doc.querySelector(query));\n\t        };\n\t        /*\\\n\t         * Snap.selectAll\n\t         [ method ]\n\t         **\n\t         * Wraps DOM elements specified by CSS selector as set or array of @Element\n\t         - query (string) CSS selector of the element\n\t         = (Element) the current element\n\t        \\*/\n\t        Snap.selectAll = function (query) {\n\t            var nodelist = glob.doc.querySelectorAll(query),\n\t                set = (Snap.set || Array)();\n\t            for (var i = 0; i < nodelist.length; i++) {\n\t                set.push(wrap(nodelist[i]));\n\t            }\n\t            return set;\n\t        };\n\t\n\t        function add2group(list) {\n\t            if (!is(list, \"array\")) {\n\t                list = Array.prototype.slice.call(arguments, 0);\n\t            }\n\t            var i = 0,\n\t                j = 0,\n\t                node = this.node;\n\t            while (this[i]) {\n\t                delete this[i++];\n\t            }for (i = 0; i < list.length; i++) {\n\t                if (list[i].type == \"set\") {\n\t                    list[i].forEach(function (el) {\n\t                        node.appendChild(el.node);\n\t                    });\n\t                } else {\n\t                    node.appendChild(list[i].node);\n\t                }\n\t            }\n\t            var children = node.childNodes;\n\t            for (i = 0; i < children.length; i++) {\n\t                this[j++] = wrap(children[i]);\n\t            }\n\t            return this;\n\t        }\n\t        // Hub garbage collector every 10s\n\t        setInterval(function () {\n\t            for (var key in hub) {\n\t                if (hub[has](key)) {\n\t                    var el = hub[key],\n\t                        node = el.node;\n\t                    if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n\t                        delete hub[key];\n\t                    }\n\t                }\n\t            }\n\t        }, 1e4);\n\t        function Element(el) {\n\t            if (el.snap in hub) {\n\t                return hub[el.snap];\n\t            }\n\t            var svg;\n\t            try {\n\t                svg = el.ownerSVGElement;\n\t            } catch (e) {}\n\t            /*\\\n\t             * Element.node\n\t             [ property (object) ]\n\t             **\n\t             * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n\t             > Usage\n\t             | // draw a circle at coordinate 10,10 with radius of 10\n\t             | var c = paper.circle(10, 10, 10);\n\t             | c.node.onclick = function () {\n\t             |     c.attr(\"fill\", \"red\");\n\t             | };\n\t            \\*/\n\t            this.node = el;\n\t            if (svg) {\n\t                this.paper = new Paper(svg);\n\t            }\n\t            /*\\\n\t             * Element.type\n\t             [ property (string) ]\n\t             **\n\t             * SVG tag name of the given element.\n\t            \\*/\n\t            this.type = el.tagName || el.nodeName;\n\t            var id = this.id = ID(this);\n\t            this.anims = {};\n\t            this._ = {\n\t                transform: []\n\t            };\n\t            el.snap = id;\n\t            hub[id] = this;\n\t            if (this.type == \"g\") {\n\t                this.add = add2group;\n\t            }\n\t            if (this.type in { g: 1, mask: 1, pattern: 1, symbol: 1 }) {\n\t                for (var method in Paper.prototype) {\n\t                    if (Paper.prototype[has](method)) {\n\t                        this[method] = Paper.prototype[method];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        /*\\\n\t          * Element.attr\n\t          [ method ]\n\t          **\n\t          * Gets or sets given attributes of the element.\n\t          **\n\t          - params (object) contains key-value pairs of attributes you want to set\n\t          * or\n\t          - param (string) name of the attribute\n\t          = (Element) the current element\n\t          * or\n\t          = (string) value of attribute\n\t          > Usage\n\t          | el.attr({\n\t          |     fill: \"#fc0\",\n\t          |     stroke: \"#000\",\n\t          |     strokeWidth: 2, // CamelCase...\n\t          |     \"fill-opacity\": 0.5, // or dash-separated names\n\t          |     width: \"*=2\" // prefixed values\n\t          | });\n\t          | console.log(el.attr(\"fill\")); // #fc0\n\t          * Prefixed values in format `\"+=10\"` supported. All four operations\n\t          * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n\t          * and `-`: `\"+=2em\"`.\n\t         \\*/\n\t        Element.prototype.attr = function (params, value) {\n\t            var el = this,\n\t                node = el.node;\n\t            if (!params) {\n\t                if (node.nodeType != 1) {\n\t                    return {\n\t                        text: node.nodeValue\n\t                    };\n\t                }\n\t                var attr = node.attributes,\n\t                    out = {};\n\t                for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                    out[attr[i].nodeName] = attr[i].nodeValue;\n\t                }\n\t                return out;\n\t            }\n\t            if (is(params, \"string\")) {\n\t                if (arguments.length > 1) {\n\t                    var json = {};\n\t                    json[params] = value;\n\t                    params = json;\n\t                } else {\n\t                    return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n\t                }\n\t            }\n\t            for (var att in params) {\n\t                if (params[has](att)) {\n\t                    eve(\"snap.util.attr.\" + att, el, params[att]);\n\t                }\n\t            }\n\t            return el;\n\t        };\n\t        /*\\\n\t         * Snap.parse\n\t         [ method ]\n\t         **\n\t         * Parses SVG fragment and converts it into a @Fragment\n\t         **\n\t         - svg (string) SVG string\n\t         = (Fragment) the @Fragment\n\t        \\*/\n\t        Snap.parse = function (svg) {\n\t            var f = glob.doc.createDocumentFragment(),\n\t                full = true,\n\t                div = glob.doc.createElement(\"div\");\n\t            svg = Str(svg);\n\t            if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n\t                svg = \"<svg>\" + svg + \"</svg>\";\n\t                full = false;\n\t            }\n\t            div.innerHTML = svg;\n\t            svg = div.getElementsByTagName(\"svg\")[0];\n\t            if (svg) {\n\t                if (full) {\n\t                    f = svg;\n\t                } else {\n\t                    while (svg.firstChild) {\n\t                        f.appendChild(svg.firstChild);\n\t                    }\n\t                }\n\t            }\n\t            return new Fragment(f);\n\t        };\n\t        function Fragment(frag) {\n\t            this.node = frag;\n\t        }\n\t        /*\\\n\t         * Snap.fragment\n\t         [ method ]\n\t         **\n\t         * Creates a DOM fragment from a given list of elements or strings\n\t         **\n\t         - varargs (…) SVG string\n\t         = (Fragment) the @Fragment\n\t        \\*/\n\t        Snap.fragment = function () {\n\t            var args = Array.prototype.slice.call(arguments, 0),\n\t                f = glob.doc.createDocumentFragment();\n\t            for (var i = 0, ii = args.length; i < ii; i++) {\n\t                var item = args[i];\n\t                if (item.node && item.node.nodeType) {\n\t                    f.appendChild(item.node);\n\t                }\n\t                if (item.nodeType) {\n\t                    f.appendChild(item);\n\t                }\n\t                if (typeof item == \"string\") {\n\t                    f.appendChild(Snap.parse(item).node);\n\t                }\n\t            }\n\t            return new Fragment(f);\n\t        };\n\t\n\t        function make(name, parent) {\n\t            var res = $(name);\n\t            parent.appendChild(res);\n\t            var el = wrap(res);\n\t            return el;\n\t        }\n\t        function Paper(w, h) {\n\t            var res,\n\t                desc,\n\t                defs,\n\t                proto = Paper.prototype;\n\t            if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n\t                if (w.snap in hub) {\n\t                    return hub[w.snap];\n\t                }\n\t                var doc = w.ownerDocument;\n\t                res = new Element(w);\n\t                desc = w.getElementsByTagName(\"desc\")[0];\n\t                defs = w.getElementsByTagName(\"defs\")[0];\n\t                if (!desc) {\n\t                    desc = $(\"desc\");\n\t                    desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n\t                    res.node.appendChild(desc);\n\t                }\n\t                if (!defs) {\n\t                    defs = $(\"defs\");\n\t                    res.node.appendChild(defs);\n\t                }\n\t                res.defs = defs;\n\t                for (var key in proto) {\n\t                    if (proto[has](key)) {\n\t                        res[key] = proto[key];\n\t                    }\n\t                }res.paper = res.root = res;\n\t            } else {\n\t                res = make(\"svg\", glob.doc.body);\n\t                $(res.node, {\n\t                    height: h,\n\t                    version: 1.1,\n\t                    width: w,\n\t                    xmlns: xmlns\n\t                });\n\t            }\n\t            return res;\n\t        }\n\t        function wrap(dom) {\n\t            if (!dom) {\n\t                return dom;\n\t            }\n\t            if (dom instanceof Element || dom instanceof Fragment) {\n\t                return dom;\n\t            }\n\t            if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n\t                return new Paper(dom);\n\t            }\n\t            if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n\t                return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n\t            }\n\t            return new Element(dom);\n\t        }\n\t\n\t        Snap._.make = make;\n\t        Snap._.wrap = wrap;\n\t        /*\\\n\t         * Paper.el\n\t         [ method ]\n\t         **\n\t         * Creates an element on paper with a given name and no attributes\n\t         **\n\t         - name (string) tag name\n\t         - attr (object) attributes\n\t         = (Element) the current element\n\t         > Usage\n\t         | var c = paper.circle(10, 10, 10); // is the same as...\n\t         | var c = paper.el(\"circle\").attr({\n\t         |     cx: 10,\n\t         |     cy: 10,\n\t         |     r: 10\n\t         | });\n\t         | // and the same as\n\t         | var c = paper.el(\"circle\", {\n\t         |     cx: 10,\n\t         |     cy: 10,\n\t         |     r: 10\n\t         | });\n\t        \\*/\n\t        Paper.prototype.el = function (name, attr) {\n\t            var el = make(name, this.node);\n\t            attr && el.attr(attr);\n\t            return el;\n\t        };\n\t        /*\\\n\t         * Element.children\n\t         [ method ]\n\t         **\n\t         * Returns array of all the children of the element.\n\t         = (array) array of Elements\n\t        \\*/\n\t        Element.prototype.children = function () {\n\t            var out = [],\n\t                ch = this.node.childNodes;\n\t            for (var i = 0, ii = ch.length; i < ii; i++) {\n\t                out[i] = Snap(ch[i]);\n\t            }\n\t            return out;\n\t        };\n\t        function jsonFiller(root, o) {\n\t            for (var i = 0, ii = root.length; i < ii; i++) {\n\t                var item = {\n\t                    type: root[i].type,\n\t                    attr: root[i].attr()\n\t                },\n\t                    children = root[i].children();\n\t                o.push(item);\n\t                if (children.length) {\n\t                    jsonFiller(children, item.childNodes = []);\n\t                }\n\t            }\n\t        }\n\t        /*\\\n\t         * Element.toJSON\n\t         [ method ]\n\t         **\n\t         * Returns object representation of the given element and all its children.\n\t         = (object) in format\n\t         o {\n\t         o     type (string) this.type,\n\t         o     attr (object) attributes map,\n\t         o     childNodes (array) optional array of children in the same format\n\t         o }\n\t        \\*/\n\t        Element.prototype.toJSON = function () {\n\t            var out = [];\n\t            jsonFiller([this], out);\n\t            return out[0];\n\t        };\n\t        // default\n\t        eve.on(\"snap.util.getattr\", function () {\n\t            var att = eve.nt();\n\t            att = att.substring(att.lastIndexOf(\".\") + 1);\n\t            var css = att.replace(/[A-Z]/g, function (letter) {\n\t                return \"-\" + letter.toLowerCase();\n\t            });\n\t            if (cssAttr[has](css)) {\n\t                return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n\t            } else {\n\t                return $(this.node, att);\n\t            }\n\t        });\n\t        var cssAttr = {\n\t            \"alignment-baseline\": 0,\n\t            \"baseline-shift\": 0,\n\t            \"clip\": 0,\n\t            \"clip-path\": 0,\n\t            \"clip-rule\": 0,\n\t            \"color\": 0,\n\t            \"color-interpolation\": 0,\n\t            \"color-interpolation-filters\": 0,\n\t            \"color-profile\": 0,\n\t            \"color-rendering\": 0,\n\t            \"cursor\": 0,\n\t            \"direction\": 0,\n\t            \"display\": 0,\n\t            \"dominant-baseline\": 0,\n\t            \"enable-background\": 0,\n\t            \"fill\": 0,\n\t            \"fill-opacity\": 0,\n\t            \"fill-rule\": 0,\n\t            \"filter\": 0,\n\t            \"flood-color\": 0,\n\t            \"flood-opacity\": 0,\n\t            \"font\": 0,\n\t            \"font-family\": 0,\n\t            \"font-size\": 0,\n\t            \"font-size-adjust\": 0,\n\t            \"font-stretch\": 0,\n\t            \"font-style\": 0,\n\t            \"font-variant\": 0,\n\t            \"font-weight\": 0,\n\t            \"glyph-orientation-horizontal\": 0,\n\t            \"glyph-orientation-vertical\": 0,\n\t            \"image-rendering\": 0,\n\t            \"kerning\": 0,\n\t            \"letter-spacing\": 0,\n\t            \"lighting-color\": 0,\n\t            \"marker\": 0,\n\t            \"marker-end\": 0,\n\t            \"marker-mid\": 0,\n\t            \"marker-start\": 0,\n\t            \"mask\": 0,\n\t            \"opacity\": 0,\n\t            \"overflow\": 0,\n\t            \"pointer-events\": 0,\n\t            \"shape-rendering\": 0,\n\t            \"stop-color\": 0,\n\t            \"stop-opacity\": 0,\n\t            \"stroke\": 0,\n\t            \"stroke-dasharray\": 0,\n\t            \"stroke-dashoffset\": 0,\n\t            \"stroke-linecap\": 0,\n\t            \"stroke-linejoin\": 0,\n\t            \"stroke-miterlimit\": 0,\n\t            \"stroke-opacity\": 0,\n\t            \"stroke-width\": 0,\n\t            \"text-anchor\": 0,\n\t            \"text-decoration\": 0,\n\t            \"text-rendering\": 0,\n\t            \"unicode-bidi\": 0,\n\t            \"visibility\": 0,\n\t            \"word-spacing\": 0,\n\t            \"writing-mode\": 0\n\t        };\n\t\n\t        eve.on(\"snap.util.attr\", function (value) {\n\t            var att = eve.nt(),\n\t                attr = {};\n\t            att = att.substring(att.lastIndexOf(\".\") + 1);\n\t            attr[att] = value;\n\t            var style = att.replace(/-(\\w)/gi, function (all, letter) {\n\t                return letter.toUpperCase();\n\t            }),\n\t                css = att.replace(/[A-Z]/g, function (letter) {\n\t                return \"-\" + letter.toLowerCase();\n\t            });\n\t            if (cssAttr[has](css)) {\n\t                this.node.style[style] = value == null ? E : value;\n\t            } else {\n\t                $(this.node, attr);\n\t            }\n\t        });\n\t        (function (proto) {})(Paper.prototype);\n\t\n\t        // simple ajax\n\t        /*\\\n\t         * Snap.ajax\n\t         [ method ]\n\t         **\n\t         * Simple implementation of Ajax\n\t         **\n\t         - url (string) URL\n\t         - postData (object|string) data for post request\n\t         - callback (function) callback\n\t         - scope (object) #optional scope of callback\n\t         * or\n\t         - url (string) URL\n\t         - callback (function) callback\n\t         - scope (object) #optional scope of callback\n\t         = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\t        \\*/\n\t        Snap.ajax = function (url, postData, callback, scope) {\n\t            var req = new XMLHttpRequest(),\n\t                id = ID();\n\t            if (req) {\n\t                if (is(postData, \"function\")) {\n\t                    scope = callback;\n\t                    callback = postData;\n\t                    postData = null;\n\t                } else if (is(postData, \"object\")) {\n\t                    var pd = [];\n\t                    for (var key in postData) {\n\t                        if (postData.hasOwnProperty(key)) {\n\t                            pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n\t                        }\n\t                    }postData = pd.join(\"&\");\n\t                }\n\t                req.open(postData ? \"POST\" : \"GET\", url, true);\n\t                if (postData) {\n\t                    req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\t                    req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n\t                }\n\t                if (callback) {\n\t                    eve.once(\"snap.ajax.\" + id + \".0\", callback);\n\t                    eve.once(\"snap.ajax.\" + id + \".200\", callback);\n\t                    eve.once(\"snap.ajax.\" + id + \".304\", callback);\n\t                }\n\t                req.onreadystatechange = function () {\n\t                    if (req.readyState != 4) return;\n\t                    eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n\t                };\n\t                if (req.readyState == 4) {\n\t                    return req;\n\t                }\n\t                req.send(postData);\n\t                return req;\n\t            }\n\t        };\n\t        /*\\\n\t         * Snap.load\n\t         [ method ]\n\t         **\n\t         * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n\t         **\n\t         - url (string) URL\n\t         - callback (function) callback\n\t         - scope (object) #optional scope of callback\n\t        \\*/\n\t        Snap.load = function (url, callback, scope) {\n\t            Snap.ajax(url, function (req) {\n\t                var f = Snap.parse(req.responseText);\n\t                scope ? callback.call(scope, f) : callback(f);\n\t            });\n\t        };\n\t        var getOffset = function getOffset(elem) {\n\t            var box = elem.getBoundingClientRect(),\n\t                doc = elem.ownerDocument,\n\t                body = doc.body,\n\t                docElem = doc.documentElement,\n\t                clientTop = docElem.clientTop || body.clientTop || 0,\n\t                clientLeft = docElem.clientLeft || body.clientLeft || 0,\n\t                top = box.top + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop) - clientTop,\n\t                left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n\t            return {\n\t                y: top,\n\t                x: left\n\t            };\n\t        };\n\t        /*\\\n\t         * Snap.getElementByPoint\n\t         [ method ]\n\t         **\n\t         * Returns you topmost element under given point.\n\t         **\n\t         = (object) Snap element object\n\t         - x (number) x coordinate from the top left corner of the window\n\t         - y (number) y coordinate from the top left corner of the window\n\t         > Usage\n\t         | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\t        \\*/\n\t        Snap.getElementByPoint = function (x, y) {\n\t            var paper = this,\n\t                svg = paper.canvas,\n\t                target = glob.doc.elementFromPoint(x, y);\n\t            if (glob.win.opera && target.tagName == \"svg\") {\n\t                var so = getOffset(target),\n\t                    sr = target.createSVGRect();\n\t                sr.x = x - so.x;\n\t                sr.y = y - so.y;\n\t                sr.width = sr.height = 1;\n\t                var hits = target.getIntersectionList(sr, null);\n\t                if (hits.length) {\n\t                    target = hits[hits.length - 1];\n\t                }\n\t            }\n\t            if (!target) {\n\t                return null;\n\t            }\n\t            return wrap(target);\n\t        };\n\t        /*\\\n\t         * Snap.plugin\n\t         [ method ]\n\t         **\n\t         * Let you write plugins. You pass in a function with five arguments, like this:\n\t         | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n\t         |     Snap.newmethod = function () {};\n\t         |     Element.prototype.newmethod = function () {};\n\t         |     Paper.prototype.newmethod = function () {};\n\t         | });\n\t         * Inside the function you have access to all main objects (and their\n\t         * prototypes). This allow you to extend anything you want.\n\t         **\n\t         - f (function) your plugin body\n\t        \\*/\n\t        Snap.plugin = function (f) {\n\t            f(Snap, Element, Paper, glob, Fragment);\n\t        };\n\t        glob.win.Snap = Snap;\n\t        return Snap;\n\t    }(window || this);\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var elproto = Element.prototype,\n\t            is = Snap.is,\n\t            Str = String,\n\t            unit2px = Snap._unit2px,\n\t            $ = Snap._.$,\n\t            make = Snap._.make,\n\t            getSomeDefs = Snap._.getSomeDefs,\n\t            has = \"hasOwnProperty\",\n\t            wrap = Snap._.wrap;\n\t        /*\\\n\t         * Element.getBBox\n\t         [ method ]\n\t         **\n\t         * Returns the bounding box descriptor for the given element\n\t         **\n\t         = (object) bounding box descriptor:\n\t         o {\n\t         o     cx: (number) x of the center,\n\t         o     cy: (number) x of the center,\n\t         o     h: (number) height,\n\t         o     height: (number) height,\n\t         o     path: (string) path command for the box,\n\t         o     r0: (number) radius of a circle that fully encloses the box,\n\t         o     r1: (number) radius of the smallest circle that can be enclosed,\n\t         o     r2: (number) radius of the largest circle that can be enclosed,\n\t         o     vb: (string) box as a viewbox command,\n\t         o     w: (number) width,\n\t         o     width: (number) width,\n\t         o     x2: (number) x of the right side,\n\t         o     x: (number) x of the left side,\n\t         o     y2: (number) y of the bottom edge,\n\t         o     y: (number) y of the top edge\n\t         o }\n\t        \\*/\n\t        elproto.getBBox = function (isWithoutTransform) {\n\t            if (this.type == \"tspan\") {\n\t                return Snap._.box(this.node.getClientRects().item(0));\n\t            }\n\t            if (!Snap.Matrix || !Snap.path) {\n\t                return this.node.getBBox();\n\t            }\n\t            var el = this,\n\t                m = new Snap.Matrix();\n\t            if (el.removed) {\n\t                return Snap._.box();\n\t            }\n\t            while (el.type == \"use\") {\n\t                if (!isWithoutTransform) {\n\t                    m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n\t                }\n\t                if (el.original) {\n\t                    el = el.original;\n\t                } else {\n\t                    var href = el.attr(\"xlink:href\");\n\t                    el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n\t                }\n\t            }\n\t            var _ = el._,\n\t                pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n\t            try {\n\t                if (isWithoutTransform) {\n\t                    _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n\t                    return Snap._.box(_.bboxwt);\n\t                } else {\n\t                    el.realPath = pathfinder(el);\n\t                    el.matrix = el.transform().localMatrix;\n\t                    _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n\t                    return Snap._.box(_.bbox);\n\t                }\n\t            } catch (e) {\n\t                // Firefox doesn’t give you bbox of hidden element\n\t                return Snap._.box();\n\t            }\n\t        };\n\t        var propString = function propString() {\n\t            return this.string;\n\t        };\n\t        function extractTransform(el, tstr) {\n\t            if (tstr == null) {\n\t                var doReturn = true;\n\t                if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n\t                    tstr = el.node.getAttribute(\"gradientTransform\");\n\t                } else if (el.type == \"pattern\") {\n\t                    tstr = el.node.getAttribute(\"patternTransform\");\n\t                } else {\n\t                    tstr = el.node.getAttribute(\"transform\");\n\t                }\n\t                if (!tstr) {\n\t                    return new Snap.Matrix();\n\t                }\n\t                tstr = Snap._.svgTransform2string(tstr);\n\t            } else {\n\t                if (!Snap._.rgTransform.test(tstr)) {\n\t                    tstr = Snap._.svgTransform2string(tstr);\n\t                } else {\n\t                    tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n\t                }\n\t                if (is(tstr, \"array\")) {\n\t                    tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n\t                }\n\t                el._.transform = tstr;\n\t            }\n\t            var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n\t            if (doReturn) {\n\t                return m;\n\t            } else {\n\t                el.matrix = m;\n\t            }\n\t        }\n\t        /*\\\n\t         * Element.transform\n\t         [ method ]\n\t         **\n\t         * Gets or sets transformation of the element\n\t         **\n\t         - tstr (string) transform string in Snap or SVG format\n\t         = (Element) the current element\n\t         * or\n\t         = (object) transformation descriptor:\n\t         o {\n\t         o     string (string) transform string,\n\t         o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n\t         o     localMatrix (Matrix) matrix of transformations applied only to the element,\n\t         o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n\t         o     global (string) global transformation as string,\n\t         o     local (string) local transformation as string,\n\t         o     toString (function) returns `string` property\n\t         o }\n\t        \\*/\n\t        elproto.transform = function (tstr) {\n\t            var _ = this._;\n\t            if (tstr == null) {\n\t                var papa = this,\n\t                    global = new Snap.Matrix(this.node.getCTM()),\n\t                    local = extractTransform(this),\n\t                    ms = [local],\n\t                    m = new Snap.Matrix(),\n\t                    i,\n\t                    localString = local.toTransformString(),\n\t                    string = Str(local) == Str(this.matrix) ? Str(_.transform) : localString;\n\t                while (papa.type != \"svg\" && (papa = papa.parent())) {\n\t                    ms.push(extractTransform(papa));\n\t                }\n\t                i = ms.length;\n\t                while (i--) {\n\t                    m.add(ms[i]);\n\t                }\n\t                return {\n\t                    string: string,\n\t                    globalMatrix: global,\n\t                    totalMatrix: m,\n\t                    localMatrix: local,\n\t                    diffMatrix: global.clone().add(local.invert()),\n\t                    global: global.toTransformString(),\n\t                    total: m.toTransformString(),\n\t                    local: localString,\n\t                    toString: propString\n\t                };\n\t            }\n\t            if (tstr instanceof Snap.Matrix) {\n\t                this.matrix = tstr;\n\t                this._.transform = tstr.toTransformString();\n\t            } else {\n\t                extractTransform(this, tstr);\n\t            }\n\t\n\t            if (this.node) {\n\t                if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n\t                    $(this.node, { gradientTransform: this.matrix });\n\t                } else if (this.type == \"pattern\") {\n\t                    $(this.node, { patternTransform: this.matrix });\n\t                } else {\n\t                    $(this.node, { transform: this.matrix });\n\t                }\n\t            }\n\t\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.parent\n\t         [ method ]\n\t         **\n\t         * Returns the element's parent\n\t         **\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.parent = function () {\n\t            return wrap(this.node.parentNode);\n\t        };\n\t        /*\\\n\t         * Element.append\n\t         [ method ]\n\t         **\n\t         * Appends the given element to current one\n\t         **\n\t         - el (Element|Set) element to append\n\t         = (Element) the parent element\n\t        \\*/\n\t        /*\\\n\t         * Element.add\n\t         [ method ]\n\t         **\n\t         * See @Element.append\n\t        \\*/\n\t        elproto.append = elproto.add = function (el) {\n\t            if (el) {\n\t                if (el.type == \"set\") {\n\t                    var it = this;\n\t                    el.forEach(function (el) {\n\t                        it.add(el);\n\t                    });\n\t                    return this;\n\t                }\n\t                el = wrap(el);\n\t                this.node.appendChild(el.node);\n\t                el.paper = this.paper;\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.appendTo\n\t         [ method ]\n\t         **\n\t         * Appends the current element to the given one\n\t         **\n\t         - el (Element) parent element to append to\n\t         = (Element) the child element\n\t        \\*/\n\t        elproto.appendTo = function (el) {\n\t            if (el) {\n\t                el = wrap(el);\n\t                el.append(this);\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.prepend\n\t         [ method ]\n\t         **\n\t         * Prepends the given element to the current one\n\t         **\n\t         - el (Element) element to prepend\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.prepend = function (el) {\n\t            if (el) {\n\t                if (el.type == \"set\") {\n\t                    var it = this,\n\t                        first;\n\t                    el.forEach(function (el) {\n\t                        if (first) {\n\t                            first.after(el);\n\t                        } else {\n\t                            it.prepend(el);\n\t                        }\n\t                        first = el;\n\t                    });\n\t                    return this;\n\t                }\n\t                el = wrap(el);\n\t                var parent = el.parent();\n\t                this.node.insertBefore(el.node, this.node.firstChild);\n\t                this.add && this.add();\n\t                el.paper = this.paper;\n\t                this.parent() && this.parent().add();\n\t                parent && parent.add();\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.prependTo\n\t         [ method ]\n\t         **\n\t         * Prepends the current element to the given one\n\t         **\n\t         - el (Element) parent element to prepend to\n\t         = (Element) the child element\n\t        \\*/\n\t        elproto.prependTo = function (el) {\n\t            el = wrap(el);\n\t            el.prepend(this);\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.before\n\t         [ method ]\n\t         **\n\t         * Inserts given element before the current one\n\t         **\n\t         - el (Element) element to insert\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.before = function (el) {\n\t            if (el.type == \"set\") {\n\t                var it = this;\n\t                el.forEach(function (el) {\n\t                    var parent = el.parent();\n\t                    it.node.parentNode.insertBefore(el.node, it.node);\n\t                    parent && parent.add();\n\t                });\n\t                this.parent().add();\n\t                return this;\n\t            }\n\t            el = wrap(el);\n\t            var parent = el.parent();\n\t            this.node.parentNode.insertBefore(el.node, this.node);\n\t            this.parent() && this.parent().add();\n\t            parent && parent.add();\n\t            el.paper = this.paper;\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.after\n\t         [ method ]\n\t         **\n\t         * Inserts given element after the current one\n\t         **\n\t         - el (Element) element to insert\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.after = function (el) {\n\t            el = wrap(el);\n\t            var parent = el.parent();\n\t            if (this.node.nextSibling) {\n\t                this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n\t            } else {\n\t                this.node.parentNode.appendChild(el.node);\n\t            }\n\t            this.parent() && this.parent().add();\n\t            parent && parent.add();\n\t            el.paper = this.paper;\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.insertBefore\n\t         [ method ]\n\t         **\n\t         * Inserts the element after the given one\n\t         **\n\t         - el (Element) element next to whom insert to\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.insertBefore = function (el) {\n\t            el = wrap(el);\n\t            var parent = this.parent();\n\t            el.node.parentNode.insertBefore(this.node, el.node);\n\t            this.paper = el.paper;\n\t            parent && parent.add();\n\t            el.parent() && el.parent().add();\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.insertAfter\n\t         [ method ]\n\t         **\n\t         * Inserts the element after the given one\n\t         **\n\t         - el (Element) element next to whom insert to\n\t         = (Element) the parent element\n\t        \\*/\n\t        elproto.insertAfter = function (el) {\n\t            el = wrap(el);\n\t            var parent = this.parent();\n\t            el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n\t            this.paper = el.paper;\n\t            parent && parent.add();\n\t            el.parent() && el.parent().add();\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.remove\n\t         [ method ]\n\t         **\n\t         * Removes element from the DOM\n\t         = (Element) the detached element\n\t        \\*/\n\t        elproto.remove = function () {\n\t            var parent = this.parent();\n\t            this.node.parentNode && this.node.parentNode.removeChild(this.node);\n\t            delete this.paper;\n\t            this.removed = true;\n\t            parent && parent.add();\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.select\n\t         [ method ]\n\t         **\n\t         * Gathers the nested @Element matching the given set of CSS selectors\n\t         **\n\t         - query (string) CSS selector\n\t         = (Element) result of query selection\n\t        \\*/\n\t        elproto.select = function (query) {\n\t            return wrap(this.node.querySelector(query));\n\t        };\n\t        /*\\\n\t         * Element.selectAll\n\t         [ method ]\n\t         **\n\t         * Gathers nested @Element objects matching the given set of CSS selectors\n\t         **\n\t         - query (string) CSS selector\n\t         = (Set|array) result of query selection\n\t        \\*/\n\t        elproto.selectAll = function (query) {\n\t            var nodelist = this.node.querySelectorAll(query),\n\t                set = (Snap.set || Array)();\n\t            for (var i = 0; i < nodelist.length; i++) {\n\t                set.push(wrap(nodelist[i]));\n\t            }\n\t            return set;\n\t        };\n\t        /*\\\n\t         * Element.asPX\n\t         [ method ]\n\t         **\n\t         * Returns given attribute of the element as a `px` value (not %, em, etc.)\n\t         **\n\t         - attr (string) attribute name\n\t         - value (string) #optional attribute value\n\t         = (Element) result of query selection\n\t        \\*/\n\t        elproto.asPX = function (attr, value) {\n\t            if (value == null) {\n\t                value = this.attr(attr);\n\t            }\n\t            return +unit2px(this, attr, value);\n\t        };\n\t        // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n\t        /*\\\n\t         * Element.use\n\t         [ method ]\n\t         **\n\t         * Creates a `<use>` element linked to the current element\n\t         **\n\t         = (Element) the `<use>` element\n\t        \\*/\n\t        elproto.use = function () {\n\t            var use,\n\t                id = this.node.id;\n\t            if (!id) {\n\t                id = this.id;\n\t                $(this.node, {\n\t                    id: id\n\t                });\n\t            }\n\t            if (this.type == \"linearGradient\" || this.type == \"radialGradient\" || this.type == \"pattern\") {\n\t                use = make(this.type, this.node.parentNode);\n\t            } else {\n\t                use = make(\"use\", this.node.parentNode);\n\t            }\n\t            $(use.node, {\n\t                \"xlink:href\": \"#\" + id\n\t            });\n\t            use.original = this;\n\t            return use;\n\t        };\n\t        function fixids(el) {\n\t            var els = el.selectAll(\"*\"),\n\t                it,\n\t                url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n\t                ids = [],\n\t                uses = {};\n\t            function urltest(it, name) {\n\t                var val = $(it.node, name);\n\t                val = val && val.match(url);\n\t                val = val && val[2];\n\t                if (val && val.charAt() == \"#\") {\n\t                    val = val.substring(1);\n\t                } else {\n\t                    return;\n\t                }\n\t                if (val) {\n\t                    uses[val] = (uses[val] || []).concat(function (id) {\n\t                        var attr = {};\n\t                        attr[name] = Snap.url(id);\n\t                        $(it.node, attr);\n\t                    });\n\t                }\n\t            }\n\t            function linktest(it) {\n\t                var val = $(it.node, \"xlink:href\");\n\t                if (val && val.charAt() == \"#\") {\n\t                    val = val.substring(1);\n\t                } else {\n\t                    return;\n\t                }\n\t                if (val) {\n\t                    uses[val] = (uses[val] || []).concat(function (id) {\n\t                        it.attr(\"xlink:href\", \"#\" + id);\n\t                    });\n\t                }\n\t            }\n\t            for (var i = 0, ii = els.length; i < ii; i++) {\n\t                it = els[i];\n\t                urltest(it, \"fill\");\n\t                urltest(it, \"stroke\");\n\t                urltest(it, \"filter\");\n\t                urltest(it, \"mask\");\n\t                urltest(it, \"clip-path\");\n\t                linktest(it);\n\t                var oldid = $(it.node, \"id\");\n\t                if (oldid) {\n\t                    $(it.node, { id: it.id });\n\t                    ids.push({\n\t                        old: oldid,\n\t                        id: it.id\n\t                    });\n\t                }\n\t            }\n\t            for (i = 0, ii = ids.length; i < ii; i++) {\n\t                var fs = uses[ids[i].old];\n\t                if (fs) {\n\t                    for (var j = 0, jj = fs.length; j < jj; j++) {\n\t                        fs[j](ids[i].id);\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        /*\\\n\t         * Element.clone\n\t         [ method ]\n\t         **\n\t         * Creates a clone of the element and inserts it after the element\n\t         **\n\t         = (Element) the clone\n\t        \\*/\n\t        elproto.clone = function () {\n\t            var clone = wrap(this.node.cloneNode(true));\n\t            if ($(clone.node, \"id\")) {\n\t                $(clone.node, { id: clone.id });\n\t            }\n\t            fixids(clone);\n\t            clone.insertAfter(this);\n\t            return clone;\n\t        };\n\t        /*\\\n\t         * Element.toDefs\n\t         [ method ]\n\t         **\n\t         * Moves element to the shared `<defs>` area\n\t         **\n\t         = (Element) the element\n\t        \\*/\n\t        elproto.toDefs = function () {\n\t            var defs = getSomeDefs(this);\n\t            defs.appendChild(this.node);\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.toPattern\n\t         [ method ]\n\t         **\n\t         * Creates a `<pattern>` element from the current element\n\t         **\n\t         * To create a pattern you have to specify the pattern rect:\n\t         - x (string|number)\n\t         - y (string|number)\n\t         - width (string|number)\n\t         - height (string|number)\n\t         = (Element) the `<pattern>` element\n\t         * You can use pattern later on as an argument for `fill` attribute:\n\t         | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n\t         |         fill: \"none\",\n\t         |         stroke: \"#bada55\",\n\t         |         strokeWidth: 5\n\t         |     }).pattern(0, 0, 10, 10),\n\t         |     c = paper.circle(200, 200, 100);\n\t         | c.attr({\n\t         |     fill: p\n\t         | });\n\t        \\*/\n\t        elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n\t            var p = make(\"pattern\", getSomeDefs(this));\n\t            if (x == null) {\n\t                x = this.getBBox();\n\t            }\n\t            if (is(x, \"object\") && \"x\" in x) {\n\t                y = x.y;\n\t                width = x.width;\n\t                height = x.height;\n\t                x = x.x;\n\t            }\n\t            $(p.node, {\n\t                x: x,\n\t                y: y,\n\t                width: width,\n\t                height: height,\n\t                patternUnits: \"userSpaceOnUse\",\n\t                id: p.id,\n\t                viewBox: [x, y, width, height].join(\" \")\n\t            });\n\t            p.node.appendChild(this.node);\n\t            return p;\n\t        };\n\t        // SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n\t        // SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n\t        /*\\\n\t         * Element.marker\n\t         [ method ]\n\t         **\n\t         * Creates a `<marker>` element from the current element\n\t         **\n\t         * To create a marker you have to specify the bounding rect and reference point:\n\t         - x (number)\n\t         - y (number)\n\t         - width (number)\n\t         - height (number)\n\t         - refX (number)\n\t         - refY (number)\n\t         = (Element) the `<marker>` element\n\t         * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n\t        \\*/\n\t        // TODO add usage for markers\n\t        elproto.marker = function (x, y, width, height, refX, refY) {\n\t            var p = make(\"marker\", getSomeDefs(this));\n\t            if (x == null) {\n\t                x = this.getBBox();\n\t            }\n\t            if (is(x, \"object\") && \"x\" in x) {\n\t                y = x.y;\n\t                width = x.width;\n\t                height = x.height;\n\t                refX = x.refX || x.cx;\n\t                refY = x.refY || x.cy;\n\t                x = x.x;\n\t            }\n\t            $(p.node, {\n\t                viewBox: [x, y, width, height].join(\" \"),\n\t                markerWidth: width,\n\t                markerHeight: height,\n\t                orient: \"auto\",\n\t                refX: refX || 0,\n\t                refY: refY || 0,\n\t                id: p.id\n\t            });\n\t            p.node.appendChild(this.node);\n\t            return p;\n\t        };\n\t        var eldata = {};\n\t        /*\\\n\t         * Element.data\n\t         [ method ]\n\t         **\n\t         * Adds or retrieves given value associated with given key. (Don’t confuse\n\t         * with `data-` attributes)\n\t         *\n\t         * See also @Element.removeData\n\t         - key (string) key to store data\n\t         - value (any) #optional value to store\n\t         = (object) @Element\n\t         * or, if value is not specified:\n\t         = (any) value\n\t         > Usage\n\t         | for (var i = 0, i < 5, i++) {\n\t         |     paper.circle(10 + 15 * i, 10, 10)\n\t         |          .attr({fill: \"#000\"})\n\t         |          .data(\"i\", i)\n\t         |          .click(function () {\n\t         |             alert(this.data(\"i\"));\n\t         |          });\n\t         | }\n\t        \\*/\n\t        elproto.data = function (key, value) {\n\t            var data = eldata[this.id] = eldata[this.id] || {};\n\t            if (arguments.length == 0) {\n\t                eve(\"snap.data.get.\" + this.id, this, data, null);\n\t                return data;\n\t            }\n\t            if (arguments.length == 1) {\n\t                if (Snap.is(key, \"object\")) {\n\t                    for (var i in key) {\n\t                        if (key[has](i)) {\n\t                            this.data(i, key[i]);\n\t                        }\n\t                    }return this;\n\t                }\n\t                eve(\"snap.data.get.\" + this.id, this, data[key], key);\n\t                return data[key];\n\t            }\n\t            data[key] = value;\n\t            eve(\"snap.data.set.\" + this.id, this, value, key);\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.removeData\n\t         [ method ]\n\t         **\n\t         * Removes value associated with an element by given key.\n\t         * If key is not provided, removes all the data of the element.\n\t         - key (string) #optional key\n\t         = (object) @Element\n\t        \\*/\n\t        elproto.removeData = function (key) {\n\t            if (key == null) {\n\t                eldata[this.id] = {};\n\t            } else {\n\t                eldata[this.id] && delete eldata[this.id][key];\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.outerSVG\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n\t         *\n\t         * See also @Element.innerSVG\n\t         = (string) SVG code for the element\n\t        \\*/\n\t        /*\\\n\t         * Element.toString\n\t         [ method ]\n\t         **\n\t         * See @Element.outerSVG\n\t        \\*/\n\t        elproto.outerSVG = elproto.toString = toString(1);\n\t        /*\\\n\t         * Element.innerSVG\n\t         [ method ]\n\t         **\n\t         * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n\t         = (string) SVG code for the element\n\t        \\*/\n\t        elproto.innerSVG = toString();\n\t        function toString(type) {\n\t            return function () {\n\t                var res = type ? \"<\" + this.type : \"\",\n\t                    attr = this.node.attributes,\n\t                    chld = this.node.childNodes;\n\t                if (type) {\n\t                    for (var i = 0, ii = attr.length; i < ii; i++) {\n\t                        res += \" \" + attr[i].name + '=\"' + attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n\t                    }\n\t                }\n\t                if (chld.length) {\n\t                    type && (res += \">\");\n\t                    for (i = 0, ii = chld.length; i < ii; i++) {\n\t                        if (chld[i].nodeType == 3) {\n\t                            res += chld[i].nodeValue;\n\t                        } else if (chld[i].nodeType == 1) {\n\t                            res += wrap(chld[i]).toString();\n\t                        }\n\t                    }\n\t                    type && (res += \"</\" + this.type + \">\");\n\t                } else {\n\t                    type && (res += \"/>\");\n\t                }\n\t                return res;\n\t            };\n\t        }\n\t        elproto.toDataURL = function () {\n\t            if (window && window.btoa) {\n\t                var bb = this.getBBox(),\n\t                    svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n\t                    x: +bb.x.toFixed(3),\n\t                    y: +bb.y.toFixed(3),\n\t                    width: +bb.width.toFixed(3),\n\t                    height: +bb.height.toFixed(3),\n\t                    contents: this.outerSVG()\n\t                });\n\t                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n\t            }\n\t        };\n\t        /*\\\n\t         * Fragment.select\n\t         [ method ]\n\t         **\n\t         * See @Element.select\n\t        \\*/\n\t        Fragment.prototype.select = elproto.select;\n\t        /*\\\n\t         * Fragment.selectAll\n\t         [ method ]\n\t         **\n\t         * See @Element.selectAll\n\t        \\*/\n\t        Fragment.prototype.selectAll = elproto.selectAll;\n\t    });\n\t\n\t    // Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var elproto = Element.prototype,\n\t            is = Snap.is,\n\t            Str = String,\n\t            has = \"hasOwnProperty\";\n\t        function slice(from, to, f) {\n\t            return function (arr) {\n\t                var res = arr.slice(from, to);\n\t                if (res.length == 1) {\n\t                    res = res[0];\n\t                }\n\t                return f ? f(res) : res;\n\t            };\n\t        }\n\t        var Animation = function Animation(attr, ms, easing, callback) {\n\t            if (typeof easing == \"function\" && !easing.length) {\n\t                callback = easing;\n\t                easing = mina.linear;\n\t            }\n\t            this.attr = attr;\n\t            this.dur = ms;\n\t            easing && (this.easing = easing);\n\t            callback && (this.callback = callback);\n\t        };\n\t        Snap._.Animation = Animation;\n\t        /*\\\n\t         * Snap.animation\n\t         [ method ]\n\t         **\n\t         * Creates an animation object\n\t         **\n\t         - attr (object) attributes of final destination\n\t         - duration (number) duration of the animation, in milliseconds\n\t         - easing (function) #optional one of easing functions of @mina or custom one\n\t         - callback (function) #optional callback function that fires when animation ends\n\t         = (object) animation object\n\t        \\*/\n\t        Snap.animation = function (attr, ms, easing, callback) {\n\t            return new Animation(attr, ms, easing, callback);\n\t        };\n\t        /*\\\n\t         * Element.inAnim\n\t         [ method ]\n\t         **\n\t         * Returns a set of animations that may be able to manipulate the current element\n\t         **\n\t         = (object) in format:\n\t         o {\n\t         o     anim (object) animation object,\n\t         o     mina (object) @mina object,\n\t         o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n\t         o     status (function) gets or sets the status of the animation,\n\t         o     stop (function) stops the animation\n\t         o }\n\t        \\*/\n\t        elproto.inAnim = function () {\n\t            var el = this,\n\t                res = [];\n\t            for (var id in el.anims) {\n\t                if (el.anims[has](id)) {\n\t                    (function (a) {\n\t                        res.push({\n\t                            anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n\t                            mina: a,\n\t                            curStatus: a.status(),\n\t                            status: function status(val) {\n\t                                return a.status(val);\n\t                            },\n\t                            stop: function stop() {\n\t                                a.stop();\n\t                            }\n\t                        });\n\t                    })(el.anims[id]);\n\t                }\n\t            }return res;\n\t        };\n\t        /*\\\n\t         * Snap.animate\n\t         [ method ]\n\t         **\n\t         * Runs generic animation of one number into another with a caring function\n\t         **\n\t         - from (number|array) number or array of numbers\n\t         - to (number|array) number or array of numbers\n\t         - setter (function) caring function that accepts one number argument\n\t         - duration (number) duration, in milliseconds\n\t         - easing (function) #optional easing function from @mina or custom\n\t         - callback (function) #optional callback function to execute when animation ends\n\t         = (object) animation object in @mina format\n\t         o {\n\t         o     id (string) animation id, consider it read-only,\n\t         o     duration (function) gets or sets the duration of the animation,\n\t         o     easing (function) easing,\n\t         o     speed (function) gets or sets the speed of the animation,\n\t         o     status (function) gets or sets the status of the animation,\n\t         o     stop (function) stops the animation\n\t         o }\n\t         | var rect = Snap().rect(0, 0, 10, 10);\n\t         | Snap.animate(0, 10, function (val) {\n\t         |     rect.attr({\n\t         |         x: val\n\t         |     });\n\t         | }, 1000);\n\t         | // in given context is equivalent to\n\t         | rect.animate({x: 10}, 1000);\n\t        \\*/\n\t        Snap.animate = function (from, to, setter, ms, easing, callback) {\n\t            if (typeof easing == \"function\" && !easing.length) {\n\t                callback = easing;\n\t                easing = mina.linear;\n\t            }\n\t            var now = mina.time(),\n\t                anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n\t            callback && eve.once(\"mina.finish.\" + anim.id, callback);\n\t            return anim;\n\t        };\n\t        /*\\\n\t         * Element.stop\n\t         [ method ]\n\t         **\n\t         * Stops all the animations for the current element\n\t         **\n\t         = (Element) the current element\n\t        \\*/\n\t        elproto.stop = function () {\n\t            var anims = this.inAnim();\n\t            for (var i = 0, ii = anims.length; i < ii; i++) {\n\t                anims[i].stop();\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.animate\n\t         [ method ]\n\t         **\n\t         * Animates the given attributes of the element\n\t         **\n\t         - attrs (object) key-value pairs of destination attributes\n\t         - duration (number) duration of the animation in milliseconds\n\t         - easing (function) #optional easing function from @mina or custom\n\t         - callback (function) #optional callback function that executes when the animation ends\n\t         = (Element) the current element\n\t        \\*/\n\t        elproto.animate = function (attrs, ms, easing, callback) {\n\t            if (typeof easing == \"function\" && !easing.length) {\n\t                callback = easing;\n\t                easing = mina.linear;\n\t            }\n\t            if (attrs instanceof Animation) {\n\t                callback = attrs.callback;\n\t                easing = attrs.easing;\n\t                ms = attrs.dur;\n\t                attrs = attrs.attr;\n\t            }\n\t            var fkeys = [],\n\t                tkeys = [],\n\t                keys = {},\n\t                from,\n\t                to,\n\t                f,\n\t                eq,\n\t                el = this;\n\t            for (var key in attrs) {\n\t                if (attrs[has](key)) {\n\t                    if (el.equal) {\n\t                        eq = el.equal(key, Str(attrs[key]));\n\t                        from = eq.from;\n\t                        to = eq.to;\n\t                        f = eq.f;\n\t                    } else {\n\t                        from = +el.attr(key);\n\t                        to = +attrs[key];\n\t                    }\n\t                    var len = is(from, \"array\") ? from.length : 1;\n\t                    keys[key] = slice(fkeys.length, fkeys.length + len, f);\n\t                    fkeys = fkeys.concat(from);\n\t                    tkeys = tkeys.concat(to);\n\t                }\n\t            }var now = mina.time(),\n\t                anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n\t                var attr = {};\n\t                for (var key in keys) {\n\t                    if (keys[has](key)) {\n\t                        attr[key] = keys[key](val);\n\t                    }\n\t                }el.attr(attr);\n\t            }, easing);\n\t            el.anims[anim.id] = anim;\n\t            anim._attrs = attrs;\n\t            anim._callback = callback;\n\t            eve(\"snap.animcreated.\" + el.id, anim);\n\t            eve.once(\"mina.finish.\" + anim.id, function () {\n\t                eve.off(\"mina.*.\" + anim.id);\n\t                delete el.anims[anim.id];\n\t                callback && callback.call(el);\n\t            });\n\t            eve.once(\"mina.stop.\" + anim.id, function () {\n\t                eve.off(\"mina.*.\" + anim.id);\n\t                delete el.anims[anim.id];\n\t            });\n\t            return el;\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var objectToString = Object.prototype.toString,\n\t            Str = String,\n\t            math = Math,\n\t            E = \"\";\n\t        function Matrix(a, b, c, d, e, f) {\n\t            if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n\t                this.a = a.a;\n\t                this.b = a.b;\n\t                this.c = a.c;\n\t                this.d = a.d;\n\t                this.e = a.e;\n\t                this.f = a.f;\n\t                return;\n\t            }\n\t            if (a != null) {\n\t                this.a = +a;\n\t                this.b = +b;\n\t                this.c = +c;\n\t                this.d = +d;\n\t                this.e = +e;\n\t                this.f = +f;\n\t            } else {\n\t                this.a = 1;\n\t                this.b = 0;\n\t                this.c = 0;\n\t                this.d = 1;\n\t                this.e = 0;\n\t                this.f = 0;\n\t            }\n\t        }\n\t        (function (matrixproto) {\n\t            /*\\\n\t             * Matrix.add\n\t             [ method ]\n\t             **\n\t             * Adds the given matrix to existing one\n\t             - a (number)\n\t             - b (number)\n\t             - c (number)\n\t             - d (number)\n\t             - e (number)\n\t             - f (number)\n\t             * or\n\t             - matrix (object) @Matrix\n\t            \\*/\n\t            matrixproto.add = function (a, b, c, d, e, f) {\n\t                if (a && a instanceof Matrix) {\n\t                    return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n\t                }\n\t                var aNew = a * this.a + b * this.c,\n\t                    bNew = a * this.b + b * this.d;\n\t                this.e += e * this.a + f * this.c;\n\t                this.f += e * this.b + f * this.d;\n\t                this.c = c * this.a + d * this.c;\n\t                this.d = c * this.b + d * this.d;\n\t\n\t                this.a = aNew;\n\t                this.b = bNew;\n\t                return this;\n\t            };\n\t            /*\\\n\t             * Matrix.multLeft\n\t             [ method ]\n\t             **\n\t             * Multiplies a passed affine transform to the left: M * this.\n\t             - a (number)\n\t             - b (number)\n\t             - c (number)\n\t             - d (number)\n\t             - e (number)\n\t             - f (number)\n\t             * or\n\t             - matrix (object) @Matrix\n\t            \\*/\n\t            Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n\t                if (a && a instanceof Matrix) {\n\t                    return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n\t                }\n\t                var aNew = a * this.a + c * this.b,\n\t                    cNew = a * this.c + c * this.d,\n\t                    eNew = a * this.e + c * this.f + e;\n\t                this.b = b * this.a + d * this.b;\n\t                this.d = b * this.c + d * this.d;\n\t                this.f = b * this.e + d * this.f + f;\n\t\n\t                this.a = aNew;\n\t                this.c = cNew;\n\t                this.e = eNew;\n\t                return this;\n\t            };\n\t            /*\\\n\t             * Matrix.invert\n\t             [ method ]\n\t             **\n\t             * Returns an inverted version of the matrix\n\t             = (object) @Matrix\n\t            \\*/\n\t            matrixproto.invert = function () {\n\t                var me = this,\n\t                    x = me.a * me.d - me.b * me.c;\n\t                return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n\t            };\n\t            /*\\\n\t             * Matrix.clone\n\t             [ method ]\n\t             **\n\t             * Returns a copy of the matrix\n\t             = (object) @Matrix\n\t            \\*/\n\t            matrixproto.clone = function () {\n\t                return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n\t            };\n\t            /*\\\n\t             * Matrix.translate\n\t             [ method ]\n\t             **\n\t             * Translate the matrix\n\t             - x (number) horizontal offset distance\n\t             - y (number) vertical offset distance\n\t            \\*/\n\t            matrixproto.translate = function (x, y) {\n\t                this.e += x * this.a + y * this.c;\n\t                this.f += x * this.b + y * this.d;\n\t                return this;\n\t            };\n\t            /*\\\n\t             * Matrix.scale\n\t             [ method ]\n\t             **\n\t             * Scales the matrix\n\t             - x (number) amount to be scaled, with `1` resulting in no change\n\t             - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n\t             - cx (number) #optional horizontal origin point from which to scale\n\t             - cy (number) #optional vertical origin point from which to scale\n\t             * Default cx, cy is the middle point of the element.\n\t            \\*/\n\t            matrixproto.scale = function (x, y, cx, cy) {\n\t                y == null && (y = x);\n\t                (cx || cy) && this.translate(cx, cy);\n\t                this.a *= x;\n\t                this.b *= x;\n\t                this.c *= y;\n\t                this.d *= y;\n\t                (cx || cy) && this.translate(-cx, -cy);\n\t                return this;\n\t            };\n\t            /*\\\n\t             * Matrix.rotate\n\t             [ method ]\n\t             **\n\t             * Rotates the matrix\n\t             - a (number) angle of rotation, in degrees\n\t             - x (number) horizontal origin point from which to rotate\n\t             - y (number) vertical origin point from which to rotate\n\t            \\*/\n\t            matrixproto.rotate = function (a, x, y) {\n\t                a = Snap.rad(a);\n\t                x = x || 0;\n\t                y = y || 0;\n\t                var cos = +math.cos(a).toFixed(9),\n\t                    sin = +math.sin(a).toFixed(9);\n\t                this.add(cos, sin, -sin, cos, x, y);\n\t                return this.add(1, 0, 0, 1, -x, -y);\n\t            };\n\t            /*\\\n\t             * Matrix.skewX\n\t             [ method ]\n\t             **\n\t             * Skews the matrix along the x-axis\n\t             - x (number) Angle to skew along the x-axis (in degrees).\n\t            \\*/\n\t            matrixproto.skewX = function (x) {\n\t                return this.skew(x, 0);\n\t            };\n\t            /*\\\n\t             * Matrix.skewY\n\t             [ method ]\n\t             **\n\t             * Skews the matrix along the y-axis\n\t             - y (number) Angle to skew along the y-axis (in degrees).\n\t            \\*/\n\t            matrixproto.skewY = function (y) {\n\t                return this.skew(0, y);\n\t            };\n\t            /*\\\n\t             * Matrix.skew\n\t             [ method ]\n\t             **\n\t             * Skews the matrix\n\t             - y (number) Angle to skew along the y-axis (in degrees).\n\t             - x (number) Angle to skew along the x-axis (in degrees).\n\t            \\*/\n\t            matrixproto.skew = function (x, y) {\n\t                x = x || 0;\n\t                y = y || 0;\n\t                x = Snap.rad(x);\n\t                y = Snap.rad(y);\n\t                var c = math.tan(x).toFixed(9);\n\t                var b = math.tan(y).toFixed(9);\n\t                return this.add(1, b, c, 1, 0, 0);\n\t            };\n\t            /*\\\n\t             * Matrix.x\n\t             [ method ]\n\t             **\n\t             * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n\t             - x (number)\n\t             - y (number)\n\t             = (number) x\n\t            \\*/\n\t            matrixproto.x = function (x, y) {\n\t                return x * this.a + y * this.c + this.e;\n\t            };\n\t            /*\\\n\t             * Matrix.y\n\t             [ method ]\n\t             **\n\t             * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n\t             - x (number)\n\t             - y (number)\n\t             = (number) y\n\t            \\*/\n\t            matrixproto.y = function (x, y) {\n\t                return x * this.b + y * this.d + this.f;\n\t            };\n\t            matrixproto.get = function (i) {\n\t                return +this[Str.fromCharCode(97 + i)].toFixed(4);\n\t            };\n\t            matrixproto.toString = function () {\n\t                return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n\t            };\n\t            matrixproto.offset = function () {\n\t                return [this.e.toFixed(4), this.f.toFixed(4)];\n\t            };\n\t            function norm(a) {\n\t                return a[0] * a[0] + a[1] * a[1];\n\t            }\n\t            function normalize(a) {\n\t                var mag = math.sqrt(norm(a));\n\t                a[0] && (a[0] /= mag);\n\t                a[1] && (a[1] /= mag);\n\t            }\n\t            /*\\\n\t             * Matrix.determinant\n\t             [ method ]\n\t             **\n\t             * Finds determinant of the given matrix.\n\t             = (number) determinant\n\t            \\*/\n\t            matrixproto.determinant = function () {\n\t                return this.a * this.d - this.b * this.c;\n\t            };\n\t            /*\\\n\t             * Matrix.split\n\t             [ method ]\n\t             **\n\t             * Splits matrix into primitive transformations\n\t             = (object) in format:\n\t             o dx (number) translation by x\n\t             o dy (number) translation by y\n\t             o scalex (number) scale by x\n\t             o scaley (number) scale by y\n\t             o shear (number) shear\n\t             o rotate (number) rotation in deg\n\t             o isSimple (boolean) could it be represented via simple transformations\n\t            \\*/\n\t            matrixproto.split = function () {\n\t                var out = {};\n\t                // translation\n\t                out.dx = this.e;\n\t                out.dy = this.f;\n\t\n\t                // scale and shear\n\t                var row = [[this.a, this.b], [this.c, this.d]];\n\t                out.scalex = math.sqrt(norm(row[0]));\n\t                normalize(row[0]);\n\t\n\t                out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n\t                row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\t\n\t                out.scaley = math.sqrt(norm(row[1]));\n\t                normalize(row[1]);\n\t                out.shear /= out.scaley;\n\t\n\t                if (this.determinant() < 0) {\n\t                    out.scalex = -out.scalex;\n\t                }\n\t\n\t                // rotation\n\t                var sin = row[0][1],\n\t                    cos = row[1][1];\n\t                if (cos < 0) {\n\t                    out.rotate = Snap.deg(math.acos(cos));\n\t                    if (sin < 0) {\n\t                        out.rotate = 360 - out.rotate;\n\t                    }\n\t                } else {\n\t                    out.rotate = Snap.deg(math.asin(sin));\n\t                }\n\t\n\t                out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n\t                out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n\t                out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n\t                return out;\n\t            };\n\t            /*\\\n\t             * Matrix.toTransformString\n\t             [ method ]\n\t             **\n\t             * Returns transform string that represents given matrix\n\t             = (string) transform string\n\t            \\*/\n\t            matrixproto.toTransformString = function (shorter) {\n\t                var s = shorter || this.split();\n\t                if (!+s.shear.toFixed(9)) {\n\t                    s.scalex = +s.scalex.toFixed(4);\n\t                    s.scaley = +s.scaley.toFixed(4);\n\t                    s.rotate = +s.rotate.toFixed(4);\n\t                    return (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) + (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) + (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n\t                } else {\n\t                    return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n\t                }\n\t            };\n\t        })(Matrix.prototype);\n\t        /*\\\n\t         * Snap.Matrix\n\t         [ method ]\n\t         **\n\t         * Matrix constructor, extend on your own risk.\n\t         * To create matrices use @Snap.matrix.\n\t        \\*/\n\t        Snap.Matrix = Matrix;\n\t        /*\\\n\t         * Snap.matrix\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns a matrix based on the given parameters\n\t         - a (number)\n\t         - b (number)\n\t         - c (number)\n\t         - d (number)\n\t         - e (number)\n\t         - f (number)\n\t         * or\n\t         - svgMatrix (SVGMatrix)\n\t         = (object) @Matrix\n\t        \\*/\n\t        Snap.matrix = function (a, b, c, d, e, f) {\n\t            return new Matrix(a, b, c, d, e, f);\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var has = \"hasOwnProperty\",\n\t            make = Snap._.make,\n\t            wrap = Snap._.wrap,\n\t            is = Snap.is,\n\t            getSomeDefs = Snap._.getSomeDefs,\n\t            reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n\t            $ = Snap._.$,\n\t            URL = Snap.url,\n\t            Str = String,\n\t            separator = Snap._.separator,\n\t            E = \"\";\n\t        /*\\\n\t         * Snap.deurl\n\t         [ method ]\n\t         **\n\t         * Unwraps path from `\"url(<path>)\"`.\n\t         - value (string) url path\n\t         = (string) unwrapped path\n\t        \\*/\n\t        Snap.deurl = function (value) {\n\t            var res = String(value).match(reURLValue);\n\t            return res ? res[2] : value;\n\t        };\n\t        // Attributes event handlers\n\t        eve.on(\"snap.util.attr.mask\", function (value) {\n\t            if (value instanceof Element || value instanceof Fragment) {\n\t                eve.stop();\n\t                if (value instanceof Fragment && value.node.childNodes.length == 1) {\n\t                    value = value.node.firstChild;\n\t                    getSomeDefs(this).appendChild(value);\n\t                    value = wrap(value);\n\t                }\n\t                if (value.type == \"mask\") {\n\t                    var mask = value;\n\t                } else {\n\t                    mask = make(\"mask\", getSomeDefs(this));\n\t                    mask.node.appendChild(value.node);\n\t                }\n\t                !mask.node.id && $(mask.node, {\n\t                    id: mask.id\n\t                });\n\t                $(this.node, {\n\t                    mask: URL(mask.id)\n\t                });\n\t            }\n\t        });\n\t        (function (clipIt) {\n\t            eve.on(\"snap.util.attr.clip\", clipIt);\n\t            eve.on(\"snap.util.attr.clip-path\", clipIt);\n\t            eve.on(\"snap.util.attr.clipPath\", clipIt);\n\t        })(function (value) {\n\t            if (value instanceof Element || value instanceof Fragment) {\n\t                eve.stop();\n\t                var clip,\n\t                    node = value.node;\n\t                while (node) {\n\t                    if (node.nodeName === \"clipPath\") {\n\t                        clip = new Element(node);\n\t                        break;\n\t                    }\n\t                    if (node.nodeName === \"svg\") {\n\t                        clip = undefined;\n\t                        break;\n\t                    }\n\t                    node = node.parentNode;\n\t                }\n\t                if (!clip) {\n\t                    clip = make(\"clipPath\", getSomeDefs(this));\n\t                    clip.node.appendChild(value.node);\n\t                    !clip.node.id && $(clip.node, {\n\t                        id: clip.id\n\t                    });\n\t                }\n\t                $(this.node, {\n\t                    \"clip-path\": URL(clip.node.id || clip.id)\n\t                });\n\t            }\n\t        });\n\t        function fillStroke(name) {\n\t            return function (value) {\n\t                eve.stop();\n\t                if (value instanceof Fragment && value.node.childNodes.length == 1 && (value.node.firstChild.tagName == \"radialGradient\" || value.node.firstChild.tagName == \"linearGradient\" || value.node.firstChild.tagName == \"pattern\")) {\n\t                    value = value.node.firstChild;\n\t                    getSomeDefs(this).appendChild(value);\n\t                    value = wrap(value);\n\t                }\n\t                if (value instanceof Element) {\n\t                    if (value.type == \"radialGradient\" || value.type == \"linearGradient\" || value.type == \"pattern\") {\n\t                        if (!value.node.id) {\n\t                            $(value.node, {\n\t                                id: value.id\n\t                            });\n\t                        }\n\t                        var fill = URL(value.node.id);\n\t                    } else {\n\t                        fill = value.attr(name);\n\t                    }\n\t                } else {\n\t                    fill = Snap.color(value);\n\t                    if (fill.error) {\n\t                        var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n\t                        if (grad) {\n\t                            if (!grad.node.id) {\n\t                                $(grad.node, {\n\t                                    id: grad.id\n\t                                });\n\t                            }\n\t                            fill = URL(grad.node.id);\n\t                        } else {\n\t                            fill = value;\n\t                        }\n\t                    } else {\n\t                        fill = Str(fill);\n\t                    }\n\t                }\n\t                var attrs = {};\n\t                attrs[name] = fill;\n\t                $(this.node, attrs);\n\t                this.node.style[name] = E;\n\t            };\n\t        }\n\t        eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n\t        eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n\t        var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n\t        eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n\t            string = Str(string);\n\t            var tokens = string.match(gradrg);\n\t            if (!tokens) {\n\t                return null;\n\t            }\n\t            var type = tokens[1],\n\t                params = tokens[2],\n\t                stops = tokens[3];\n\t            params = params.split(/\\s*,\\s*/).map(function (el) {\n\t                return +el == el ? +el : el;\n\t            });\n\t            if (params.length == 1 && params[0] == 0) {\n\t                params = [];\n\t            }\n\t            stops = stops.split(\"-\");\n\t            stops = stops.map(function (el) {\n\t                el = el.split(\":\");\n\t                var out = {\n\t                    color: el[0]\n\t                };\n\t                if (el[1]) {\n\t                    out.offset = parseFloat(el[1]);\n\t                }\n\t                return out;\n\t            });\n\t            var len = stops.length,\n\t                start = 0,\n\t                j = 0;\n\t            function seed(i, end) {\n\t                var step = (end - start) / (i - j);\n\t                for (var k = j; k < i; k++) {\n\t                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n\t                }\n\t                j = i;\n\t                start = end;\n\t            }\n\t            len--;\n\t            for (var i = 0; i < len; i++) {\n\t                if (\"offset\" in stops[i]) {\n\t                    seed(i, stops[i].offset);\n\t                }\n\t            }stops[len].offset = stops[len].offset || 100;\n\t            seed(len, stops[len].offset);\n\t            return {\n\t                type: type,\n\t                params: params,\n\t                stops: stops\n\t            };\n\t        });\n\t\n\t        eve.on(\"snap.util.attr.d\", function (value) {\n\t            eve.stop();\n\t            if (is(value, \"array\") && is(value[0], \"array\")) {\n\t                value = Snap.path.toString.call(value);\n\t            }\n\t            value = Str(value);\n\t            if (value.match(/[ruo]/i)) {\n\t                value = Snap.path.toAbsolute(value);\n\t            }\n\t            $(this.node, { d: value });\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.#text\", function (value) {\n\t            eve.stop();\n\t            value = Str(value);\n\t            var txt = glob.doc.createTextNode(value);\n\t            while (this.node.firstChild) {\n\t                this.node.removeChild(this.node.firstChild);\n\t            }\n\t            this.node.appendChild(txt);\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.path\", function (value) {\n\t            eve.stop();\n\t            this.attr({ d: value });\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.class\", function (value) {\n\t            eve.stop();\n\t            this.node.className.baseVal = value;\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.viewBox\", function (value) {\n\t            var vb;\n\t            if (is(value, \"object\") && \"x\" in value) {\n\t                vb = [value.x, value.y, value.width, value.height].join(\" \");\n\t            } else if (is(value, \"array\")) {\n\t                vb = value.join(\" \");\n\t            } else {\n\t                vb = value;\n\t            }\n\t            $(this.node, {\n\t                viewBox: vb\n\t            });\n\t            eve.stop();\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.transform\", function (value) {\n\t            this.transform(value);\n\t            eve.stop();\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.r\", function (value) {\n\t            if (this.type == \"rect\") {\n\t                eve.stop();\n\t                $(this.node, {\n\t                    rx: value,\n\t                    ry: value\n\t                });\n\t            }\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.textpath\", function (value) {\n\t            eve.stop();\n\t            if (this.type == \"text\") {\n\t                var id, tp, node;\n\t                if (!value && this.textPath) {\n\t                    tp = this.textPath;\n\t                    while (tp.node.firstChild) {\n\t                        this.node.appendChild(tp.node.firstChild);\n\t                    }\n\t                    tp.remove();\n\t                    delete this.textPath;\n\t                    return;\n\t                }\n\t                if (is(value, \"string\")) {\n\t                    var defs = getSomeDefs(this),\n\t                        path = wrap(defs.parentNode).path(value);\n\t                    defs.appendChild(path.node);\n\t                    id = path.id;\n\t                    path.attr({ id: id });\n\t                } else {\n\t                    value = wrap(value);\n\t                    if (value instanceof Element) {\n\t                        id = value.attr(\"id\");\n\t                        if (!id) {\n\t                            id = value.id;\n\t                            value.attr({ id: id });\n\t                        }\n\t                    }\n\t                }\n\t                if (id) {\n\t                    tp = this.textPath;\n\t                    node = this.node;\n\t                    if (tp) {\n\t                        tp.attr({ \"xlink:href\": \"#\" + id });\n\t                    } else {\n\t                        tp = $(\"textPath\", {\n\t                            \"xlink:href\": \"#\" + id\n\t                        });\n\t                        while (node.firstChild) {\n\t                            tp.appendChild(node.firstChild);\n\t                        }\n\t                        node.appendChild(tp);\n\t                        this.textPath = wrap(tp);\n\t                    }\n\t                }\n\t            }\n\t        })(-1);\n\t        eve.on(\"snap.util.attr.text\", function (value) {\n\t            if (this.type == \"text\") {\n\t                var i = 0,\n\t                    node = this.node,\n\t                    tuner = function tuner(chunk) {\n\t                    var out = $(\"tspan\");\n\t                    if (is(chunk, \"array\")) {\n\t                        for (var i = 0; i < chunk.length; i++) {\n\t                            out.appendChild(tuner(chunk[i]));\n\t                        }\n\t                    } else {\n\t                        out.appendChild(glob.doc.createTextNode(chunk));\n\t                    }\n\t                    out.normalize && out.normalize();\n\t                    return out;\n\t                };\n\t                while (node.firstChild) {\n\t                    node.removeChild(node.firstChild);\n\t                }\n\t                var tuned = tuner(value);\n\t                while (tuned.firstChild) {\n\t                    node.appendChild(tuned.firstChild);\n\t                }\n\t            }\n\t            eve.stop();\n\t        })(-1);\n\t        function setFontSize(value) {\n\t            eve.stop();\n\t            if (value == +value) {\n\t                value += \"px\";\n\t            }\n\t            this.node.style.fontSize = value;\n\t        }\n\t        eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n\t        eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\t\n\t        eve.on(\"snap.util.getattr.transform\", function () {\n\t            eve.stop();\n\t            return this.transform();\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.textpath\", function () {\n\t            eve.stop();\n\t            return this.textPath;\n\t        })(-1);\n\t        // Markers\n\t        (function () {\n\t            function getter(end) {\n\t                return function () {\n\t                    eve.stop();\n\t                    var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n\t                    if (style == \"none\") {\n\t                        return style;\n\t                    } else {\n\t                        return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n\t                    }\n\t                };\n\t            }\n\t            function setter(end) {\n\t                return function (value) {\n\t                    eve.stop();\n\t                    var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n\t                    if (value == \"\" || !value) {\n\t                        this.node.style[name] = \"none\";\n\t                        return;\n\t                    }\n\t                    if (value.type == \"marker\") {\n\t                        var id = value.node.id;\n\t                        if (!id) {\n\t                            $(value.node, { id: value.id });\n\t                        }\n\t                        this.node.style[name] = URL(id);\n\t                        return;\n\t                    }\n\t                };\n\t            }\n\t            eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n\t            eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n\t            eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n\t            eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n\t            eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n\t            eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n\t            eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n\t            eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n\t            eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n\t            eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n\t            eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n\t            eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n\t        })();\n\t        eve.on(\"snap.util.getattr.r\", function () {\n\t            if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n\t                eve.stop();\n\t                return $(this.node, \"rx\");\n\t            }\n\t        })(-1);\n\t        function textExtract(node) {\n\t            var out = [];\n\t            var children = node.childNodes;\n\t            for (var i = 0, ii = children.length; i < ii; i++) {\n\t                var chi = children[i];\n\t                if (chi.nodeType == 3) {\n\t                    out.push(chi.nodeValue);\n\t                }\n\t                if (chi.tagName == \"tspan\") {\n\t                    if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n\t                        out.push(chi.firstChild.nodeValue);\n\t                    } else {\n\t                        out.push(textExtract(chi));\n\t                    }\n\t                }\n\t            }\n\t            return out;\n\t        }\n\t        eve.on(\"snap.util.getattr.text\", function () {\n\t            if (this.type == \"text\" || this.type == \"tspan\") {\n\t                eve.stop();\n\t                var out = textExtract(this.node);\n\t                return out.length == 1 ? out[0] : out;\n\t            }\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.#text\", function () {\n\t            return this.node.textContent;\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.fill\", function (internal) {\n\t            if (internal) {\n\t                return;\n\t            }\n\t            eve.stop();\n\t            var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n\t            return Snap(Snap.deurl(value)) || value;\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.stroke\", function (internal) {\n\t            if (internal) {\n\t                return;\n\t            }\n\t            eve.stop();\n\t            var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n\t            return Snap(Snap.deurl(value)) || value;\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.viewBox\", function () {\n\t            eve.stop();\n\t            var vb = $(this.node, \"viewBox\");\n\t            if (vb) {\n\t                vb = vb.split(separator);\n\t                return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n\t            } else {\n\t                return;\n\t            }\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.points\", function () {\n\t            var p = $(this.node, \"points\");\n\t            eve.stop();\n\t            if (p) {\n\t                return p.split(separator);\n\t            } else {\n\t                return;\n\t            }\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.path\", function () {\n\t            var p = $(this.node, \"d\");\n\t            eve.stop();\n\t            return p;\n\t        })(-1);\n\t        eve.on(\"snap.util.getattr.class\", function () {\n\t            return this.node.className.baseVal;\n\t        })(-1);\n\t        function getFontSize() {\n\t            eve.stop();\n\t            return this.node.style.fontSize;\n\t        }\n\t        eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n\t        eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n\t    });\n\t\n\t    // Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var rgNotSpace = /\\S+/g,\n\t            rgBadSpace = /[\\t\\r\\n\\f]/g,\n\t            rgTrim = /(^\\s+|\\s+$)/g,\n\t            Str = String,\n\t            elproto = Element.prototype;\n\t        /*\\\n\t         * Element.addClass\n\t         [ method ]\n\t         **\n\t         * Adds given class name or list of class names to the element.\n\t         - value (string) class name or space separated list of class names\n\t         **\n\t         = (Element) original element.\n\t        \\*/\n\t        elproto.addClass = function (value) {\n\t            var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t                elem = this.node,\n\t                className = elem.className.baseVal,\n\t                curClasses = className.match(rgNotSpace) || [],\n\t                j,\n\t                pos,\n\t                clazz,\n\t                finalValue;\n\t\n\t            if (classes.length) {\n\t                j = 0;\n\t                while (clazz = classes[j++]) {\n\t                    pos = curClasses.indexOf(clazz);\n\t                    if (!~pos) {\n\t                        curClasses.push(clazz);\n\t                    }\n\t                }\n\t\n\t                finalValue = curClasses.join(\" \");\n\t                if (className != finalValue) {\n\t                    elem.className.baseVal = finalValue;\n\t                }\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.removeClass\n\t         [ method ]\n\t         **\n\t         * Removes given class name or list of class names from the element.\n\t         - value (string) class name or space separated list of class names\n\t         **\n\t         = (Element) original element.\n\t        \\*/\n\t        elproto.removeClass = function (value) {\n\t            var classes = Str(value || \"\").match(rgNotSpace) || [],\n\t                elem = this.node,\n\t                className = elem.className.baseVal,\n\t                curClasses = className.match(rgNotSpace) || [],\n\t                j,\n\t                pos,\n\t                clazz,\n\t                finalValue;\n\t            if (curClasses.length) {\n\t                j = 0;\n\t                while (clazz = classes[j++]) {\n\t                    pos = curClasses.indexOf(clazz);\n\t                    if (~pos) {\n\t                        curClasses.splice(pos, 1);\n\t                    }\n\t                }\n\t\n\t                finalValue = curClasses.join(\" \");\n\t                if (className != finalValue) {\n\t                    elem.className.baseVal = finalValue;\n\t                }\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Element.hasClass\n\t         [ method ]\n\t         **\n\t         * Checks if the element has a given class name in the list of class names applied to it.\n\t         - value (string) class name\n\t         **\n\t         = (boolean) `true` if the element has given class\n\t        \\*/\n\t        elproto.hasClass = function (value) {\n\t            var elem = this.node,\n\t                className = elem.className.baseVal,\n\t                curClasses = className.match(rgNotSpace) || [];\n\t            return !!~curClasses.indexOf(value);\n\t        };\n\t        /*\\\n\t         * Element.toggleClass\n\t         [ method ]\n\t         **\n\t         * Add or remove one or more classes from the element, depending on either\n\t         * the class’s presence or the value of the `flag` argument.\n\t         - value (string) class name or space separated list of class names\n\t         - flag (boolean) value to determine whether the class should be added or removed\n\t         **\n\t         = (Element) original element.\n\t        \\*/\n\t        elproto.toggleClass = function (value, flag) {\n\t            if (flag != null) {\n\t                if (flag) {\n\t                    return this.addClass(value);\n\t                } else {\n\t                    return this.removeClass(value);\n\t                }\n\t            }\n\t            var classes = (value || \"\").match(rgNotSpace) || [],\n\t                elem = this.node,\n\t                className = elem.className.baseVal,\n\t                curClasses = className.match(rgNotSpace) || [],\n\t                j,\n\t                pos,\n\t                clazz,\n\t                finalValue;\n\t            j = 0;\n\t            while (clazz = classes[j++]) {\n\t                pos = curClasses.indexOf(clazz);\n\t                if (~pos) {\n\t                    curClasses.splice(pos, 1);\n\t                } else {\n\t                    curClasses.push(clazz);\n\t                }\n\t            }\n\t\n\t            finalValue = curClasses.join(\" \");\n\t            if (className != finalValue) {\n\t                elem.className.baseVal = finalValue;\n\t            }\n\t            return this;\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var operators = {\n\t            \"+\": function _(x, y) {\n\t                return x + y;\n\t            },\n\t            \"-\": function _(x, y) {\n\t                return x - y;\n\t            },\n\t            \"/\": function _(x, y) {\n\t                return x / y;\n\t            },\n\t            \"*\": function _(x, y) {\n\t                return x * y;\n\t            }\n\t        },\n\t            Str = String,\n\t            reUnit = /[a-z]+$/i,\n\t            reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n\t        function getNumber(val) {\n\t            return val;\n\t        }\n\t        function getUnit(unit) {\n\t            return function (val) {\n\t                return +val.toFixed(3) + unit;\n\t            };\n\t        }\n\t        eve.on(\"snap.util.attr\", function (val) {\n\t            var plus = Str(val).match(reAddon);\n\t            if (plus) {\n\t                var evnt = eve.nt(),\n\t                    name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n\t                    a = this.attr(name),\n\t                    atr = {};\n\t                eve.stop();\n\t                var unit = plus[3] || \"\",\n\t                    aUnit = a.match(reUnit),\n\t                    op = operators[plus[1]];\n\t                if (aUnit && aUnit == unit) {\n\t                    val = op(parseFloat(a), +plus[2]);\n\t                } else {\n\t                    a = this.asPX(name);\n\t                    val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n\t                }\n\t                if (isNaN(a) || isNaN(val)) {\n\t                    return;\n\t                }\n\t                atr[name] = val;\n\t                this.attr(atr);\n\t            }\n\t        })(-10);\n\t        eve.on(\"snap.util.equal\", function (name, b) {\n\t            var A,\n\t                B,\n\t                a = Str(this.attr(name) || \"\"),\n\t                el = this,\n\t                bplus = Str(b).match(reAddon);\n\t            if (bplus) {\n\t                eve.stop();\n\t                var unit = bplus[3] || \"\",\n\t                    aUnit = a.match(reUnit),\n\t                    op = operators[bplus[1]];\n\t                if (aUnit && aUnit == unit) {\n\t                    return {\n\t                        from: parseFloat(a),\n\t                        to: op(parseFloat(a), +bplus[2]),\n\t                        f: getUnit(aUnit)\n\t                    };\n\t                } else {\n\t                    a = this.asPX(name);\n\t                    return {\n\t                        from: a,\n\t                        to: op(a, this.asPX(name, bplus[2] + unit)),\n\t                        f: getNumber\n\t                    };\n\t                }\n\t            }\n\t        })(-10);\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var proto = Paper.prototype,\n\t            is = Snap.is;\n\t        /*\\\n\t         * Paper.rect\n\t         [ method ]\n\t         *\n\t         * Draws a rectangle\n\t         **\n\t         - x (number) x coordinate of the top left corner\n\t         - y (number) y coordinate of the top left corner\n\t         - width (number) width\n\t         - height (number) height\n\t         - rx (number) #optional horizontal radius for rounded corners, default is 0\n\t         - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n\t         = (object) the `rect` element\n\t         **\n\t         > Usage\n\t         | // regular rectangle\n\t         | var c = paper.rect(10, 10, 50, 50);\n\t         | // rectangle with rounded corners\n\t         | var c = paper.rect(40, 40, 50, 50, 10);\n\t        \\*/\n\t        proto.rect = function (x, y, w, h, rx, ry) {\n\t            var attr;\n\t            if (ry == null) {\n\t                ry = rx;\n\t            }\n\t            if (is(x, \"object\") && x == \"[object Object]\") {\n\t                attr = x;\n\t            } else if (x != null) {\n\t                attr = {\n\t                    x: x,\n\t                    y: y,\n\t                    width: w,\n\t                    height: h\n\t                };\n\t                if (rx != null) {\n\t                    attr.rx = rx;\n\t                    attr.ry = ry;\n\t                }\n\t            }\n\t            return this.el(\"rect\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.circle\n\t         [ method ]\n\t         **\n\t         * Draws a circle\n\t         **\n\t         - x (number) x coordinate of the centre\n\t         - y (number) y coordinate of the centre\n\t         - r (number) radius\n\t         = (object) the `circle` element\n\t         **\n\t         > Usage\n\t         | var c = paper.circle(50, 50, 40);\n\t        \\*/\n\t        proto.circle = function (cx, cy, r) {\n\t            var attr;\n\t            if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t                attr = cx;\n\t            } else if (cx != null) {\n\t                attr = {\n\t                    cx: cx,\n\t                    cy: cy,\n\t                    r: r\n\t                };\n\t            }\n\t            return this.el(\"circle\", attr);\n\t        };\n\t\n\t        var preload = function () {\n\t            function onerror() {\n\t                this.parentNode.removeChild(this);\n\t            }\n\t            return function (src, f) {\n\t                var img = glob.doc.createElement(\"img\"),\n\t                    body = glob.doc.body;\n\t                img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n\t                img.onload = function () {\n\t                    f.call(img);\n\t                    img.onload = img.onerror = null;\n\t                    body.removeChild(img);\n\t                };\n\t                img.onerror = onerror;\n\t                body.appendChild(img);\n\t                img.src = src;\n\t            };\n\t        }();\n\t\n\t        /*\\\n\t         * Paper.image\n\t         [ method ]\n\t         **\n\t         * Places an image on the surface\n\t         **\n\t         - src (string) URI of the source image\n\t         - x (number) x offset position\n\t         - y (number) y offset position\n\t         - width (number) width of the image\n\t         - height (number) height of the image\n\t         = (object) the `image` element\n\t         * or\n\t         = (object) Snap element object with type `image`\n\t         **\n\t         > Usage\n\t         | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n\t        \\*/\n\t        proto.image = function (src, x, y, width, height) {\n\t            var el = this.el(\"image\");\n\t            if (is(src, \"object\") && \"src\" in src) {\n\t                el.attr(src);\n\t            } else if (src != null) {\n\t                var set = {\n\t                    \"xlink:href\": src,\n\t                    preserveAspectRatio: \"none\"\n\t                };\n\t                if (x != null && y != null) {\n\t                    set.x = x;\n\t                    set.y = y;\n\t                }\n\t                if (width != null && height != null) {\n\t                    set.width = width;\n\t                    set.height = height;\n\t                } else {\n\t                    preload(src, function () {\n\t                        Snap._.$(el.node, {\n\t                            width: this.offsetWidth,\n\t                            height: this.offsetHeight\n\t                        });\n\t                    });\n\t                }\n\t                Snap._.$(el.node, set);\n\t            }\n\t            return el;\n\t        };\n\t        /*\\\n\t         * Paper.ellipse\n\t         [ method ]\n\t         **\n\t         * Draws an ellipse\n\t         **\n\t         - x (number) x coordinate of the centre\n\t         - y (number) y coordinate of the centre\n\t         - rx (number) horizontal radius\n\t         - ry (number) vertical radius\n\t         = (object) the `ellipse` element\n\t         **\n\t         > Usage\n\t         | var c = paper.ellipse(50, 50, 40, 20);\n\t        \\*/\n\t        proto.ellipse = function (cx, cy, rx, ry) {\n\t            var attr;\n\t            if (is(cx, \"object\") && cx == \"[object Object]\") {\n\t                attr = cx;\n\t            } else if (cx != null) {\n\t                attr = {\n\t                    cx: cx,\n\t                    cy: cy,\n\t                    rx: rx,\n\t                    ry: ry\n\t                };\n\t            }\n\t            return this.el(\"ellipse\", attr);\n\t        };\n\t        // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n\t        /*\\\n\t         * Paper.path\n\t         [ method ]\n\t         **\n\t         * Creates a `<path>` element using the given string as the path's definition\n\t         - pathString (string) #optional path string in SVG format\n\t         * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n\t         | \"M10,20L30,40\"\n\t         * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n\t         *\n\t         # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n\t         # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n\t         # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n\t         # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n\t         # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n\t         # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n\t         # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n\t         # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n\t         # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n\t         # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n\t         # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n\t         # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n\t         # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n\t         * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n\t         * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n\t         > Usage\n\t         | var c = paper.path(\"M10 10L90 90\");\n\t         | // draw a diagonal line:\n\t         | // move to 10,10, line to 90,90\n\t        \\*/\n\t        proto.path = function (d) {\n\t            var attr;\n\t            if (is(d, \"object\") && !is(d, \"array\")) {\n\t                attr = d;\n\t            } else if (d) {\n\t                attr = { d: d };\n\t            }\n\t            return this.el(\"path\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.g\n\t         [ method ]\n\t         **\n\t         * Creates a group element\n\t         **\n\t         - varargs (…) #optional elements to nest within the group\n\t         = (object) the `g` element\n\t         **\n\t         > Usage\n\t         | var c1 = paper.circle(),\n\t         |     c2 = paper.rect(),\n\t         |     g = paper.g(c2, c1); // note that the order of elements is different\n\t         * or\n\t         | var c1 = paper.circle(),\n\t         |     c2 = paper.rect(),\n\t         |     g = paper.g();\n\t         | g.add(c2, c1);\n\t        \\*/\n\t        /*\\\n\t         * Paper.group\n\t         [ method ]\n\t         **\n\t         * See @Paper.g\n\t        \\*/\n\t        proto.group = proto.g = function (first) {\n\t            var attr,\n\t                el = this.el(\"g\");\n\t            if (arguments.length == 1 && first && !first.type) {\n\t                el.attr(first);\n\t            } else if (arguments.length) {\n\t                el.add(Array.prototype.slice.call(arguments, 0));\n\t            }\n\t            return el;\n\t        };\n\t        /*\\\n\t         * Paper.svg\n\t         [ method ]\n\t         **\n\t         * Creates a nested SVG element.\n\t         - x (number) @optional X of the element\n\t         - y (number) @optional Y of the element\n\t         - width (number) @optional width of the element\n\t         - height (number) @optional height of the element\n\t         - vbx (number) @optional viewbox X\n\t         - vby (number) @optional viewbox Y\n\t         - vbw (number) @optional viewbox width\n\t         - vbh (number) @optional viewbox height\n\t         **\n\t         = (object) the `svg` element\n\t         **\n\t        \\*/\n\t        proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n\t            var attrs = {};\n\t            if (is(x, \"object\") && y == null) {\n\t                attrs = x;\n\t            } else {\n\t                if (x != null) {\n\t                    attrs.x = x;\n\t                }\n\t                if (y != null) {\n\t                    attrs.y = y;\n\t                }\n\t                if (width != null) {\n\t                    attrs.width = width;\n\t                }\n\t                if (height != null) {\n\t                    attrs.height = height;\n\t                }\n\t                if (vbx != null && vby != null && vbw != null && vbh != null) {\n\t                    attrs.viewBox = [vbx, vby, vbw, vbh];\n\t                }\n\t            }\n\t            return this.el(\"svg\", attrs);\n\t        };\n\t        /*\\\n\t         * Paper.mask\n\t         [ method ]\n\t         **\n\t         * Equivalent in behaviour to @Paper.g, except it’s a mask.\n\t         **\n\t         = (object) the `mask` element\n\t         **\n\t        \\*/\n\t        proto.mask = function (first) {\n\t            var attr,\n\t                el = this.el(\"mask\");\n\t            if (arguments.length == 1 && first && !first.type) {\n\t                el.attr(first);\n\t            } else if (arguments.length) {\n\t                el.add(Array.prototype.slice.call(arguments, 0));\n\t            }\n\t            return el;\n\t        };\n\t        /*\\\n\t         * Paper.ptrn\n\t         [ method ]\n\t         **\n\t         * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n\t         - x (number) @optional X of the element\n\t         - y (number) @optional Y of the element\n\t         - width (number) @optional width of the element\n\t         - height (number) @optional height of the element\n\t         - vbx (number) @optional viewbox X\n\t         - vby (number) @optional viewbox Y\n\t         - vbw (number) @optional viewbox width\n\t         - vbh (number) @optional viewbox height\n\t         **\n\t         = (object) the `pattern` element\n\t         **\n\t        \\*/\n\t        proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n\t            if (is(x, \"object\")) {\n\t                var attr = x;\n\t            } else {\n\t                attr = { patternUnits: \"userSpaceOnUse\" };\n\t                if (x) {\n\t                    attr.x = x;\n\t                }\n\t                if (y) {\n\t                    attr.y = y;\n\t                }\n\t                if (width != null) {\n\t                    attr.width = width;\n\t                }\n\t                if (height != null) {\n\t                    attr.height = height;\n\t                }\n\t                if (vx != null && vy != null && vw != null && vh != null) {\n\t                    attr.viewBox = [vx, vy, vw, vh];\n\t                } else {\n\t                    attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n\t                }\n\t            }\n\t            return this.el(\"pattern\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.use\n\t         [ method ]\n\t         **\n\t         * Creates a <use> element.\n\t         - id (string) @optional id of element to link\n\t         * or\n\t         - id (Element) @optional element to link\n\t         **\n\t         = (object) the `use` element\n\t         **\n\t        \\*/\n\t        proto.use = function (id) {\n\t            if (id != null) {\n\t                if (id instanceof Element) {\n\t                    if (!id.attr(\"id\")) {\n\t                        id.attr({ id: Snap._.id(id) });\n\t                    }\n\t                    id = id.attr(\"id\");\n\t                }\n\t                if (String(id).charAt() == \"#\") {\n\t                    id = id.substring(1);\n\t                }\n\t                return this.el(\"use\", { \"xlink:href\": \"#\" + id });\n\t            } else {\n\t                return Element.prototype.use.call(this);\n\t            }\n\t        };\n\t        /*\\\n\t         * Paper.symbol\n\t         [ method ]\n\t         **\n\t         * Creates a <symbol> element.\n\t         - vbx (number) @optional viewbox X\n\t         - vby (number) @optional viewbox Y\n\t         - vbw (number) @optional viewbox width\n\t         - vbh (number) @optional viewbox height\n\t         = (object) the `symbol` element\n\t         **\n\t        \\*/\n\t        proto.symbol = function (vx, vy, vw, vh) {\n\t            var attr = {};\n\t            if (vx != null && vy != null && vw != null && vh != null) {\n\t                attr.viewBox = [vx, vy, vw, vh];\n\t            }\n\t\n\t            return this.el(\"symbol\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.text\n\t         [ method ]\n\t         **\n\t         * Draws a text string\n\t         **\n\t         - x (number) x coordinate position\n\t         - y (number) y coordinate position\n\t         - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n\t         = (object) the `text` element\n\t         **\n\t         > Usage\n\t         | var t1 = paper.text(50, 50, \"Snap\");\n\t         | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n\t         | // Text path usage\n\t         | t1.attr({textpath: \"M10,10L100,100\"});\n\t         | // or\n\t         | var pth = paper.path(\"M10,10L100,100\");\n\t         | t1.attr({textpath: pth});\n\t        \\*/\n\t        proto.text = function (x, y, text) {\n\t            var attr = {};\n\t            if (is(x, \"object\")) {\n\t                attr = x;\n\t            } else if (x != null) {\n\t                attr = {\n\t                    x: x,\n\t                    y: y,\n\t                    text: text || \"\"\n\t                };\n\t            }\n\t            return this.el(\"text\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.line\n\t         [ method ]\n\t         **\n\t         * Draws a line\n\t         **\n\t         - x1 (number) x coordinate position of the start\n\t         - y1 (number) y coordinate position of the start\n\t         - x2 (number) x coordinate position of the end\n\t         - y2 (number) y coordinate position of the end\n\t         = (object) the `line` element\n\t         **\n\t         > Usage\n\t         | var t1 = paper.line(50, 50, 100, 100);\n\t        \\*/\n\t        proto.line = function (x1, y1, x2, y2) {\n\t            var attr = {};\n\t            if (is(x1, \"object\")) {\n\t                attr = x1;\n\t            } else if (x1 != null) {\n\t                attr = {\n\t                    x1: x1,\n\t                    x2: x2,\n\t                    y1: y1,\n\t                    y2: y2\n\t                };\n\t            }\n\t            return this.el(\"line\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.polyline\n\t         [ method ]\n\t         **\n\t         * Draws a polyline\n\t         **\n\t         - points (array) array of points\n\t         * or\n\t         - varargs (…) points\n\t         = (object) the `polyline` element\n\t         **\n\t         > Usage\n\t         | var p1 = paper.polyline([10, 10, 100, 100]);\n\t         | var p2 = paper.polyline(10, 10, 100, 100);\n\t        \\*/\n\t        proto.polyline = function (points) {\n\t            if (arguments.length > 1) {\n\t                points = Array.prototype.slice.call(arguments, 0);\n\t            }\n\t            var attr = {};\n\t            if (is(points, \"object\") && !is(points, \"array\")) {\n\t                attr = points;\n\t            } else if (points != null) {\n\t                attr = { points: points };\n\t            }\n\t            return this.el(\"polyline\", attr);\n\t        };\n\t        /*\\\n\t         * Paper.polygon\n\t         [ method ]\n\t         **\n\t         * Draws a polygon. See @Paper.polyline\n\t        \\*/\n\t        proto.polygon = function (points) {\n\t            if (arguments.length > 1) {\n\t                points = Array.prototype.slice.call(arguments, 0);\n\t            }\n\t            var attr = {};\n\t            if (is(points, \"object\") && !is(points, \"array\")) {\n\t                attr = points;\n\t            } else if (points != null) {\n\t                attr = { points: points };\n\t            }\n\t            return this.el(\"polygon\", attr);\n\t        };\n\t        // gradients\n\t        (function () {\n\t            var $ = Snap._.$;\n\t            // gradients' helpers\n\t            /*\\\n\t             * Element.stops\n\t             [ method ]\n\t             **\n\t             * Only for gradients!\n\t             * Returns array of gradient stops elements.\n\t             = (array) the stops array.\n\t            \\*/\n\t            function Gstops() {\n\t                return this.selectAll(\"stop\");\n\t            }\n\t            /*\\\n\t             * Element.addStop\n\t             [ method ]\n\t             **\n\t             * Only for gradients!\n\t             * Adds another stop to the gradient.\n\t             - color (string) stops color\n\t             - offset (number) stops offset 0..100\n\t             = (object) gradient element\n\t            \\*/\n\t            function GaddStop(color, offset) {\n\t                var stop = $(\"stop\"),\n\t                    attr = {\n\t                    offset: +offset + \"%\"\n\t                };\n\t                color = Snap.color(color);\n\t                attr[\"stop-color\"] = color.hex;\n\t                if (color.opacity < 1) {\n\t                    attr[\"stop-opacity\"] = color.opacity;\n\t                }\n\t                $(stop, attr);\n\t                var stops = this.stops(),\n\t                    inserted;\n\t                for (var i = 0; i < stops.length; i++) {\n\t                    var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n\t                    if (stopOffset > offset) {\n\t                        this.node.insertBefore(stop, stops[i].node);\n\t                        inserted = true;\n\t                        break;\n\t                    }\n\t                }\n\t                if (!inserted) {\n\t                    this.node.appendChild(stop);\n\t                }\n\t                return this;\n\t            }\n\t            function GgetBBox() {\n\t                if (this.type == \"linearGradient\") {\n\t                    var x1 = $(this.node, \"x1\") || 0,\n\t                        x2 = $(this.node, \"x2\") || 1,\n\t                        y1 = $(this.node, \"y1\") || 0,\n\t                        y2 = $(this.node, \"y2\") || 0;\n\t                    return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n\t                } else {\n\t                    var cx = this.node.cx || .5,\n\t                        cy = this.node.cy || .5,\n\t                        r = this.node.r || 0;\n\t                    return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n\t                }\n\t            }\n\t            /*\\\n\t             * Element.setStops\n\t             [ method ]\n\t             **\n\t             * Only for gradients!\n\t             * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n\t             - str (string) gradient descriptor part after `()`.\n\t             = (object) gradient element\n\t             | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n\t             | g.setStops(\"#fff-#000-#f00-#fc0\");\n\t            \\*/\n\t            function GsetStops(str) {\n\t                var grad = str,\n\t                    stops = this.stops();\n\t                if (typeof str == \"string\") {\n\t                    grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n\t                }\n\t                if (!Snap.is(grad, \"array\")) {\n\t                    return;\n\t                }\n\t                for (var i = 0; i < stops.length; i++) {\n\t                    if (grad[i]) {\n\t                        var color = Snap.color(grad[i].color),\n\t                            attr = { \"offset\": grad[i].offset + \"%\" };\n\t                        attr[\"stop-color\"] = color.hex;\n\t                        if (color.opacity < 1) {\n\t                            attr[\"stop-opacity\"] = color.opacity;\n\t                        }\n\t                        stops[i].attr(attr);\n\t                    } else {\n\t                        stops[i].remove();\n\t                    }\n\t                }\n\t                for (i = stops.length; i < grad.length; i++) {\n\t                    this.addStop(grad[i].color, grad[i].offset);\n\t                }\n\t                return this;\n\t            }\n\t            function gradient(defs, str) {\n\t                var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n\t                    el;\n\t                if (!grad) {\n\t                    return null;\n\t                }\n\t                grad.params.unshift(defs);\n\t                if (grad.type.toLowerCase() == \"l\") {\n\t                    el = gradientLinear.apply(0, grad.params);\n\t                } else {\n\t                    el = gradientRadial.apply(0, grad.params);\n\t                }\n\t                if (grad.type != grad.type.toLowerCase()) {\n\t                    $(el.node, {\n\t                        gradientUnits: \"userSpaceOnUse\"\n\t                    });\n\t                }\n\t                var stops = grad.stops,\n\t                    len = stops.length;\n\t                for (var i = 0; i < len; i++) {\n\t                    var stop = stops[i];\n\t                    el.addStop(stop.color, stop.offset);\n\t                }\n\t                return el;\n\t            }\n\t            function gradientLinear(defs, x1, y1, x2, y2) {\n\t                var el = Snap._.make(\"linearGradient\", defs);\n\t                el.stops = Gstops;\n\t                el.addStop = GaddStop;\n\t                el.getBBox = GgetBBox;\n\t                el.setStops = GsetStops;\n\t                if (x1 != null) {\n\t                    $(el.node, {\n\t                        x1: x1,\n\t                        y1: y1,\n\t                        x2: x2,\n\t                        y2: y2\n\t                    });\n\t                }\n\t                return el;\n\t            }\n\t            function gradientRadial(defs, cx, cy, r, fx, fy) {\n\t                var el = Snap._.make(\"radialGradient\", defs);\n\t                el.stops = Gstops;\n\t                el.addStop = GaddStop;\n\t                el.getBBox = GgetBBox;\n\t                if (cx != null) {\n\t                    $(el.node, {\n\t                        cx: cx,\n\t                        cy: cy,\n\t                        r: r\n\t                    });\n\t                }\n\t                if (fx != null && fy != null) {\n\t                    $(el.node, {\n\t                        fx: fx,\n\t                        fy: fy\n\t                    });\n\t                }\n\t                return el;\n\t            }\n\t            /*\\\n\t             * Paper.gradient\n\t             [ method ]\n\t             **\n\t             * Creates a gradient element\n\t             **\n\t             - gradient (string) gradient descriptor\n\t             > Gradient Descriptor\n\t             * The gradient descriptor is an expression formatted as\n\t             * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n\t             * either linear or radial.  The uppercase `L` or `R` letters\n\t             * indicate absolute coordinates offset from the SVG surface.\n\t             * Lowercase `l` or `r` letters indicate coordinates\n\t             * calculated relative to the element to which the gradient is\n\t             * applied.  Coordinates specify a linear gradient vector as\n\t             * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n\t             * `r` and optional `fx`, `fy` specifying a focal point away\n\t             * from the center of the circle. Specify `<colors>` as a list\n\t             * of dash-separated CSS color values.  Each color may be\n\t             * followed by a custom offset value, separated with a colon\n\t             * character.\n\t             > Examples\n\t             * Linear gradient, relative from top-left corner to bottom-right\n\t             * corner, from black through red to white:\n\t             | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n\t             * Linear gradient, absolute from (0, 0) to (100, 100), from black\n\t             * through red at 25% to white:\n\t             | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n\t             * Radial gradient, relative from the center of the element with radius\n\t             * half the width, from black to white:\n\t             | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n\t             * To apply the gradient:\n\t             | paper.circle(50, 50, 40).attr({\n\t             |     fill: g\n\t             | });\n\t             = (object) the `gradient` element\n\t            \\*/\n\t            proto.gradient = function (str) {\n\t                return gradient(this.defs, str);\n\t            };\n\t            proto.gradientLinear = function (x1, y1, x2, y2) {\n\t                return gradientLinear(this.defs, x1, y1, x2, y2);\n\t            };\n\t            proto.gradientRadial = function (cx, cy, r, fx, fy) {\n\t                return gradientRadial(this.defs, cx, cy, r, fx, fy);\n\t            };\n\t            /*\\\n\t             * Paper.toString\n\t             [ method ]\n\t             **\n\t             * Returns SVG code for the @Paper\n\t             = (string) SVG code for the @Paper\n\t            \\*/\n\t            proto.toString = function () {\n\t                var doc = this.node.ownerDocument,\n\t                    f = doc.createDocumentFragment(),\n\t                    d = doc.createElement(\"div\"),\n\t                    svg = this.node.cloneNode(true),\n\t                    res;\n\t                f.appendChild(d);\n\t                d.appendChild(svg);\n\t                Snap._.$(svg, { xmlns: \"http://www.w3.org/2000/svg\" });\n\t                res = d.innerHTML;\n\t                f.removeChild(f.firstChild);\n\t                return res;\n\t            };\n\t            /*\\\n\t             * Paper.toDataURL\n\t             [ method ]\n\t             **\n\t             * Returns SVG code for the @Paper as Data URI string.\n\t             = (string) Data URI string\n\t            \\*/\n\t            proto.toDataURL = function () {\n\t                if (window && window.btoa) {\n\t                    return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n\t                }\n\t            };\n\t            /*\\\n\t             * Paper.clear\n\t             [ method ]\n\t             **\n\t             * Removes all child nodes of the paper, except <defs>.\n\t            \\*/\n\t            proto.clear = function () {\n\t                var node = this.node.firstChild,\n\t                    next;\n\t                while (node) {\n\t                    next = node.nextSibling;\n\t                    if (node.tagName != \"defs\") {\n\t                        node.parentNode.removeChild(node);\n\t                    } else {\n\t                        proto.clear.call({ node: node });\n\t                    }\n\t                    node = next;\n\t                }\n\t            };\n\t        })();\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        var elproto = Element.prototype,\n\t            is = Snap.is,\n\t            clone = Snap._.clone,\n\t            has = \"hasOwnProperty\",\n\t            p2s = /,?([a-z]),?/gi,\n\t            toFloat = parseFloat,\n\t            math = Math,\n\t            PI = math.PI,\n\t            mmin = math.min,\n\t            mmax = math.max,\n\t            pow = math.pow,\n\t            abs = math.abs;\n\t        function paths(ps) {\n\t            var p = paths.ps = paths.ps || {};\n\t            if (p[ps]) {\n\t                p[ps].sleep = 100;\n\t            } else {\n\t                p[ps] = {\n\t                    sleep: 100\n\t                };\n\t            }\n\t            setTimeout(function () {\n\t                for (var key in p) {\n\t                    if (p[has](key) && key != ps) {\n\t                        p[key].sleep--;\n\t                        !p[key].sleep && delete p[key];\n\t                    }\n\t                }\n\t            });\n\t            return p[ps];\n\t        }\n\t        function box(x, y, width, height) {\n\t            if (x == null) {\n\t                x = y = width = height = 0;\n\t            }\n\t            if (y == null) {\n\t                y = x.y;\n\t                width = x.width;\n\t                height = x.height;\n\t                x = x.x;\n\t            }\n\t            return {\n\t                x: x,\n\t                y: y,\n\t                width: width,\n\t                w: width,\n\t                height: height,\n\t                h: height,\n\t                x2: x + width,\n\t                y2: y + height,\n\t                cx: x + width / 2,\n\t                cy: y + height / 2,\n\t                r1: math.min(width, height) / 2,\n\t                r2: math.max(width, height) / 2,\n\t                r0: math.sqrt(width * width + height * height) / 2,\n\t                path: rectPath(x, y, width, height),\n\t                vb: [x, y, width, height].join(\" \")\n\t            };\n\t        }\n\t        function toString() {\n\t            return this.join(\",\").replace(p2s, \"$1\");\n\t        }\n\t        function pathClone(pathArray) {\n\t            var res = clone(pathArray);\n\t            res.toString = toString;\n\t            return res;\n\t        }\n\t        function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n\t            if (length == null) {\n\t                return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n\t            } else {\n\t                return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n\t            }\n\t        }\n\t        function getLengthFactory(istotal, subpath) {\n\t            function O(val) {\n\t                return +(+val).toFixed(3);\n\t            }\n\t            return Snap._.cacher(function (path, length, onlystart) {\n\t                if (path instanceof Element) {\n\t                    path = path.attr(\"d\");\n\t                }\n\t                path = path2curve(path);\n\t                var x,\n\t                    y,\n\t                    p,\n\t                    l,\n\t                    sp = \"\",\n\t                    subpaths = {},\n\t                    point,\n\t                    len = 0;\n\t                for (var i = 0, ii = path.length; i < ii; i++) {\n\t                    p = path[i];\n\t                    if (p[0] == \"M\") {\n\t                        x = +p[1];\n\t                        y = +p[2];\n\t                    } else {\n\t                        l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                        if (len + l > length) {\n\t                            if (subpath && !subpaths.start) {\n\t                                point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                                sp += [\"C\" + O(point.start.x), O(point.start.y), O(point.m.x), O(point.m.y), O(point.x), O(point.y)];\n\t                                if (onlystart) {\n\t                                    return sp;\n\t                                }\n\t                                subpaths.start = sp;\n\t                                sp = [\"M\" + O(point.x), O(point.y) + \"C\" + O(point.n.x), O(point.n.y), O(point.end.x), O(point.end.y), O(p[5]), O(p[6])].join();\n\t                                len += l;\n\t                                x = +p[5];\n\t                                y = +p[6];\n\t                                continue;\n\t                            }\n\t                            if (!istotal && !subpath) {\n\t                                point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n\t                                return point;\n\t                            }\n\t                        }\n\t                        len += l;\n\t                        x = +p[5];\n\t                        y = +p[6];\n\t                    }\n\t                    sp += p.shift() + p;\n\t                }\n\t                subpaths.end = sp;\n\t                point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n\t                return point;\n\t            }, null, Snap._.clone);\n\t        }\n\t        var getTotalLength = getLengthFactory(1),\n\t            getPointAtLength = getLengthFactory(),\n\t            getSubpathsAtLength = getLengthFactory(0, 1);\n\t        function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t,\n\t                t13 = pow(t1, 3),\n\t                t12 = pow(t1, 2),\n\t                t2 = t * t,\n\t                t3 = t2 * t,\n\t                x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n\t                y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n\t                mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n\t                my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n\t                nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n\t                ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n\t                ax = t1 * p1x + t * c1x,\n\t                ay = t1 * p1y + t * c1y,\n\t                cx = t1 * c2x + t * p2x,\n\t                cy = t1 * c2y + t * p2y,\n\t                alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n\t            // (mx > nx || my < ny) && (alpha += 180);\n\t            return {\n\t                x: x,\n\t                y: y,\n\t                m: { x: mx, y: my },\n\t                n: { x: nx, y: ny },\n\t                start: { x: ax, y: ay },\n\t                end: { x: cx, y: cy },\n\t                alpha: alpha\n\t            };\n\t        }\n\t        function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n\t            if (!Snap.is(p1x, \"array\")) {\n\t                p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n\t            }\n\t            var bbox = curveDim.apply(null, p1x);\n\t            return box(bbox.min.x, bbox.min.y, bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y);\n\t        }\n\t        function isPointInsideBBox(bbox, x, y) {\n\t            return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;\n\t        }\n\t        function isBBoxIntersect(bbox1, bbox2) {\n\t            bbox1 = box(bbox1);\n\t            bbox2 = box(bbox2);\n\t            return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n\t        }\n\t        function base3(t, p1, p2, p3, p4) {\n\t            var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n\t                t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n\t            return t * t2 - 3 * p1 + 3 * p2;\n\t        }\n\t        function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n\t            if (z == null) {\n\t                z = 1;\n\t            }\n\t            z = z > 1 ? 1 : z < 0 ? 0 : z;\n\t            var z2 = z / 2,\n\t                n = 12,\n\t                Tvalues = [-.1252, .1252, -.3678, .3678, -.5873, .5873, -.7699, .7699, -.9041, .9041, -.9816, .9816],\n\t                Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472],\n\t                sum = 0;\n\t            for (var i = 0; i < n; i++) {\n\t                var ct = z2 * Tvalues[i] + z2,\n\t                    xbase = base3(ct, x1, x2, x3, x4),\n\t                    ybase = base3(ct, y1, y2, y3, y4),\n\t                    comb = xbase * xbase + ybase * ybase;\n\t                sum += Cvalues[i] * math.sqrt(comb);\n\t            }\n\t            return z2 * sum;\n\t        }\n\t        function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n\t            if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n\t                return;\n\t            }\n\t            var t = 1,\n\t                step = t / 2,\n\t                t2 = t - step,\n\t                l,\n\t                e = .01;\n\t            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t            while (abs(l - ll) > e) {\n\t                step /= 2;\n\t                t2 += (l < ll ? 1 : -1) * step;\n\t                l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n\t            }\n\t            return t2;\n\t        }\n\t        function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n\t            if (mmax(x1, x2) < mmin(x3, x4) || mmin(x1, x2) > mmax(x3, x4) || mmax(y1, y2) < mmin(y3, y4) || mmin(y1, y2) > mmax(y3, y4)) {\n\t                return;\n\t            }\n\t            var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n\t                ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n\t                denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\t\n\t            if (!denominator) {\n\t                return;\n\t            }\n\t            var px = nx / denominator,\n\t                py = ny / denominator,\n\t                px2 = +px.toFixed(2),\n\t                py2 = +py.toFixed(2);\n\t            if (px2 < +mmin(x1, x2).toFixed(2) || px2 > +mmax(x1, x2).toFixed(2) || px2 < +mmin(x3, x4).toFixed(2) || px2 > +mmax(x3, x4).toFixed(2) || py2 < +mmin(y1, y2).toFixed(2) || py2 > +mmax(y1, y2).toFixed(2) || py2 < +mmin(y3, y4).toFixed(2) || py2 > +mmax(y3, y4).toFixed(2)) {\n\t                return;\n\t            }\n\t            return { x: px, y: py };\n\t        }\n\t        function inter(bez1, bez2) {\n\t            return interHelper(bez1, bez2);\n\t        }\n\t        function interCount(bez1, bez2) {\n\t            return interHelper(bez1, bez2, 1);\n\t        }\n\t        function interHelper(bez1, bez2, justCount) {\n\t            var bbox1 = bezierBBox(bez1),\n\t                bbox2 = bezierBBox(bez2);\n\t            if (!isBBoxIntersect(bbox1, bbox2)) {\n\t                return justCount ? 0 : [];\n\t            }\n\t            var l1 = bezlen.apply(0, bez1),\n\t                l2 = bezlen.apply(0, bez2),\n\t                n1 = ~~(l1 / 8),\n\t                n2 = ~~(l2 / 8),\n\t                dots1 = [],\n\t                dots2 = [],\n\t                xy = {},\n\t                res = justCount ? 0 : [];\n\t            for (var i = 0; i < n1 + 1; i++) {\n\t                var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n\t                dots1.push({ x: p.x, y: p.y, t: i / n1 });\n\t            }\n\t            for (i = 0; i < n2 + 1; i++) {\n\t                p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n\t                dots2.push({ x: p.x, y: p.y, t: i / n2 });\n\t            }\n\t            for (i = 0; i < n1; i++) {\n\t                for (var j = 0; j < n2; j++) {\n\t                    var di = dots1[i],\n\t                        di1 = dots1[i + 1],\n\t                        dj = dots2[j],\n\t                        dj1 = dots2[j + 1],\n\t                        ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n\t                        cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n\t                        is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n\t                    if (is) {\n\t                        if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n\t                            continue;\n\t                        }\n\t                        xy[is.x.toFixed(4)] = is.y.toFixed(4);\n\t                        var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n\t                            t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n\t                        if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n\t                            if (justCount) {\n\t                                res++;\n\t                            } else {\n\t                                res.push({\n\t                                    x: is.x,\n\t                                    y: is.y,\n\t                                    t1: t1,\n\t                                    t2: t2\n\t                                });\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return res;\n\t        }\n\t        function pathIntersection(path1, path2) {\n\t            return interPathHelper(path1, path2);\n\t        }\n\t        function pathIntersectionNumber(path1, path2) {\n\t            return interPathHelper(path1, path2, 1);\n\t        }\n\t        function interPathHelper(path1, path2, justCount) {\n\t            path1 = path2curve(path1);\n\t            path2 = path2curve(path2);\n\t            var x1,\n\t                y1,\n\t                x2,\n\t                y2,\n\t                x1m,\n\t                y1m,\n\t                x2m,\n\t                y2m,\n\t                bez1,\n\t                bez2,\n\t                res = justCount ? 0 : [];\n\t            for (var i = 0, ii = path1.length; i < ii; i++) {\n\t                var pi = path1[i];\n\t                if (pi[0] == \"M\") {\n\t                    x1 = x1m = pi[1];\n\t                    y1 = y1m = pi[2];\n\t                } else {\n\t                    if (pi[0] == \"C\") {\n\t                        bez1 = [x1, y1].concat(pi.slice(1));\n\t                        x1 = bez1[6];\n\t                        y1 = bez1[7];\n\t                    } else {\n\t                        bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n\t                        x1 = x1m;\n\t                        y1 = y1m;\n\t                    }\n\t                    for (var j = 0, jj = path2.length; j < jj; j++) {\n\t                        var pj = path2[j];\n\t                        if (pj[0] == \"M\") {\n\t                            x2 = x2m = pj[1];\n\t                            y2 = y2m = pj[2];\n\t                        } else {\n\t                            if (pj[0] == \"C\") {\n\t                                bez2 = [x2, y2].concat(pj.slice(1));\n\t                                x2 = bez2[6];\n\t                                y2 = bez2[7];\n\t                            } else {\n\t                                bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n\t                                x2 = x2m;\n\t                                y2 = y2m;\n\t                            }\n\t                            var intr = interHelper(bez1, bez2, justCount);\n\t                            if (justCount) {\n\t                                res += intr;\n\t                            } else {\n\t                                for (var k = 0, kk = intr.length; k < kk; k++) {\n\t                                    intr[k].segment1 = i;\n\t                                    intr[k].segment2 = j;\n\t                                    intr[k].bez1 = bez1;\n\t                                    intr[k].bez2 = bez2;\n\t                                }\n\t                                res = res.concat(intr);\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return res;\n\t        }\n\t        function isPointInsidePath(path, x, y) {\n\t            var bbox = pathBBox(path);\n\t            return isPointInsideBBox(bbox, x, y) && interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n\t        }\n\t        function pathBBox(path) {\n\t            var pth = paths(path);\n\t            if (pth.bbox) {\n\t                return clone(pth.bbox);\n\t            }\n\t            if (!path) {\n\t                return box();\n\t            }\n\t            path = path2curve(path);\n\t            var x = 0,\n\t                y = 0,\n\t                X = [],\n\t                Y = [],\n\t                p;\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                p = path[i];\n\t                if (p[0] == \"M\") {\n\t                    x = p[1];\n\t                    y = p[2];\n\t                    X.push(x);\n\t                    Y.push(y);\n\t                } else {\n\t                    var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n\t                    X = X.concat(dim.min.x, dim.max.x);\n\t                    Y = Y.concat(dim.min.y, dim.max.y);\n\t                    x = p[5];\n\t                    y = p[6];\n\t                }\n\t            }\n\t            var xmin = mmin.apply(0, X),\n\t                ymin = mmin.apply(0, Y),\n\t                xmax = mmax.apply(0, X),\n\t                ymax = mmax.apply(0, Y),\n\t                bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n\t            pth.bbox = clone(bb);\n\t            return bb;\n\t        }\n\t        function rectPath(x, y, w, h, r) {\n\t            if (r) {\n\t                return [[\"M\", +x + +r, y], [\"l\", w - r * 2, 0], [\"a\", r, r, 0, 0, 1, r, r], [\"l\", 0, h - r * 2], [\"a\", r, r, 0, 0, 1, -r, r], [\"l\", r * 2 - w, 0], [\"a\", r, r, 0, 0, 1, -r, -r], [\"l\", 0, r * 2 - h], [\"a\", r, r, 0, 0, 1, r, -r], [\"z\"]];\n\t            }\n\t            var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n\t            res.toString = toString;\n\t            return res;\n\t        }\n\t        function ellipsePath(x, y, rx, ry, a) {\n\t            if (a == null && ry == null) {\n\t                ry = rx;\n\t            }\n\t            x = +x;\n\t            y = +y;\n\t            rx = +rx;\n\t            ry = +ry;\n\t            if (a != null) {\n\t                var rad = Math.PI / 180,\n\t                    x1 = x + rx * Math.cos(-ry * rad),\n\t                    x2 = x + rx * Math.cos(-a * rad),\n\t                    y1 = y + rx * Math.sin(-ry * rad),\n\t                    y2 = y + rx * Math.sin(-a * rad),\n\t                    res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n\t            } else {\n\t                res = [[\"M\", x, y], [\"m\", 0, -ry], [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry], [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry], [\"z\"]];\n\t            }\n\t            res.toString = toString;\n\t            return res;\n\t        }\n\t        var unit2px = Snap._unit2px,\n\t            getPath = {\n\t            path: function path(el) {\n\t                return el.attr(\"path\");\n\t            },\n\t            circle: function circle(el) {\n\t                var attr = unit2px(el);\n\t                return ellipsePath(attr.cx, attr.cy, attr.r);\n\t            },\n\t            ellipse: function ellipse(el) {\n\t                var attr = unit2px(el);\n\t                return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n\t            },\n\t            rect: function rect(el) {\n\t                var attr = unit2px(el);\n\t                return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n\t            },\n\t            image: function image(el) {\n\t                var attr = unit2px(el);\n\t                return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n\t            },\n\t            line: function line(el) {\n\t                return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n\t            },\n\t            polyline: function polyline(el) {\n\t                return \"M\" + el.attr(\"points\");\n\t            },\n\t            polygon: function polygon(el) {\n\t                return \"M\" + el.attr(\"points\") + \"z\";\n\t            },\n\t            deflt: function deflt(el) {\n\t                var bbox = el.node.getBBox();\n\t                return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n\t            }\n\t        };\n\t        function pathToRelative(pathArray) {\n\t            var pth = paths(pathArray),\n\t                lowerCase = String.prototype.toLowerCase;\n\t            if (pth.rel) {\n\t                return pathClone(pth.rel);\n\t            }\n\t            if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n\t                pathArray = Snap.parsePathString(pathArray);\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = pathArray[0][1];\n\t                y = pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res.push([\"M\", x, y]);\n\t            }\n\t            for (var i = start, ii = pathArray.length; i < ii; i++) {\n\t                var r = res[i] = [],\n\t                    pa = pathArray[i];\n\t                if (pa[0] != lowerCase.call(pa[0])) {\n\t                    r[0] = lowerCase.call(pa[0]);\n\t                    switch (r[0]) {\n\t                        case \"a\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +(pa[6] - x).toFixed(3);\n\t                            r[7] = +(pa[7] - y).toFixed(3);\n\t                            break;\n\t                        case \"v\":\n\t                            r[1] = +(pa[1] - y).toFixed(3);\n\t                            break;\n\t                        case \"m\":\n\t                            mx = pa[1];\n\t                            my = pa[2];\n\t                        default:\n\t                            for (var j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n\t                            }\n\t                    }\n\t                } else {\n\t                    r = res[i] = [];\n\t                    if (pa[0] == \"m\") {\n\t                        mx = pa[1] + x;\n\t                        my = pa[2] + y;\n\t                    }\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        res[i][k] = pa[k];\n\t                    }\n\t                }\n\t                var len = res[i].length;\n\t                switch (res[i][0]) {\n\t                    case \"z\":\n\t                        x = mx;\n\t                        y = my;\n\t                        break;\n\t                    case \"h\":\n\t                        x += +res[i][len - 1];\n\t                        break;\n\t                    case \"v\":\n\t                        y += +res[i][len - 1];\n\t                        break;\n\t                    default:\n\t                        x += +res[i][len - 2];\n\t                        y += +res[i][len - 1];\n\t                }\n\t            }\n\t            res.toString = toString;\n\t            pth.rel = pathClone(res);\n\t            return res;\n\t        }\n\t        function pathToAbsolute(pathArray) {\n\t            var pth = paths(pathArray);\n\t            if (pth.abs) {\n\t                return pathClone(pth.abs);\n\t            }\n\t            if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) {\n\t                // rough assumption\n\t                pathArray = Snap.parsePathString(pathArray);\n\t            }\n\t            if (!pathArray || !pathArray.length) {\n\t                return [[\"M\", 0, 0]];\n\t            }\n\t            var res = [],\n\t                x = 0,\n\t                y = 0,\n\t                mx = 0,\n\t                my = 0,\n\t                start = 0,\n\t                pa0;\n\t            if (pathArray[0][0] == \"M\") {\n\t                x = +pathArray[0][1];\n\t                y = +pathArray[0][2];\n\t                mx = x;\n\t                my = y;\n\t                start++;\n\t                res[0] = [\"M\", x, y];\n\t            }\n\t            var crz = pathArray.length == 3 && pathArray[0][0] == \"M\" && pathArray[1][0].toUpperCase() == \"R\" && pathArray[2][0].toUpperCase() == \"Z\";\n\t            for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n\t                res.push(r = []);\n\t                pa = pathArray[i];\n\t                pa0 = pa[0];\n\t                if (pa0 != pa0.toUpperCase()) {\n\t                    r[0] = pa0.toUpperCase();\n\t                    switch (r[0]) {\n\t                        case \"A\":\n\t                            r[1] = pa[1];\n\t                            r[2] = pa[2];\n\t                            r[3] = pa[3];\n\t                            r[4] = pa[4];\n\t                            r[5] = pa[5];\n\t                            r[6] = +pa[6] + x;\n\t                            r[7] = +pa[7] + y;\n\t                            break;\n\t                        case \"V\":\n\t                            r[1] = +pa[1] + y;\n\t                            break;\n\t                        case \"H\":\n\t                            r[1] = +pa[1] + x;\n\t                            break;\n\t                        case \"R\":\n\t                            var dots = [x, y].concat(pa.slice(1));\n\t                            for (var j = 2, jj = dots.length; j < jj; j++) {\n\t                                dots[j] = +dots[j] + x;\n\t                                dots[++j] = +dots[j] + y;\n\t                            }\n\t                            res.pop();\n\t                            res = res.concat(catmullRom2bezier(dots, crz));\n\t                            break;\n\t                        case \"O\":\n\t                            res.pop();\n\t                            dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                            dots.push(dots[0]);\n\t                            res = res.concat(dots);\n\t                            break;\n\t                        case \"U\":\n\t                            res.pop();\n\t                            res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                            r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t                            break;\n\t                        case \"M\":\n\t                            mx = +pa[1] + x;\n\t                            my = +pa[2] + y;\n\t                        default:\n\t                            for (j = 1, jj = pa.length; j < jj; j++) {\n\t                                r[j] = +pa[j] + (j % 2 ? x : y);\n\t                            }\n\t                    }\n\t                } else if (pa0 == \"R\") {\n\t                    dots = [x, y].concat(pa.slice(1));\n\t                    res.pop();\n\t                    res = res.concat(catmullRom2bezier(dots, crz));\n\t                    r = [\"R\"].concat(pa.slice(-2));\n\t                } else if (pa0 == \"O\") {\n\t                    res.pop();\n\t                    dots = ellipsePath(x, y, pa[1], pa[2]);\n\t                    dots.push(dots[0]);\n\t                    res = res.concat(dots);\n\t                } else if (pa0 == \"U\") {\n\t                    res.pop();\n\t                    res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n\t                    r = [\"U\"].concat(res[res.length - 1].slice(-2));\n\t                } else {\n\t                    for (var k = 0, kk = pa.length; k < kk; k++) {\n\t                        r[k] = pa[k];\n\t                    }\n\t                }\n\t                pa0 = pa0.toUpperCase();\n\t                if (pa0 != \"O\") {\n\t                    switch (r[0]) {\n\t                        case \"Z\":\n\t                            x = +mx;\n\t                            y = +my;\n\t                            break;\n\t                        case \"H\":\n\t                            x = r[1];\n\t                            break;\n\t                        case \"V\":\n\t                            y = r[1];\n\t                            break;\n\t                        case \"M\":\n\t                            mx = r[r.length - 2];\n\t                            my = r[r.length - 1];\n\t                        default:\n\t                            x = r[r.length - 2];\n\t                            y = r[r.length - 1];\n\t                    }\n\t                }\n\t            }\n\t            res.toString = toString;\n\t            pth.abs = pathClone(res);\n\t            return res;\n\t        }\n\t        function l2c(x1, y1, x2, y2) {\n\t            return [x1, y1, x2, y2, x2, y2];\n\t        }\n\t        function q2c(x1, y1, ax, ay, x2, y2) {\n\t            var _13 = 1 / 3,\n\t                _23 = 2 / 3;\n\t            return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];\n\t        }\n\t        function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n\t            // for more information of where this math came from visit:\n\t            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n\t            var _120 = PI * 120 / 180,\n\t                rad = PI / 180 * (+angle || 0),\n\t                res = [],\n\t                xy,\n\t                rotate = Snap._.cacher(function (x, y, rad) {\n\t                var X = x * math.cos(rad) - y * math.sin(rad),\n\t                    Y = x * math.sin(rad) + y * math.cos(rad);\n\t                return { x: X, y: Y };\n\t            });\n\t            if (!rx || !ry) {\n\t                return [x1, y1, x2, y2, x2, y2];\n\t            }\n\t            if (!recursive) {\n\t                xy = rotate(x1, y1, -rad);\n\t                x1 = xy.x;\n\t                y1 = xy.y;\n\t                xy = rotate(x2, y2, -rad);\n\t                x2 = xy.x;\n\t                y2 = xy.y;\n\t                var cos = math.cos(PI / 180 * angle),\n\t                    sin = math.sin(PI / 180 * angle),\n\t                    x = (x1 - x2) / 2,\n\t                    y = (y1 - y2) / 2;\n\t                var h = x * x / (rx * rx) + y * y / (ry * ry);\n\t                if (h > 1) {\n\t                    h = math.sqrt(h);\n\t                    rx = h * rx;\n\t                    ry = h * ry;\n\t                }\n\t                var rx2 = rx * rx,\n\t                    ry2 = ry * ry,\n\t                    k = (large_arc_flag == sweep_flag ? -1 : 1) * math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n\t                    cx = k * rx * y / ry + (x1 + x2) / 2,\n\t                    cy = k * -ry * x / rx + (y1 + y2) / 2,\n\t                    f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n\t                    f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\t\n\t                f1 = x1 < cx ? PI - f1 : f1;\n\t                f2 = x2 < cx ? PI - f2 : f2;\n\t                f1 < 0 && (f1 = PI * 2 + f1);\n\t                f2 < 0 && (f2 = PI * 2 + f2);\n\t                if (sweep_flag && f1 > f2) {\n\t                    f1 = f1 - PI * 2;\n\t                }\n\t                if (!sweep_flag && f2 > f1) {\n\t                    f2 = f2 - PI * 2;\n\t                }\n\t            } else {\n\t                f1 = recursive[0];\n\t                f2 = recursive[1];\n\t                cx = recursive[2];\n\t                cy = recursive[3];\n\t            }\n\t            var df = f2 - f1;\n\t            if (abs(df) > _120) {\n\t                var f2old = f2,\n\t                    x2old = x2,\n\t                    y2old = y2;\n\t                f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n\t                x2 = cx + rx * math.cos(f2);\n\t                y2 = cy + ry * math.sin(f2);\n\t                res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n\t            }\n\t            df = f2 - f1;\n\t            var c1 = math.cos(f1),\n\t                s1 = math.sin(f1),\n\t                c2 = math.cos(f2),\n\t                s2 = math.sin(f2),\n\t                t = math.tan(df / 4),\n\t                hx = 4 / 3 * rx * t,\n\t                hy = 4 / 3 * ry * t,\n\t                m1 = [x1, y1],\n\t                m2 = [x1 + hx * s1, y1 - hy * c1],\n\t                m3 = [x2 + hx * s2, y2 - hy * c2],\n\t                m4 = [x2, y2];\n\t            m2[0] = 2 * m1[0] - m2[0];\n\t            m2[1] = 2 * m1[1] - m2[1];\n\t            if (recursive) {\n\t                return [m2, m3, m4].concat(res);\n\t            } else {\n\t                res = [m2, m3, m4].concat(res).join().split(\",\");\n\t                var newres = [];\n\t                for (var i = 0, ii = res.length; i < ii; i++) {\n\t                    newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n\t                }\n\t                return newres;\n\t            }\n\t        }\n\t        function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n\t            var t1 = 1 - t;\n\t            return {\n\t                x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n\t                y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n\t            };\n\t        }\n\t\n\t        // Returns bounding box of cubic bezier curve.\n\t        // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n\t        // Original version: NISHIO Hirokazu\n\t        // Modifications: https://github.com/timo22345\n\t        function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n\t            var tvalues = [],\n\t                bounds = [[], []],\n\t                a,\n\t                b,\n\t                c,\n\t                t,\n\t                t1,\n\t                t2,\n\t                b2ac,\n\t                sqrtb2ac;\n\t            for (var i = 0; i < 2; ++i) {\n\t                if (i == 0) {\n\t                    b = 6 * x0 - 12 * x1 + 6 * x2;\n\t                    a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n\t                    c = 3 * x1 - 3 * x0;\n\t                } else {\n\t                    b = 6 * y0 - 12 * y1 + 6 * y2;\n\t                    a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n\t                    c = 3 * y1 - 3 * y0;\n\t                }\n\t                if (abs(a) < 1e-12) {\n\t                    if (abs(b) < 1e-12) {\n\t                        continue;\n\t                    }\n\t                    t = -c / b;\n\t                    if (0 < t && t < 1) {\n\t                        tvalues.push(t);\n\t                    }\n\t                    continue;\n\t                }\n\t                b2ac = b * b - 4 * c * a;\n\t                sqrtb2ac = math.sqrt(b2ac);\n\t                if (b2ac < 0) {\n\t                    continue;\n\t                }\n\t                t1 = (-b + sqrtb2ac) / (2 * a);\n\t                if (0 < t1 && t1 < 1) {\n\t                    tvalues.push(t1);\n\t                }\n\t                t2 = (-b - sqrtb2ac) / (2 * a);\n\t                if (0 < t2 && t2 < 1) {\n\t                    tvalues.push(t2);\n\t                }\n\t            }\n\t\n\t            var x,\n\t                y,\n\t                j = tvalues.length,\n\t                jlen = j,\n\t                mt;\n\t            while (j--) {\n\t                t = tvalues[j];\n\t                mt = 1 - t;\n\t                bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n\t                bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n\t            }\n\t\n\t            bounds[0][jlen] = x0;\n\t            bounds[1][jlen] = y0;\n\t            bounds[0][jlen + 1] = x3;\n\t            bounds[1][jlen + 1] = y3;\n\t            bounds[0].length = bounds[1].length = jlen + 2;\n\t\n\t            return {\n\t                min: { x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1]) },\n\t                max: { x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1]) }\n\t            };\n\t        }\n\t\n\t        function path2curve(path, path2) {\n\t            var pth = !path2 && paths(path);\n\t            if (!path2 && pth.curve) {\n\t                return pathClone(pth.curve);\n\t            }\n\t            var p = pathToAbsolute(path),\n\t                p2 = path2 && pathToAbsolute(path2),\n\t                attrs = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },\n\t                attrs2 = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null },\n\t                processPath = function processPath(path, d, pcom) {\n\t                var nx, ny;\n\t                if (!path) {\n\t                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n\t                }\n\t                !(path[0] in { T: 1, Q: 1 }) && (d.qx = d.qy = null);\n\t                switch (path[0]) {\n\t                    case \"M\":\n\t                        d.X = path[1];\n\t                        d.Y = path[2];\n\t                        break;\n\t                    case \"A\":\n\t                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n\t                        break;\n\t                    case \"S\":\n\t                        if (pcom == \"C\" || pcom == \"S\") {\n\t                            // In \"S\" case we have to take into account, if the previous command is C/S.\n\t                            nx = d.x * 2 - d.bx; // And reflect the previous\n\t                            ny = d.y * 2 - d.by; // command's control point relative to the current point.\n\t                        } else {\n\t                            // or some else or nothing\n\t                            nx = d.x;\n\t                            ny = d.y;\n\t                        }\n\t                        path = [\"C\", nx, ny].concat(path.slice(1));\n\t                        break;\n\t                    case \"T\":\n\t                        if (pcom == \"Q\" || pcom == \"T\") {\n\t                            // In \"T\" case we have to take into account, if the previous command is Q/T.\n\t                            d.qx = d.x * 2 - d.qx; // And make a reflection similar\n\t                            d.qy = d.y * 2 - d.qy; // to case \"S\".\n\t                        } else {\n\t                            // or something else or nothing\n\t                            d.qx = d.x;\n\t                            d.qy = d.y;\n\t                        }\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n\t                        break;\n\t                    case \"Q\":\n\t                        d.qx = path[1];\n\t                        d.qy = path[2];\n\t                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n\t                        break;\n\t                    case \"L\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n\t                        break;\n\t                    case \"H\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n\t                        break;\n\t                    case \"V\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n\t                        break;\n\t                    case \"Z\":\n\t                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n\t                        break;\n\t                }\n\t                return path;\n\t            },\n\t                fixArc = function fixArc(pp, i) {\n\t                if (pp[i].length > 7) {\n\t                    pp[i].shift();\n\t                    var pi = pp[i];\n\t                    while (pi.length) {\n\t                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n\t                        p2 && (pcoms2[i] = \"A\"); // the same as above\n\t                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n\t                    }\n\t                    pp.splice(i, 1);\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t                fixM = function fixM(path1, path2, a1, a2, i) {\n\t                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n\t                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n\t                    a1.bx = 0;\n\t                    a1.by = 0;\n\t                    a1.x = path1[i][1];\n\t                    a1.y = path1[i][2];\n\t                    ii = mmax(p.length, p2 && p2.length || 0);\n\t                }\n\t            },\n\t                pcoms1 = [],\n\t                // path commands of original path p\n\t            pcoms2 = [],\n\t                // path commands of original path p2\n\t            pfirst = \"\",\n\t                // temporary holder for original path command\n\t            pcom = \"\"; // holder for previous path command of original path\n\t            for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n\t                p[i] && (pfirst = p[i][0]); // save current path command\n\t\n\t                if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n\t                    {\n\t                        pcoms1[i] = pfirst; // Save current path command\n\t                        i && (pcom = pcoms1[i - 1]); // Get previous path command pcom\n\t                    }\n\t                p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\t\n\t                if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n\t                // which may produce multiple C:s\n\t                // so we have to make sure that C is also C in original path\n\t\n\t                fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\t\n\t                if (p2) {\n\t                    // the same procedures is done to p2\n\t                    p2[i] && (pfirst = p2[i][0]);\n\t                    if (pfirst != \"C\") {\n\t                        pcoms2[i] = pfirst;\n\t                        i && (pcom = pcoms2[i - 1]);\n\t                    }\n\t                    p2[i] = processPath(p2[i], attrs2, pcom);\n\t\n\t                    if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n\t                        pcoms2[i] = \"C\";\n\t                    }\n\t\n\t                    fixArc(p2, i);\n\t                }\n\t                fixM(p, p2, attrs, attrs2, i);\n\t                fixM(p2, p, attrs2, attrs, i);\n\t                var seg = p[i],\n\t                    seg2 = p2 && p2[i],\n\t                    seglen = seg.length,\n\t                    seg2len = p2 && seg2.length;\n\t                attrs.x = seg[seglen - 2];\n\t                attrs.y = seg[seglen - 1];\n\t                attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n\t                attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n\t                attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n\t                attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n\t                attrs2.x = p2 && seg2[seg2len - 2];\n\t                attrs2.y = p2 && seg2[seg2len - 1];\n\t            }\n\t            if (!p2) {\n\t                pth.curve = pathClone(p);\n\t            }\n\t            return p2 ? [p, p2] : p;\n\t        }\n\t        function mapPath(path, matrix) {\n\t            if (!matrix) {\n\t                return path;\n\t            }\n\t            var x, y, i, j, ii, jj, pathi;\n\t            path = path2curve(path);\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                pathi = path[i];\n\t                for (j = 1, jj = pathi.length; j < jj; j += 2) {\n\t                    x = matrix.x(pathi[j], pathi[j + 1]);\n\t                    y = matrix.y(pathi[j], pathi[j + 1]);\n\t                    pathi[j] = x;\n\t                    pathi[j + 1] = y;\n\t                }\n\t            }\n\t            return path;\n\t        }\n\t\n\t        // http://schepers.cc/getting-to-the-point\n\t        function catmullRom2bezier(crp, z) {\n\t            var d = [];\n\t            for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n\t                var p = [{ x: +crp[i - 2], y: +crp[i - 1] }, { x: +crp[i], y: +crp[i + 1] }, { x: +crp[i + 2], y: +crp[i + 3] }, { x: +crp[i + 4], y: +crp[i + 5] }];\n\t                if (z) {\n\t                    if (!i) {\n\t                        p[0] = { x: +crp[iLen - 2], y: +crp[iLen - 1] };\n\t                    } else if (iLen - 4 == i) {\n\t                        p[3] = { x: +crp[0], y: +crp[1] };\n\t                    } else if (iLen - 2 == i) {\n\t                        p[2] = { x: +crp[0], y: +crp[1] };\n\t                        p[3] = { x: +crp[2], y: +crp[3] };\n\t                    }\n\t                } else {\n\t                    if (iLen - 4 == i) {\n\t                        p[3] = p[2];\n\t                    } else if (!i) {\n\t                        p[0] = { x: +crp[i], y: +crp[i + 1] };\n\t                    }\n\t                }\n\t                d.push([\"C\", (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);\n\t            }\n\t\n\t            return d;\n\t        }\n\t\n\t        // export\n\t        Snap.path = paths;\n\t\n\t        /*\\\n\t         * Snap.path.getTotalLength\n\t         [ method ]\n\t         **\n\t         * Returns the length of the given path in pixels\n\t         **\n\t         - path (string) SVG path string\n\t         **\n\t         = (number) length\n\t        \\*/\n\t        Snap.path.getTotalLength = getTotalLength;\n\t        /*\\\n\t         * Snap.path.getPointAtLength\n\t         [ method ]\n\t         **\n\t         * Returns the coordinates of the point located at the given length along the given path\n\t         **\n\t         - path (string) SVG path string\n\t         - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t         **\n\t         = (object) representation of the point:\n\t         o {\n\t         o     x: (number) x coordinate,\n\t         o     y: (number) y coordinate,\n\t         o     alpha: (number) angle of derivative\n\t         o }\n\t        \\*/\n\t        Snap.path.getPointAtLength = getPointAtLength;\n\t        /*\\\n\t         * Snap.path.getSubpath\n\t         [ method ]\n\t         **\n\t         * Returns the subpath of a given path between given start and end lengths\n\t         **\n\t         - path (string) SVG path string\n\t         - from (number) length, in pixels, from the start of the path to the start of the segment\n\t         - to (number) length, in pixels, from the start of the path to the end of the segment\n\t         **\n\t         = (string) path string definition for the segment\n\t        \\*/\n\t        Snap.path.getSubpath = function (path, from, to) {\n\t            if (this.getTotalLength(path) - to < 1e-6) {\n\t                return getSubpathsAtLength(path, from).end;\n\t            }\n\t            var a = getSubpathsAtLength(path, to, 1);\n\t            return from ? getSubpathsAtLength(a, from).end : a;\n\t        };\n\t        /*\\\n\t         * Element.getTotalLength\n\t         [ method ]\n\t         **\n\t         * Returns the length of the path in pixels (only works for `path` elements)\n\t         = (number) length\n\t        \\*/\n\t        elproto.getTotalLength = function () {\n\t            if (this.node.getTotalLength) {\n\t                return this.node.getTotalLength();\n\t            }\n\t        };\n\t        // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n\t        /*\\\n\t         * Element.getPointAtLength\n\t         [ method ]\n\t         **\n\t         * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n\t         **\n\t         - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n\t         **\n\t         = (object) representation of the point:\n\t         o {\n\t         o     x: (number) x coordinate,\n\t         o     y: (number) y coordinate,\n\t         o     alpha: (number) angle of derivative\n\t         o }\n\t        \\*/\n\t        elproto.getPointAtLength = function (length) {\n\t            return getPointAtLength(this.attr(\"d\"), length);\n\t        };\n\t        // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n\t        /*\\\n\t         * Element.getSubpath\n\t         [ method ]\n\t         **\n\t         * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n\t         **\n\t         - from (number) length, in pixels, from the start of the path to the start of the segment\n\t         - to (number) length, in pixels, from the start of the path to the end of the segment\n\t         **\n\t         = (string) path string definition for the segment\n\t        \\*/\n\t        elproto.getSubpath = function (from, to) {\n\t            return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n\t        };\n\t        Snap._.box = box;\n\t        /*\\\n\t         * Snap.path.findDotsAtSegment\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Finds dot coordinates on the given cubic beziér curve at the given t\n\t         - p1x (number) x of the first point of the curve\n\t         - p1y (number) y of the first point of the curve\n\t         - c1x (number) x of the first anchor of the curve\n\t         - c1y (number) y of the first anchor of the curve\n\t         - c2x (number) x of the second anchor of the curve\n\t         - c2y (number) y of the second anchor of the curve\n\t         - p2x (number) x of the second point of the curve\n\t         - p2y (number) y of the second point of the curve\n\t         - t (number) position on the curve (0..1)\n\t         = (object) point information in format:\n\t         o {\n\t         o     x: (number) x coordinate of the point,\n\t         o     y: (number) y coordinate of the point,\n\t         o     m: {\n\t         o         x: (number) x coordinate of the left anchor,\n\t         o         y: (number) y coordinate of the left anchor\n\t         o     },\n\t         o     n: {\n\t         o         x: (number) x coordinate of the right anchor,\n\t         o         y: (number) y coordinate of the right anchor\n\t         o     },\n\t         o     start: {\n\t         o         x: (number) x coordinate of the start of the curve,\n\t         o         y: (number) y coordinate of the start of the curve\n\t         o     },\n\t         o     end: {\n\t         o         x: (number) x coordinate of the end of the curve,\n\t         o         y: (number) y coordinate of the end of the curve\n\t         o     },\n\t         o     alpha: (number) angle of the curve derivative at the point\n\t         o }\n\t        \\*/\n\t        Snap.path.findDotsAtSegment = findDotsAtSegment;\n\t        /*\\\n\t         * Snap.path.bezierBBox\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns the bounding box of a given cubic beziér curve\n\t         - p1x (number) x of the first point of the curve\n\t         - p1y (number) y of the first point of the curve\n\t         - c1x (number) x of the first anchor of the curve\n\t         - c1y (number) y of the first anchor of the curve\n\t         - c2x (number) x of the second anchor of the curve\n\t         - c2y (number) y of the second anchor of the curve\n\t         - p2x (number) x of the second point of the curve\n\t         - p2y (number) y of the second point of the curve\n\t         * or\n\t         - bez (array) array of six points for beziér curve\n\t         = (object) bounding box\n\t         o {\n\t         o     x: (number) x coordinate of the left top point of the box,\n\t         o     y: (number) y coordinate of the left top point of the box,\n\t         o     x2: (number) x coordinate of the right bottom point of the box,\n\t         o     y2: (number) y coordinate of the right bottom point of the box,\n\t         o     width: (number) width of the box,\n\t         o     height: (number) height of the box\n\t         o }\n\t        \\*/\n\t        Snap.path.bezierBBox = bezierBBox;\n\t        /*\\\n\t         * Snap.path.isPointInsideBBox\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns `true` if given point is inside bounding box\n\t         - bbox (string) bounding box\n\t         - x (string) x coordinate of the point\n\t         - y (string) y coordinate of the point\n\t         = (boolean) `true` if point is inside\n\t        \\*/\n\t        Snap.path.isPointInsideBBox = isPointInsideBBox;\n\t        Snap.closest = function (x, y, X, Y) {\n\t            var r = 100,\n\t                b = box(x - r / 2, y - r / 2, r, r),\n\t                inside = [],\n\t                getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n\t                return {\n\t                    x: X[i].x,\n\t                    y: X[i].y\n\t                };\n\t            } : function (i) {\n\t                return {\n\t                    x: X[i],\n\t                    y: Y[i]\n\t                };\n\t            },\n\t                found = 0;\n\t            while (r <= 1e6 && !found) {\n\t                for (var i = 0, ii = X.length; i < ii; i++) {\n\t                    var xy = getter(i);\n\t                    if (isPointInsideBBox(b, xy.x, xy.y)) {\n\t                        found++;\n\t                        inside.push(xy);\n\t                        break;\n\t                    }\n\t                }\n\t                if (!found) {\n\t                    r *= 2;\n\t                    b = box(x - r / 2, y - r / 2, r, r);\n\t                }\n\t            }\n\t            if (r == 1e6) {\n\t                return;\n\t            }\n\t            var len = Infinity,\n\t                res;\n\t            for (i = 0, ii = inside.length; i < ii; i++) {\n\t                var l = Snap.len(x, y, inside[i].x, inside[i].y);\n\t                if (len > l) {\n\t                    len = l;\n\t                    inside[i].len = l;\n\t                    res = inside[i];\n\t                }\n\t            }\n\t            return res;\n\t        };\n\t        /*\\\n\t         * Snap.path.isBBoxIntersect\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns `true` if two bounding boxes intersect\n\t         - bbox1 (string) first bounding box\n\t         - bbox2 (string) second bounding box\n\t         = (boolean) `true` if bounding boxes intersect\n\t        \\*/\n\t        Snap.path.isBBoxIntersect = isBBoxIntersect;\n\t        /*\\\n\t         * Snap.path.intersection\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Finds intersections of two paths\n\t         - path1 (string) path string\n\t         - path2 (string) path string\n\t         = (array) dots of intersection\n\t         o [\n\t         o     {\n\t         o         x: (number) x coordinate of the point,\n\t         o         y: (number) y coordinate of the point,\n\t         o         t1: (number) t value for segment of path1,\n\t         o         t2: (number) t value for segment of path2,\n\t         o         segment1: (number) order number for segment of path1,\n\t         o         segment2: (number) order number for segment of path2,\n\t         o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n\t         o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n\t         o     }\n\t         o ]\n\t        \\*/\n\t        Snap.path.intersection = pathIntersection;\n\t        Snap.path.intersectionNumber = pathIntersectionNumber;\n\t        /*\\\n\t         * Snap.path.isPointInside\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns `true` if given point is inside a given closed path.\n\t         *\n\t         * Note: fill mode doesn’t affect the result of this method.\n\t         - path (string) path string\n\t         - x (number) x of the point\n\t         - y (number) y of the point\n\t         = (boolean) `true` if point is inside the path\n\t        \\*/\n\t        Snap.path.isPointInside = isPointInsidePath;\n\t        /*\\\n\t         * Snap.path.getBBox\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Returns the bounding box of a given path\n\t         - path (string) path string\n\t         = (object) bounding box\n\t         o {\n\t         o     x: (number) x coordinate of the left top point of the box,\n\t         o     y: (number) y coordinate of the left top point of the box,\n\t         o     x2: (number) x coordinate of the right bottom point of the box,\n\t         o     y2: (number) y coordinate of the right bottom point of the box,\n\t         o     width: (number) width of the box,\n\t         o     height: (number) height of the box\n\t         o }\n\t        \\*/\n\t        Snap.path.getBBox = pathBBox;\n\t        Snap.path.get = getPath;\n\t        /*\\\n\t         * Snap.path.toRelative\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Converts path coordinates into relative values\n\t         - path (string) path string\n\t         = (array) path string\n\t        \\*/\n\t        Snap.path.toRelative = pathToRelative;\n\t        /*\\\n\t         * Snap.path.toAbsolute\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Converts path coordinates into absolute values\n\t         - path (string) path string\n\t         = (array) path string\n\t        \\*/\n\t        Snap.path.toAbsolute = pathToAbsolute;\n\t        /*\\\n\t         * Snap.path.toCubic\n\t         [ method ]\n\t         **\n\t         * Utility method\n\t         **\n\t         * Converts path to a new path where all segments are cubic beziér curves\n\t         - pathString (string|array) path string or array of segments\n\t         = (array) array of segments\n\t        \\*/\n\t        Snap.path.toCubic = path2curve;\n\t        /*\\\n\t         * Snap.path.map\n\t         [ method ]\n\t         **\n\t         * Transform the path string with the given matrix\n\t         - path (string) path string\n\t         - matrix (object) see @Matrix\n\t         = (string) transformed path string\n\t        \\*/\n\t        Snap.path.map = mapPath;\n\t        Snap.path.toString = toString;\n\t        Snap.path.clone = pathClone;\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        var mmax = Math.max,\n\t            mmin = Math.min;\n\t\n\t        // Set\n\t        var Set = function Set(items) {\n\t            this.items = [];\n\t            this.bindings = {};\n\t            this.length = 0;\n\t            this.type = \"set\";\n\t            if (items) {\n\t                for (var i = 0, ii = items.length; i < ii; i++) {\n\t                    if (items[i]) {\n\t                        this[this.items.length] = this.items[this.items.length] = items[i];\n\t                        this.length++;\n\t                    }\n\t                }\n\t            }\n\t        },\n\t            setproto = Set.prototype;\n\t        /*\\\n\t         * Set.push\n\t         [ method ]\n\t         **\n\t         * Adds each argument to the current set\n\t         = (object) original element\n\t        \\*/\n\t        setproto.push = function () {\n\t            var item, len;\n\t            for (var i = 0, ii = arguments.length; i < ii; i++) {\n\t                item = arguments[i];\n\t                if (item) {\n\t                    len = this.items.length;\n\t                    this[len] = this.items[len] = item;\n\t                    this.length++;\n\t                }\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.pop\n\t         [ method ]\n\t         **\n\t         * Removes last element and returns it\n\t         = (object) element\n\t        \\*/\n\t        setproto.pop = function () {\n\t            this.length && delete this[this.length--];\n\t            return this.items.pop();\n\t        };\n\t        /*\\\n\t         * Set.forEach\n\t         [ method ]\n\t         **\n\t         * Executes given function for each element in the set\n\t         *\n\t         * If the function returns `false`, the loop stops running.\n\t         **\n\t         - callback (function) function to run\n\t         - thisArg (object) context object for the callback\n\t         = (object) Set object\n\t        \\*/\n\t        setproto.forEach = function (callback, thisArg) {\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                if (callback.call(thisArg, this.items[i], i) === false) {\n\t                    return this;\n\t                }\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.animate\n\t         [ method ]\n\t         **\n\t         * Animates each element in set in sync.\n\t         *\n\t         **\n\t         - attrs (object) key-value pairs of destination attributes\n\t         - duration (number) duration of the animation in milliseconds\n\t         - easing (function) #optional easing function from @mina or custom\n\t         - callback (function) #optional callback function that executes when the animation ends\n\t         * or\n\t         - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n\t         > Usage\n\t         | // animate all elements in set to radius 10\n\t         | set.animate({r: 10}, 500, mina.easein);\n\t         | // or\n\t         | // animate first element to radius 10, but second to radius 20 and in different time\n\t         | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n\t         = (Element) the current element\n\t        \\*/\n\t        setproto.animate = function (attrs, ms, easing, callback) {\n\t            if (typeof easing == \"function\" && !easing.length) {\n\t                callback = easing;\n\t                easing = mina.linear;\n\t            }\n\t            if (attrs instanceof Snap._.Animation) {\n\t                callback = attrs.callback;\n\t                easing = attrs.easing;\n\t                ms = easing.dur;\n\t                attrs = attrs.attr;\n\t            }\n\t            var args = arguments;\n\t            if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n\t                var each = true;\n\t            }\n\t            var begin,\n\t                handler = function handler() {\n\t                if (begin) {\n\t                    this.b = begin;\n\t                } else {\n\t                    begin = this.b;\n\t                }\n\t            },\n\t                cb = 0,\n\t                set = this,\n\t                callbacker = callback && function () {\n\t                if (++cb == set.length) {\n\t                    callback.call(this);\n\t                }\n\t            };\n\t            return this.forEach(function (el, i) {\n\t                eve.once(\"snap.animcreated.\" + el.id, handler);\n\t                if (each) {\n\t                    args[i] && el.animate.apply(el, args[i]);\n\t                } else {\n\t                    el.animate(attrs, ms, easing, callbacker);\n\t                }\n\t            });\n\t        };\n\t        /*\\\n\t         * Set.remove\n\t         [ method ]\n\t         **\n\t         * Removes all children of the set.\n\t         *\n\t         = (object) Set object\n\t        \\*/\n\t        setproto.remove = function () {\n\t            while (this.length) {\n\t                this.pop().remove();\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.bind\n\t         [ method ]\n\t         **\n\t         * Specifies how to handle a specific attribute when applied\n\t         * to a set.\n\t         *\n\t         **\n\t         - attr (string) attribute name\n\t         - callback (function) function to run\n\t         * or\n\t         - attr (string) attribute name\n\t         - element (Element) specific element in the set to apply the attribute to\n\t         * or\n\t         - attr (string) attribute name\n\t         - element (Element) specific element in the set to apply the attribute to\n\t         - eattr (string) attribute on the element to bind the attribute to\n\t         = (object) Set object\n\t        \\*/\n\t        setproto.bind = function (attr, a, b) {\n\t            var data = {};\n\t            if (typeof a == \"function\") {\n\t                this.bindings[attr] = a;\n\t            } else {\n\t                var aname = b || attr;\n\t                this.bindings[attr] = function (v) {\n\t                    data[aname] = v;\n\t                    a.attr(data);\n\t                };\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.attr\n\t         [ method ]\n\t         **\n\t         * Equivalent of @Element.attr.\n\t         = (object) Set object\n\t        \\*/\n\t        setproto.attr = function (value) {\n\t            var unbound = {};\n\t            for (var k in value) {\n\t                if (this.bindings[k]) {\n\t                    this.bindings[k](value[k]);\n\t                } else {\n\t                    unbound[k] = value[k];\n\t                }\n\t            }\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                this.items[i].attr(unbound);\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.clear\n\t         [ method ]\n\t         **\n\t         * Removes all elements from the set\n\t        \\*/\n\t        setproto.clear = function () {\n\t            while (this.length) {\n\t                this.pop();\n\t            }\n\t        };\n\t        /*\\\n\t         * Set.splice\n\t         [ method ]\n\t         **\n\t         * Removes range of elements from the set\n\t         **\n\t         - index (number) position of the deletion\n\t         - count (number) number of element to remove\n\t         - insertion… (object) #optional elements to insert\n\t         = (object) set elements that were deleted\n\t        \\*/\n\t        setproto.splice = function (index, count, insertion) {\n\t            index = index < 0 ? mmax(this.length + index, 0) : index;\n\t            count = mmax(0, mmin(this.length - index, count));\n\t            var tail = [],\n\t                todel = [],\n\t                args = [],\n\t                i;\n\t            for (i = 2; i < arguments.length; i++) {\n\t                args.push(arguments[i]);\n\t            }\n\t            for (i = 0; i < count; i++) {\n\t                todel.push(this[index + i]);\n\t            }\n\t            for (; i < this.length - index; i++) {\n\t                tail.push(this[index + i]);\n\t            }\n\t            var arglen = args.length;\n\t            for (i = 0; i < arglen + tail.length; i++) {\n\t                this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n\t            }\n\t            i = this.items.length = this.length -= count - arglen;\n\t            while (this[i]) {\n\t                delete this[i++];\n\t            }\n\t            return new Set(todel);\n\t        };\n\t        /*\\\n\t         * Set.exclude\n\t         [ method ]\n\t         **\n\t         * Removes given element from the set\n\t         **\n\t         - element (object) element to remove\n\t         = (boolean) `true` if object was found and removed from the set\n\t        \\*/\n\t        setproto.exclude = function (el) {\n\t            for (var i = 0, ii = this.length; i < ii; i++) {\n\t                if (this[i] == el) {\n\t                    this.splice(i, 1);\n\t                    return true;\n\t                }\n\t            }return false;\n\t        };\n\t        /*\\\n\t         * Set.insertAfter\n\t         [ method ]\n\t         **\n\t         * Inserts set elements after given element.\n\t         **\n\t         - element (object) set will be inserted after this element\n\t         = (object) Set object\n\t        \\*/\n\t        setproto.insertAfter = function (el) {\n\t            var i = this.items.length;\n\t            while (i--) {\n\t                this.items[i].insertAfter(el);\n\t            }\n\t            return this;\n\t        };\n\t        /*\\\n\t         * Set.getBBox\n\t         [ method ]\n\t         **\n\t         * Union of all bboxes of the set. See @Element.getBBox.\n\t         = (object) bounding box descriptor. See @Element.getBBox.\n\t        \\*/\n\t        setproto.getBBox = function () {\n\t            var x = [],\n\t                y = [],\n\t                x2 = [],\n\t                y2 = [];\n\t            for (var i = this.items.length; i--;) {\n\t                if (!this.items[i].removed) {\n\t                    var box = this.items[i].getBBox();\n\t                    x.push(box.x);\n\t                    y.push(box.y);\n\t                    x2.push(box.x + box.width);\n\t                    y2.push(box.y + box.height);\n\t                }\n\t            }x = mmin.apply(0, x);\n\t            y = mmin.apply(0, y);\n\t            x2 = mmax.apply(0, x2);\n\t            y2 = mmax.apply(0, y2);\n\t            return {\n\t                x: x,\n\t                y: y,\n\t                x2: x2,\n\t                y2: y2,\n\t                width: x2 - x,\n\t                height: y2 - y,\n\t                cx: x + (x2 - x) / 2,\n\t                cy: y + (y2 - y) / 2\n\t            };\n\t        };\n\t        /*\\\n\t         * Set.insertAfter\n\t         [ method ]\n\t         **\n\t         * Creates a clone of the set.\n\t         **\n\t         = (object) New Set object\n\t        \\*/\n\t        setproto.clone = function (s) {\n\t            s = new Set();\n\t            for (var i = 0, ii = this.items.length; i < ii; i++) {\n\t                s.push(this.items[i].clone());\n\t            }\n\t            return s;\n\t        };\n\t        setproto.toString = function () {\n\t            return \"Snap\\u2018s set\";\n\t        };\n\t        setproto.type = \"set\";\n\t        // export\n\t        /*\\\n\t         * Snap.Set\n\t         [ property ]\n\t         **\n\t         * Set constructor.\n\t        \\*/\n\t        Snap.Set = Set;\n\t        /*\\\n\t         * Snap.set\n\t         [ method ]\n\t         **\n\t         * Creates a set and fills it with list of arguments.\n\t         **\n\t         = (object) New Set object\n\t         | var r = paper.rect(0, 0, 10, 10),\n\t         |     s1 = Snap.set(), // empty set\n\t         |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n\t        \\*/\n\t        Snap.set = function () {\n\t            var set = new Set();\n\t            if (arguments.length) {\n\t                set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n\t            }\n\t            return set;\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        var names = {},\n\t            reUnit = /[%a-z]+$/i,\n\t            Str = String;\n\t        names.stroke = names.fill = \"colour\";\n\t        function getEmpty(item) {\n\t            var l = item[0];\n\t            switch (l.toLowerCase()) {\n\t                case \"t\":\n\t                    return [l, 0, 0];\n\t                case \"m\":\n\t                    return [l, 1, 0, 0, 1, 0, 0];\n\t                case \"r\":\n\t                    if (item.length == 4) {\n\t                        return [l, 0, item[2], item[3]];\n\t                    } else {\n\t                        return [l, 0];\n\t                    }\n\t                case \"s\":\n\t                    if (item.length == 5) {\n\t                        return [l, 1, 1, item[3], item[4]];\n\t                    } else if (item.length == 3) {\n\t                        return [l, 1, 1];\n\t                    } else {\n\t                        return [l, 1];\n\t                    }\n\t            }\n\t        }\n\t        function equaliseTransform(t1, t2, getBBox) {\n\t            t1 = t1 || new Snap.Matrix();\n\t            t2 = t2 || new Snap.Matrix();\n\t            t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n\t            t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n\t            var maxlength = Math.max(t1.length, t2.length),\n\t                from = [],\n\t                to = [],\n\t                i = 0,\n\t                j,\n\t                jj,\n\t                tt1,\n\t                tt2;\n\t            for (; i < maxlength; i++) {\n\t                tt1 = t1[i] || getEmpty(t2[i]);\n\t                tt2 = t2[i] || getEmpty(tt1);\n\t                if (tt1[0] != tt2[0] || tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) || tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])) {\n\t                    t1 = Snap._.transform2matrix(t1, getBBox());\n\t                    t2 = Snap._.transform2matrix(t2, getBBox());\n\t                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n\t                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n\t                    break;\n\t                }\n\t                from[i] = [];\n\t                to[i] = [];\n\t                for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n\t                    j in tt1 && (from[i][j] = tt1[j]);\n\t                    j in tt2 && (to[i][j] = tt2[j]);\n\t                }\n\t            }\n\t            return {\n\t                from: path2array(from),\n\t                to: path2array(to),\n\t                f: getPath(from)\n\t            };\n\t        }\n\t        function getNumber(val) {\n\t            return val;\n\t        }\n\t        function getUnit(unit) {\n\t            return function (val) {\n\t                return +val.toFixed(3) + unit;\n\t            };\n\t        }\n\t        function getViewBox(val) {\n\t            return val.join(\" \");\n\t        }\n\t        function getColour(clr) {\n\t            return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n\t        }\n\t        function getPath(path) {\n\t            var k = 0,\n\t                i,\n\t                ii,\n\t                j,\n\t                jj,\n\t                out,\n\t                a,\n\t                b = [];\n\t            for (i = 0, ii = path.length; i < ii; i++) {\n\t                out = \"[\";\n\t                a = ['\"' + path[i][0] + '\"'];\n\t                for (j = 1, jj = path[i].length; j < jj; j++) {\n\t                    a[j] = \"val[\" + k++ + \"]\";\n\t                }\n\t                out += a + \"]\";\n\t                b[i] = out;\n\t            }\n\t            return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n\t        }\n\t        function path2array(path) {\n\t            var out = [];\n\t            for (var i = 0, ii = path.length; i < ii; i++) {\n\t                for (var j = 1, jj = path[i].length; j < jj; j++) {\n\t                    out.push(path[i][j]);\n\t                }\n\t            }\n\t            return out;\n\t        }\n\t        function isNumeric(obj) {\n\t            return isFinite(obj);\n\t        }\n\t        function arrayEqual(arr1, arr2) {\n\t            if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n\t                return false;\n\t            }\n\t            return arr1.toString() == arr2.toString();\n\t        }\n\t        Element.prototype.equal = function (name, b) {\n\t            return eve(\"snap.util.equal\", this, name, b).firstDefined();\n\t        };\n\t        eve.on(\"snap.util.equal\", function (name, b) {\n\t            var A,\n\t                B,\n\t                a = Str(this.attr(name) || \"\"),\n\t                el = this;\n\t            if (names[name] == \"colour\") {\n\t                A = Snap.color(a);\n\t                B = Snap.color(b);\n\t                return {\n\t                    from: [A.r, A.g, A.b, A.opacity],\n\t                    to: [B.r, B.g, B.b, B.opacity],\n\t                    f: getColour\n\t                };\n\t            }\n\t            if (name == \"viewBox\") {\n\t                A = this.attr(name).vb.split(\" \").map(Number);\n\t                B = b.split(\" \").map(Number);\n\t                return {\n\t                    from: A,\n\t                    to: B,\n\t                    f: getViewBox\n\t                };\n\t            }\n\t            if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n\t                if (typeof b == \"string\") {\n\t                    b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n\t                }\n\t                a = this.matrix;\n\t                if (!Snap._.rgTransform.test(b)) {\n\t                    b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n\t                } else {\n\t                    b = Snap._.transform2matrix(b, this.getBBox());\n\t                }\n\t                return equaliseTransform(a, b, function () {\n\t                    return el.getBBox(1);\n\t                });\n\t            }\n\t            if (name == \"d\" || name == \"path\") {\n\t                A = Snap.path.toCubic(a, b);\n\t                return {\n\t                    from: path2array(A[0]),\n\t                    to: path2array(A[1]),\n\t                    f: getPath(A[0])\n\t                };\n\t            }\n\t            if (name == \"points\") {\n\t                A = Str(a).split(Snap._.separator);\n\t                B = Str(b).split(Snap._.separator);\n\t                return {\n\t                    from: A,\n\t                    to: B,\n\t                    f: function f(val) {\n\t                        return val;\n\t                    }\n\t                };\n\t            }\n\t            if (isNumeric(a) && isNumeric(b)) {\n\t                return {\n\t                    from: parseFloat(a),\n\t                    to: parseFloat(b),\n\t                    f: getNumber\n\t                };\n\t            }\n\t            var aUnit = a.match(reUnit),\n\t                bUnit = Str(b).match(reUnit);\n\t            if (aUnit && arrayEqual(aUnit, bUnit)) {\n\t                return {\n\t                    from: parseFloat(a),\n\t                    to: parseFloat(b),\n\t                    f: getUnit(aUnit)\n\t                };\n\t            } else {\n\t                return {\n\t                    from: this.asPX(name),\n\t                    to: this.asPX(name, b),\n\t                    f: getNumber\n\t                };\n\t            }\n\t        });\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    // \n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    // \n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    // \n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        var elproto = Element.prototype,\n\t            has = \"hasOwnProperty\",\n\t            supportsTouch = \"createTouch\" in glob.doc,\n\t            events = [\"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\", \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\", \"touchcancel\"],\n\t            touchMap = {\n\t            mousedown: \"touchstart\",\n\t            mousemove: \"touchmove\",\n\t            mouseup: \"touchend\"\n\t        },\n\t            getScroll = function getScroll(xy, el) {\n\t            var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n\t                doc = el && el.node ? el.node.ownerDocument : glob.doc;\n\t            return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n\t        },\n\t            preventDefault = function preventDefault() {\n\t            this.returnValue = false;\n\t        },\n\t            preventTouch = function preventTouch() {\n\t            return this.originalEvent.preventDefault();\n\t        },\n\t            stopPropagation = function stopPropagation() {\n\t            this.cancelBubble = true;\n\t        },\n\t            stopTouch = function stopTouch() {\n\t            return this.originalEvent.stopPropagation();\n\t        },\n\t            addEvent = function addEvent(obj, type, fn, element) {\n\t            var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n\t                f = function f(e) {\n\t                var scrollY = getScroll(\"y\", element),\n\t                    scrollX = getScroll(\"x\", element);\n\t                if (supportsTouch && touchMap[has](type)) {\n\t                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n\t                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n\t                            var olde = e;\n\t                            e = e.targetTouches[i];\n\t                            e.originalEvent = olde;\n\t                            e.preventDefault = preventTouch;\n\t                            e.stopPropagation = stopTouch;\n\t                            break;\n\t                        }\n\t                    }\n\t                }\n\t                var x = e.clientX + scrollX,\n\t                    y = e.clientY + scrollY;\n\t                return fn.call(element, e, x, y);\n\t            };\n\t\n\t            if (type !== realName) {\n\t                obj.addEventListener(type, f, false);\n\t            }\n\t\n\t            obj.addEventListener(realName, f, false);\n\t\n\t            return function () {\n\t                if (type !== realName) {\n\t                    obj.removeEventListener(type, f, false);\n\t                }\n\t\n\t                obj.removeEventListener(realName, f, false);\n\t                return true;\n\t            };\n\t        },\n\t            drag = [],\n\t            dragMove = function dragMove(e) {\n\t            var x = e.clientX,\n\t                y = e.clientY,\n\t                scrollY = getScroll(\"y\"),\n\t                scrollX = getScroll(\"x\"),\n\t                dragi,\n\t                j = drag.length;\n\t            while (j--) {\n\t                dragi = drag[j];\n\t                if (supportsTouch) {\n\t                    var i = e.touches && e.touches.length,\n\t                        touch;\n\t                    while (i--) {\n\t                        touch = e.touches[i];\n\t                        if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n\t                            x = touch.clientX;\n\t                            y = touch.clientY;\n\t                            (e.originalEvent ? e.originalEvent : e).preventDefault();\n\t                            break;\n\t                        }\n\t                    }\n\t                } else {\n\t                    e.preventDefault();\n\t                }\n\t                var node = dragi.el.node,\n\t                    o,\n\t                    next = node.nextSibling,\n\t                    parent = node.parentNode,\n\t                    display = node.style.display;\n\t                // glob.win.opera && parent.removeChild(node);\n\t                // node.style.display = \"none\";\n\t                // o = dragi.el.paper.getElementByPoint(x, y);\n\t                // node.style.display = display;\n\t                // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n\t                // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n\t                x += scrollX;\n\t                y += scrollY;\n\t                eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n\t            }\n\t        },\n\t            dragUp = function dragUp(e) {\n\t            Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t            var i = drag.length,\n\t                dragi;\n\t            while (i--) {\n\t                dragi = drag[i];\n\t                dragi.el._drag = {};\n\t                eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n\t                eve.off(\"snap.drag.*.\" + dragi.el.id);\n\t            }\n\t            drag = [];\n\t        };\n\t        /*\\\n\t         * Element.click\n\t         [ method ]\n\t         **\n\t         * Adds a click event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unclick\n\t         [ method ]\n\t         **\n\t         * Removes a click event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.dblclick\n\t         [ method ]\n\t         **\n\t         * Adds a double click event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.undblclick\n\t         [ method ]\n\t         **\n\t         * Removes a double click event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.mousedown\n\t         [ method ]\n\t         **\n\t         * Adds a mousedown event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unmousedown\n\t         [ method ]\n\t         **\n\t         * Removes a mousedown event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.mousemove\n\t         [ method ]\n\t         **\n\t         * Adds a mousemove event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unmousemove\n\t         [ method ]\n\t         **\n\t         * Removes a mousemove event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.mouseout\n\t         [ method ]\n\t         **\n\t         * Adds a mouseout event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unmouseout\n\t         [ method ]\n\t         **\n\t         * Removes a mouseout event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.mouseover\n\t         [ method ]\n\t         **\n\t         * Adds a mouseover event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unmouseover\n\t         [ method ]\n\t         **\n\t         * Removes a mouseover event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.mouseup\n\t         [ method ]\n\t         **\n\t         * Adds a mouseup event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.unmouseup\n\t         [ method ]\n\t         **\n\t         * Removes a mouseup event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.touchstart\n\t         [ method ]\n\t         **\n\t         * Adds a touchstart event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.untouchstart\n\t         [ method ]\n\t         **\n\t         * Removes a touchstart event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.touchmove\n\t         [ method ]\n\t         **\n\t         * Adds a touchmove event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.untouchmove\n\t         [ method ]\n\t         **\n\t         * Removes a touchmove event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.touchend\n\t         [ method ]\n\t         **\n\t         * Adds a touchend event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.untouchend\n\t         [ method ]\n\t         **\n\t         * Removes a touchend event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t\n\t        /*\\\n\t         * Element.touchcancel\n\t         [ method ]\n\t         **\n\t         * Adds a touchcancel event handler to the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        /*\\\n\t         * Element.untouchcancel\n\t         [ method ]\n\t         **\n\t         * Removes a touchcancel event handler from the element\n\t         - handler (function) handler for the event\n\t         = (object) @Element\n\t        \\*/\n\t        for (var i = events.length; i--;) {\n\t            (function (eventName) {\n\t                Snap[eventName] = elproto[eventName] = function (fn, scope) {\n\t                    if (Snap.is(fn, \"function\")) {\n\t                        this.events = this.events || [];\n\t                        this.events.push({\n\t                            name: eventName,\n\t                            f: fn,\n\t                            unbind: addEvent(this.node || document, eventName, fn, scope || this)\n\t                        });\n\t                    } else {\n\t                        for (var i = 0, ii = this.events.length; i < ii; i++) {\n\t                            if (this.events[i].name == eventName) {\n\t                                try {\n\t                                    this.events[i].f.call(this);\n\t                                } catch (e) {}\n\t                            }\n\t                        }\n\t                    }\n\t                    return this;\n\t                };\n\t                Snap[\"un\" + eventName] = elproto[\"un\" + eventName] = function (fn) {\n\t                    var events = this.events || [],\n\t                        l = events.length;\n\t                    while (l--) {\n\t                        if (events[l].name == eventName && (events[l].f == fn || !fn)) {\n\t                            events[l].unbind();\n\t                            events.splice(l, 1);\n\t                            !events.length && delete this.events;\n\t                            return this;\n\t                        }\n\t                    }return this;\n\t                };\n\t            })(events[i]);\n\t        }\n\t        /*\\\n\t         * Element.hover\n\t         [ method ]\n\t         **\n\t         * Adds hover event handlers to the element\n\t         - f_in (function) handler for hover in\n\t         - f_out (function) handler for hover out\n\t         - icontext (object) #optional context for hover in handler\n\t         - ocontext (object) #optional context for hover out handler\n\t         = (object) @Element\n\t        \\*/\n\t        elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n\t            return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n\t        };\n\t        /*\\\n\t         * Element.unhover\n\t         [ method ]\n\t         **\n\t         * Removes hover event handlers from the element\n\t         - f_in (function) handler for hover in\n\t         - f_out (function) handler for hover out\n\t         = (object) @Element\n\t        \\*/\n\t        elproto.unhover = function (f_in, f_out) {\n\t            return this.unmouseover(f_in).unmouseout(f_out);\n\t        };\n\t        var draggable = [];\n\t        // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n\t        // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n\t        // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n\t        // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n\t        /*\\\n\t         * Element.drag\n\t         [ method ]\n\t         **\n\t         * Adds event handlers for an element's drag gesture\n\t         **\n\t         - onmove (function) handler for moving\n\t         - onstart (function) handler for drag start\n\t         - onend (function) handler for drag end\n\t         - mcontext (object) #optional context for moving handler\n\t         - scontext (object) #optional context for drag start handler\n\t         - econtext (object) #optional context for drag end handler\n\t         * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n\t         * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n\t         * `drag.over.<id>` fires as well.\n\t         *\n\t         * Start event and start handler are called in specified context or in context of the element with following parameters:\n\t         o x (number) x position of the mouse\n\t         o y (number) y position of the mouse\n\t         o event (object) DOM event object\n\t         * Move event and move handler are called in specified context or in context of the element with following parameters:\n\t         o dx (number) shift by x from the start point\n\t         o dy (number) shift by y from the start point\n\t         o x (number) x position of the mouse\n\t         o y (number) y position of the mouse\n\t         o event (object) DOM event object\n\t         * End event and end handler are called in specified context or in context of the element with following parameters:\n\t         o event (object) DOM event object\n\t         = (object) @Element\n\t        \\*/\n\t        elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n\t            var el = this;\n\t            if (!arguments.length) {\n\t                var origTransform;\n\t                return el.drag(function (dx, dy) {\n\t                    this.attr({\n\t                        transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n\t                    });\n\t                }, function () {\n\t                    origTransform = this.transform().local;\n\t                });\n\t            }\n\t            function start(e, x, y) {\n\t                (e.originalEvent || e).preventDefault();\n\t                el._drag.x = x;\n\t                el._drag.y = y;\n\t                el._drag.id = e.identifier;\n\t                !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n\t                drag.push({ el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope });\n\t                onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n\t                onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n\t                onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n\t                eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n\t            }\n\t            function init(e, x, y) {\n\t                eve(\"snap.draginit.\" + el.id, el, e, x, y);\n\t            }\n\t            eve.on(\"snap.draginit.\" + el.id, start);\n\t            el._drag = {};\n\t            draggable.push({ el: el, start: start, init: init });\n\t            el.mousedown(init);\n\t            return el;\n\t        };\n\t        /*\n\t         * Element.onDragOver\n\t         [ method ]\n\t         **\n\t         * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n\t         - f (function) handler for event, first argument would be the element you are dragging over\n\t        \\*/\n\t        // elproto.onDragOver = function (f) {\n\t        //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n\t        // };\n\t        /*\\\n\t         * Element.undrag\n\t         [ method ]\n\t         **\n\t         * Removes all drag event handlers from the given element\n\t        \\*/\n\t        elproto.undrag = function () {\n\t            var i = draggable.length;\n\t            while (i--) {\n\t                if (draggable[i].el == this) {\n\t                    this.unmousedown(draggable[i].init);\n\t                    draggable.splice(i, 1);\n\t                    eve.unbind(\"snap.drag.*.\" + this.id);\n\t                    eve.unbind(\"snap.draginit.\" + this.id);\n\t                }\n\t            }!draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n\t            return this;\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        var elproto = Element.prototype,\n\t            pproto = Paper.prototype,\n\t            rgurl = /^\\s*url\\((.+)\\)/,\n\t            Str = String,\n\t            $ = Snap._.$;\n\t        Snap.filter = {};\n\t        /*\\\n\t         * Paper.filter\n\t         [ method ]\n\t         **\n\t         * Creates a `<filter>` element\n\t         **\n\t         - filstr (string) SVG fragment of filter provided as a string\n\t         = (object) @Element\n\t         * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n\t         > Usage\n\t         | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n\t         |     c = paper.circle(10, 10, 10).attr({\n\t         |         filter: f\n\t         |     });\n\t        \\*/\n\t        pproto.filter = function (filstr) {\n\t            var paper = this;\n\t            if (paper.type != \"svg\") {\n\t                paper = paper.paper;\n\t            }\n\t            var f = Snap.parse(Str(filstr)),\n\t                id = Snap._.id(),\n\t                width = paper.node.offsetWidth,\n\t                height = paper.node.offsetHeight,\n\t                filter = $(\"filter\");\n\t            $(filter, {\n\t                id: id,\n\t                filterUnits: \"userSpaceOnUse\"\n\t            });\n\t            filter.appendChild(f.node);\n\t            paper.defs.appendChild(filter);\n\t            return new Element(filter);\n\t        };\n\t\n\t        eve.on(\"snap.util.getattr.filter\", function () {\n\t            eve.stop();\n\t            var p = $(this.node, \"filter\");\n\t            if (p) {\n\t                var match = Str(p).match(rgurl);\n\t                return match && Snap.select(match[1]);\n\t            }\n\t        });\n\t        eve.on(\"snap.util.attr.filter\", function (value) {\n\t            if (value instanceof Element && value.type == \"filter\") {\n\t                eve.stop();\n\t                var id = value.node.id;\n\t                if (!id) {\n\t                    $(value.node, { id: value.id });\n\t                    id = value.id;\n\t                }\n\t                $(this.node, {\n\t                    filter: Snap.url(id)\n\t                });\n\t            }\n\t            if (!value || value == \"none\") {\n\t                eve.stop();\n\t                this.node.removeAttribute(\"filter\");\n\t            }\n\t        });\n\t        /*\\\n\t         * Snap.filter.blur\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the blur filter\n\t         **\n\t         - x (number) amount of horizontal blur, in pixels\n\t         - y (number) #optional amount of vertical blur, in pixels\n\t         = (string) filter representation\n\t         > Usage\n\t         | var f = paper.filter(Snap.filter.blur(5, 10)),\n\t         |     c = paper.circle(10, 10, 10).attr({\n\t         |         filter: f\n\t         |     });\n\t        \\*/\n\t        Snap.filter.blur = function (x, y) {\n\t            if (x == null) {\n\t                x = 2;\n\t            }\n\t            var def = y == null ? x : [x, y];\n\t            return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n\t                def: def\n\t            });\n\t        };\n\t        Snap.filter.blur.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.shadow\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the shadow filter\n\t         **\n\t         - dx (number) #optional horizontal shift of the shadow, in pixels\n\t         - dy (number) #optional vertical shift of the shadow, in pixels\n\t         - blur (number) #optional amount of blur\n\t         - color (string) #optional color of the shadow\n\t         - opacity (number) #optional `0..1` opacity of the shadow\n\t         * or\n\t         - dx (number) #optional horizontal shift of the shadow, in pixels\n\t         - dy (number) #optional vertical shift of the shadow, in pixels\n\t         - color (string) #optional color of the shadow\n\t         - opacity (number) #optional `0..1` opacity of the shadow\n\t         * which makes blur default to `4`. Or\n\t         - dx (number) #optional horizontal shift of the shadow, in pixels\n\t         - dy (number) #optional vertical shift of the shadow, in pixels\n\t         - opacity (number) #optional `0..1` opacity of the shadow\n\t         = (string) filter representation\n\t         > Usage\n\t         | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n\t         |     c = paper.circle(10, 10, 10).attr({\n\t         |         filter: f\n\t         |     });\n\t        \\*/\n\t        Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n\t            if (opacity == null) {\n\t                if (color == null) {\n\t                    opacity = blur;\n\t                    blur = 4;\n\t                    color = \"#000\";\n\t                } else {\n\t                    opacity = color;\n\t                    color = blur;\n\t                    blur = 4;\n\t                }\n\t            }\n\t            if (blur == null) {\n\t                blur = 4;\n\t            }\n\t            if (opacity == null) {\n\t                opacity = 1;\n\t            }\n\t            if (dx == null) {\n\t                dx = 0;\n\t                dy = 2;\n\t            }\n\t            if (dy == null) {\n\t                dy = dx;\n\t            }\n\t            color = Snap.color(color);\n\t            return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n\t                color: color,\n\t                dx: dx,\n\t                dy: dy,\n\t                blur: blur,\n\t                opacity: opacity\n\t            });\n\t        };\n\t        Snap.filter.shadow.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.grayscale\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the grayscale filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.grayscale = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n\t                a: 0.2126 + 0.7874 * (1 - amount),\n\t                b: 0.7152 - 0.7152 * (1 - amount),\n\t                c: 0.0722 - 0.0722 * (1 - amount),\n\t                d: 0.2126 - 0.2126 * (1 - amount),\n\t                e: 0.7152 + 0.2848 * (1 - amount),\n\t                f: 0.0722 - 0.0722 * (1 - amount),\n\t                g: 0.2126 - 0.2126 * (1 - amount),\n\t                h: 0.0722 + 0.9278 * (1 - amount)\n\t            });\n\t        };\n\t        Snap.filter.grayscale.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.sepia\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the sepia filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.sepia = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n\t                a: 0.393 + 0.607 * (1 - amount),\n\t                b: 0.769 - 0.769 * (1 - amount),\n\t                c: 0.189 - 0.189 * (1 - amount),\n\t                d: 0.349 - 0.349 * (1 - amount),\n\t                e: 0.686 + 0.314 * (1 - amount),\n\t                f: 0.168 - 0.168 * (1 - amount),\n\t                g: 0.272 - 0.272 * (1 - amount),\n\t                h: 0.534 - 0.534 * (1 - amount),\n\t                i: 0.131 + 0.869 * (1 - amount)\n\t            });\n\t        };\n\t        Snap.filter.sepia.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.saturate\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the saturate filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.saturate = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n\t                amount: 1 - amount\n\t            });\n\t        };\n\t        Snap.filter.saturate.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.hueRotate\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the hue-rotate filter\n\t         **\n\t         - angle (number) angle of rotation\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.hueRotate = function (angle) {\n\t            angle = angle || 0;\n\t            return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n\t                angle: angle\n\t            });\n\t        };\n\t        Snap.filter.hueRotate.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.invert\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the invert filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.invert = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            //        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n\t            return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n\t                amount: amount,\n\t                amount2: 1 - amount\n\t            });\n\t        };\n\t        Snap.filter.invert.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.brightness\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the brightness filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.brightness = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n\t                amount: amount\n\t            });\n\t        };\n\t        Snap.filter.brightness.toString = function () {\n\t            return this();\n\t        };\n\t        /*\\\n\t         * Snap.filter.contrast\n\t         [ method ]\n\t         **\n\t         * Returns an SVG markup string for the contrast filter\n\t         **\n\t         - amount (number) amount of filter (`0..1`)\n\t         = (string) filter representation\n\t        \\*/\n\t        Snap.filter.contrast = function (amount) {\n\t            if (amount == null) {\n\t                amount = 1;\n\t            }\n\t            return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n\t                amount: amount,\n\t                amount2: .5 - amount / 2\n\t            });\n\t        };\n\t        Snap.filter.contrast.toString = function () {\n\t            return this();\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n\t        var box = Snap._.box,\n\t            is = Snap.is,\n\t            firstLetter = /^[^a-z]*([tbmlrc])/i,\n\t            toString = function toString() {\n\t            return \"T\" + this.dx + \",\" + this.dy;\n\t        };\n\t        /*\\\n\t         * Element.getAlign\n\t         [ method ]\n\t         **\n\t         * Returns shift needed to align the element relatively to given element.\n\t         * If no elements specified, parent `<svg>` container will be used.\n\t         - el (object) @optional alignment element\n\t         - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t         = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n\t         > Usage\n\t         | el.transform(el.getAlign(el2, \"top\"));\n\t         * or\n\t         | var dy = el.getAlign(el2, \"top\").dy;\n\t        \\*/\n\t        Element.prototype.getAlign = function (el, way) {\n\t            if (way == null && is(el, \"string\")) {\n\t                way = el;\n\t                el = null;\n\t            }\n\t            el = el || this.paper;\n\t            var bx = el.getBBox ? el.getBBox() : box(el),\n\t                bb = this.getBBox(),\n\t                out = {};\n\t            way = way && way.match(firstLetter);\n\t            way = way ? way[1].toLowerCase() : \"c\";\n\t            switch (way) {\n\t                case \"t\":\n\t                    out.dx = 0;\n\t                    out.dy = bx.y - bb.y;\n\t                    break;\n\t                case \"b\":\n\t                    out.dx = 0;\n\t                    out.dy = bx.y2 - bb.y2;\n\t                    break;\n\t                case \"m\":\n\t                    out.dx = 0;\n\t                    out.dy = bx.cy - bb.cy;\n\t                    break;\n\t                case \"l\":\n\t                    out.dx = bx.x - bb.x;\n\t                    out.dy = 0;\n\t                    break;\n\t                case \"r\":\n\t                    out.dx = bx.x2 - bb.x2;\n\t                    out.dy = 0;\n\t                    break;\n\t                default:\n\t                    out.dx = bx.cx - bb.cx;\n\t                    out.dy = 0;\n\t                    break;\n\t            }\n\t            out.toString = toString;\n\t            return out;\n\t        };\n\t        /*\\\n\t         * Element.align\n\t         [ method ]\n\t         **\n\t         * Aligns the element relatively to given one via transformation.\n\t         * If no elements specified, parent `<svg>` container will be used.\n\t         - el (object) @optional alignment element\n\t         - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n\t         = (object) this element\n\t         > Usage\n\t         | el.align(el2, \"top\");\n\t         * or\n\t         | el.align(\"middle\");\n\t        \\*/\n\t        Element.prototype.align = function (el, way) {\n\t            return this.transform(\"...\" + this.getAlign(el, way));\n\t        };\n\t    });\n\t\n\t    // Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n\t    //\n\t    // Licensed under the Apache License, Version 2.0 (the \"License\");\n\t    // you may not use this file except in compliance with the License.\n\t    // You may obtain a copy of the License at\n\t    //\n\t    // http://www.apache.org/licenses/LICENSE-2.0\n\t    //\n\t    // Unless required by applicable law or agreed to in writing, software\n\t    // distributed under the License is distributed on an \"AS IS\" BASIS,\n\t    // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t    // See the License for the specific language governing permissions and\n\t    // limitations under the License.\n\t    Snap.plugin(function (Snap, Element, Paper, glob) {\n\t        // Colours are from https://www.materialui.co\n\t        var red = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n\t            pink = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n\t            purple = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n\t            deeppurple = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n\t            indigo = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n\t            blue = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n\t            lightblue = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n\t            cyan = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n\t            teal = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n\t            green = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n\t            lightgreen = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n\t            lime = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n\t            yellow = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n\t            amber = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n\t            orange = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n\t            deeporange = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n\t            brown = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n\t            grey = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n\t            bluegrey = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n\t        /*\\\n\t         * Snap.mui\n\t         [ property ]\n\t         **\n\t         * Contain Material UI colours.\n\t         | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n\t         # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n\t        \\*/\n\t        Snap.mui = {};\n\t        /*\\\n\t         * Snap.flat\n\t         [ property ]\n\t         **\n\t         * Contain Flat UI colours.\n\t         | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n\t         # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n\t        \\*/\n\t        Snap.flat = {};\n\t        function saveColor(colors) {\n\t            colors = colors.split(/(?=#)/);\n\t            var color = new String(colors[5]);\n\t            color[50] = colors[0];\n\t            color[100] = colors[1];\n\t            color[200] = colors[2];\n\t            color[300] = colors[3];\n\t            color[400] = colors[4];\n\t            color[500] = colors[5];\n\t            color[600] = colors[6];\n\t            color[700] = colors[7];\n\t            color[800] = colors[8];\n\t            color[900] = colors[9];\n\t            if (colors[10]) {\n\t                color.A100 = colors[10];\n\t                color.A200 = colors[11];\n\t                color.A400 = colors[12];\n\t                color.A700 = colors[13];\n\t            }\n\t            return color;\n\t        }\n\t        Snap.mui.red = saveColor(red);\n\t        Snap.mui.pink = saveColor(pink);\n\t        Snap.mui.purple = saveColor(purple);\n\t        Snap.mui.deeppurple = saveColor(deeppurple);\n\t        Snap.mui.indigo = saveColor(indigo);\n\t        Snap.mui.blue = saveColor(blue);\n\t        Snap.mui.lightblue = saveColor(lightblue);\n\t        Snap.mui.cyan = saveColor(cyan);\n\t        Snap.mui.teal = saveColor(teal);\n\t        Snap.mui.green = saveColor(green);\n\t        Snap.mui.lightgreen = saveColor(lightgreen);\n\t        Snap.mui.lime = saveColor(lime);\n\t        Snap.mui.yellow = saveColor(yellow);\n\t        Snap.mui.amber = saveColor(amber);\n\t        Snap.mui.orange = saveColor(orange);\n\t        Snap.mui.deeporange = saveColor(deeporange);\n\t        Snap.mui.brown = saveColor(brown);\n\t        Snap.mui.grey = saveColor(grey);\n\t        Snap.mui.bluegrey = saveColor(bluegrey);\n\t        Snap.flat.turquoise = \"#1abc9c\";\n\t        Snap.flat.greensea = \"#16a085\";\n\t        Snap.flat.sunflower = \"#f1c40f\";\n\t        Snap.flat.orange = \"#f39c12\";\n\t        Snap.flat.emerland = \"#2ecc71\";\n\t        Snap.flat.nephritis = \"#27ae60\";\n\t        Snap.flat.carrot = \"#e67e22\";\n\t        Snap.flat.pumpkin = \"#d35400\";\n\t        Snap.flat.peterriver = \"#3498db\";\n\t        Snap.flat.belizehole = \"#2980b9\";\n\t        Snap.flat.alizarin = \"#e74c3c\";\n\t        Snap.flat.pomegranate = \"#c0392b\";\n\t        Snap.flat.amethyst = \"#9b59b6\";\n\t        Snap.flat.wisteria = \"#8e44ad\";\n\t        Snap.flat.clouds = \"#ecf0f1\";\n\t        Snap.flat.silver = \"#bdc3c7\";\n\t        Snap.flat.wetasphalt = \"#34495e\";\n\t        Snap.flat.midnightblue = \"#2c3e50\";\n\t        Snap.flat.concrete = \"#95a5a6\";\n\t        Snap.flat.asbestos = \"#7f8c8d\";\n\t        /*\\\n\t         * Snap.importMUIColors\n\t         [ method ]\n\t         **\n\t         * Imports Material UI colours into global object.\n\t         | Snap.importMUIColors();\n\t         | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n\t         # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n\t        \\*/\n\t        Snap.importMUIColors = function () {\n\t            for (var color in Snap.mui) {\n\t                if (Snap.mui.hasOwnProperty(color)) {\n\t                    window[color] = Snap.mui[color];\n\t                }\n\t            }\n\t        };\n\t    });\n\t\n\t    return Snap;\n\t});\n\t}.call(window));\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// intro.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 414f27732772d4ecbeae","const\n    Snap = require(`imports-loader?this=>window,fix=>module.exports=0!snapsvg/dist/snap.svg.js`);\n\nconst margin = 54,\n    arr = [0, 1, 2, 3],\n    w = $(window).width(),\n    h = $(window).height(),\n    iw = w / 4,\n    ih = h / 4;\n\nfunction shuffle(a) {\n    for (let i = a.length; i; i--) {\n        let j = Math.floor(Math.random() * i);\n        [a[i - 1], a[j]] = [a[j], a[i - 1]];\n    }\n}\n\nfunction intro_start() {\n\n\n    let s = Snap('#intrologo');\n\n    s\n        .attr({viewBox: [0, 0, w, h].join(',')})\n        .attr('height', h)\n        .attr('width', w);\n\n\n    let groups = s.selectAll('.gr');\n\n    function sh() {\n        shuffle(arr);\n\n        groups.forEach(function (elem, i) {\n            let a = arr[i],\n                matrix = new Snap.Matrix(),\n                hh = margin + ih * a,\n                ww = margin + iw * i + (a * 30);\n            matrix.scale(.8);\n\n            if (hh > h * 0.9 && i == 0) {\n                hh = hh - 300;\n            }\n\n            matrix.translate(ww, hh);\n\n\n            elem.attr({transform: matrix})\n\n\n        });\n    }\n\n    sh();\n\n    s.attr('class', 'show');\n    var curindex = 0;\n    $('.intro__section').click(function () {\n        curindex = curindex + 1;\n\n\n        var\n            photos = intro_content.photos,\n            lead = intro_content.lead,\n            photo = $('.intro__img'),\n            text = $('.intro__section h1 span');\n\n\n        if (typeof photos[curindex] === 'undefined') {\n            curindex = 0;\n        }\n\n        var img = new Image();\n        img.src = photos[curindex]['full'];\n\n        img.onload = function () {\n            photo.attr('src', img.src)\n        };\n\n\n        text.text(lead[curindex]['content'])\n\n        sh();\n    });\n\n\n}\n$(document).ready(function () {\n    intro_start();\n});\n\n\n// WEBPACK FOOTER //\n// ./assets/js/intro.js","// Snap.svg 0.5.0\n//\n// Copyright (c) 2013 – 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// build: 2017-02-06\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.5.0 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = \"0.5.0\",\n        has = \"hasOwnProperty\",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = \"*\",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != \"undefined\") {\n                    return this[i];\n                }\n            }\n        },\n        objtos = Object.prototype.toString,\n        Str = String,\n        isArray = Array.isArray || function (ar) {\n            return ar instanceof Array || objtos.call(ar) == \"[object Array]\";\n        };\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if (\"zIndex\" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if (\"zIndex\" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = isArray(name) ? name : name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    /*\\\n     * eve.separator\n     [ method ]\n\n     * If for some reasons you don’t like default separators (`.` or `/`) you can specify yours\n     * here. Be aware that if you pass a string longer than one character it will be treated as\n     * a list of characters.\n\n     - separator (string) new separator. Empty string resets to default: `.` or `/`.\n    \\*/\n    eve.separator = function (sep) {\n        if (sep) {\n            sep = Str(sep).replace(/(?=[\\.\\^\\]\\[\\-])/g, \"\\\\\");\n            sep = \"[\" + sep + \"]\";\n            separator = new RegExp(sep);\n        } else {\n            separator = /[\\.\\/]/;\n        }\n    };\n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on(\"*.under.*\", f);\n     | eve(\"mouse.under.floor\"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     - name (array) if you don’t want to use separators, you can use array of strings\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on(\"mouse\", eatIt)(2);\n     | eve.on(\"mouse\", scream);\n     | eve.on(\"mouse\", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        if (typeof f != \"function\") {\n            return function () {};\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = isArray(name) ? name : Str(name).split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f(\"click\", 1, 2);\n     | eve.on(\"click\", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        var cur = isArray(current_event) ? current_event.join(\".\") : current_event;\n        if (subname) {\n            return new RegExp(\"(?:\\\\.|\\\\/|^)\" + subname + \"(?:\\\\.|\\\\/|$)\").test(cur);\n        }\n        return cur;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return isArray(current_event) ? current_event : current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = isArray(name) ? (isArray(name[0]) ? name : [name]) : Str(name).split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = isArray(name) ? name : Str(name).split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events],\n            inodes = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                        inodes.unshift({\n                            n: e,\n                            name: names[i]\n                        });\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                        inodes.unshift({\n                            n: e,\n                            name: key\n                        });\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n        // prune inner nodes in path\n        prune: for (i = 0, ii = inodes.length; i < ii; i++) {\n            e = inodes[i];\n            for (key in e.n[e.name].f) {\n                // not empty (has listeners)\n                continue prune;\n            }\n            for (key in e.n[e.name].n) {\n                // not empty (has children)\n                continue prune;\n            }\n            // is empty\n            delete e.n[e.name];\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once(\"login\", f);\n     | eve(\"login\"); // triggers f\n     | eve(\"login\"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.off(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return \"You are running Eve \" + version;\n    };\n    (typeof module != \"undefined\" && module.exports) ? (module.exports = eve) : (typeof define === \"function\" && define.amd ? (define(\"eve\", [], function() { return eve; })) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (typeof define == \"function\" && define.amd) {\n        // Define as an anonymous module\n        define([\"eve\"], function (eve) {\n            return factory(glob, eve);\n        });\n    } else if (typeof exports != \"undefined\") {\n        // Next for Node.js or CommonJS\n        var eve = require(\"eve\");\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16, new Date().getTime());\n                           return true;\n                       },\n    requestID,\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == \"[object Array]\";\n    },\n    idgen = 0,\n    idprefix = \"M\" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve(\"mina.stop.\" + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n        frame();\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function (timeStamp) {\n        // Manual invokation?\n        if (!timeStamp) {\n            // Frame loop stopped?\n            if (!requestID) {\n                // Start frame loop...\n                requestID = requestAnimFrame(frame);\n            }\n            return;\n        }\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve(\"mina.finish.\" + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        requestID = len ? requestAnimFrame(frame) : false;\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in general case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && frame();\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation's id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < 1 / p) {\n            l = s * n * n;\n        } else {\n            if (n < 2 / p) {\n                n -= 1.5 / p;\n                l = s * n * n + .75;\n            } else {\n                if (n < 2.5 / p) {\n                    n -= 2.25 / p;\n                    l = s * n * n + .9375;\n                } else {\n                    n -= 2.625 / p;\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == \"undefined\" ? function () {} : eve);\n\n// Copyright (c) 2013 - 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = \"0.5.1\";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, \"array\") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            // try {\n                w = glob.doc.querySelector(String(w));\n                return wrap(w);\n            // } catch (e) {\n                // return null;\n            // }\n        }\n    }\n    w = w == null ? \"100%\" : w;\n    h = h == null ? \"100%\" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return \"Snap v\" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = \"hasOwnProperty\",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = \"\",\n    S = \" \",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\(['\"]?([^\\)]+?)['\"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = \"S\" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = \"http://www.w3.org/1999/xlink\",\n    xmlns = \"http://www.w3.org/2000/svg\",\n    hub = {},\n    /*\\\n     * Snap.url\n     [ method ]\n     **\n     * Wraps path into `\"url('<path>')\"`.\n     - value (string) path\n     = (string) wrapped path\n    \\*/\n    URL = Snap.url = function (url) {\n        return \"url('#\" + url + \"')\";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == \"#text\") {\n            el = glob.doc.createTextNode(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (el == \"#comment\") {\n            el = glob.doc.createComment(attr.text || attr[\"#text\"] || \"\");\n        }\n        if (typeof el == \"string\") {\n            el = $(el);\n        }\n        if (typeof attr == \"string\") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == \"xlink:\") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == \"xml:\") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == \"text\") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == \"xlink:\") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == \"xml:\") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if (\"text\" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = \"xlink:\";\n        } else {\n            name = \"\";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == \"finite\") {\n        return isFinite(o);\n    }\n    if (type == \"array\" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  type == \"null\" && o === null ||\n            type == typeof o && o !== null ||\n            type == \"object\" && o === Object(o) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to \"M10,20h40v50h-40z\"\n | paper.path(Snap.format(\"M{x},{y}h{dim.width}v{dim.height}h{dim['negative width']}z\", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         \"negative width\": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[('|\")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or [\"xxxxx\"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == \"function\" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + \"\";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == \"function\" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join(\"\\u2400\"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + \" \\xd7 \" + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan;\n            bestLength = scanLength;\n            bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before;\n            bestLength = beforeLength;\n            bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after;\n            bestLength = afterLength;\n            bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, \"finite\") ? tolerance : 10;\n    if (is(values, \"array\")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can't be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf(\"-\") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    if (colour == \"none\") {\n        return {r: -1, g: -1, b: -1, hex: \"none\", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == \"#\") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == \"rgba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsba\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == \"%\" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == \"%\" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == \"%\" && (blue /= 100);\n            (values[0].slice(-3) == \"deg\" || values[0].slice(-1) == \"\\xb0\") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == \"hsla\" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == \"%\" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = \"#\" + (16777216 | blue | green << 8 | red << 16).toString(16).slice(1);\n        rgb.opacity = is(opacity, \"finite\") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: \"none\", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, \"finite\")) {\n        var round = math.round;\n        return \"rgba(\" + [round(r), round(g), round(b), +o.toFixed(2)] + \")\";\n    }\n    return \"#\" + (16777216 | b | g << 8 | r << 16).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName(\"head\")[0] || glob.doc.getElementsByTagName(\"svg\")[0],\n        red = \"rgb(255, 0, 0)\";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == \"red\") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue(\"color\");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return \"hsb(\" + [this.h, this.s, this.b] + \")\";\n},\nhsltoString = function () {\n    return \"hsl(\" + [this.h, this.s, this.l] + \")\";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            \"rgba(\" + [this.r, this.g, this.b, this.opacity] + \")\";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, \"object\") && \"r\" in r && \"g\" in r && \"b\" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n\n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, \"finite\") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, \"finite\") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color's component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can't be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"b\" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, \"object\") && \"h\" in clr && \"s\" in clr && \"l\" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, \"string\")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, \"object\") && \"r\" in clr && \"g\" in clr && \"b\" in clr && !(\"error\" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: \"none\"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"b\" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, \"object\") && \"h\" in h && \"s\" in h && \"l\" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = h % 360 / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = C == 0 ? null :\n        V == r ? (g - b) / C :\n        V == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = C == 0 ? null :\n        M == r ? (g - b) / C :\n        M == g ? (b - r) / C + 2 :\n                 (r - g) / C + 4;\n    H = (H + 360) % 6 * 60 / 360;\n    L = (M + m) / 2;\n    S = C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L);\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n\n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, \"array\") && is(pathString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == \"m\" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = \"l\";\n                b = b == \"m\" ? \"l\" : \"L\";\n            }\n            if (name == \"o\" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == \"r\") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, \"array\") && is(TString[0], \"array\")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == \"rotate\" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == \"scale\") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == \"skewX\") {\n            res.push([\"m\", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == \"skewY\") {\n            res.push([\"m\", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == \"t\" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == \"t\" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == \"r\") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == \"s\") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == \"m\" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) ||\n            el.node.parentNode && wrap(el.node.parentNode) ||\n            Snap.select(\"svg\") ||\n            Snap(0, 0),\n        pdefs = p.select(\"defs\"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make(\"defs\", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select(\"svg\");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(\".svg---mgr\");\n    if (!mgr) {\n        mgr = $(\"rect\");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, \"class\": \"svg---mgr\", fill: \"none\"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case \"rect\":\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        case \"image\":\n            set(\"width\", getW);\n            set(\"height\", getH);\n        case \"text\":\n            set(\"x\", getW);\n            set(\"y\", getH);\n        break;\n        case \"circle\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"r\", getW);\n        break;\n        case \"ellipse\":\n            set(\"cx\", getW);\n            set(\"cy\", getH);\n            set(\"rx\", getW);\n            set(\"ry\", getH);\n        break;\n        case \"line\":\n            set(\"x1\", getW);\n            set(\"x2\", getW);\n            set(\"y1\", getH);\n            set(\"y2\", getH);\n        break;\n        case \"marker\":\n            set(\"refX\", getW);\n            set(\"markerWidth\", getW);\n            set(\"refY\", getH);\n            set(\"markerHeight\", getH);\n        break;\n        case \"radialGradient\":\n            set(\"fx\", getW);\n            set(\"fy\", getH);\n        break;\n        case \"tspan\":\n            set(\"dx\", getW);\n            set(\"dy\", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, \"$1\\\\:\");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, \"array\")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == \"set\") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != \"svg\" && !node.ownerSVGElement || el.type == \"svg\" && (!node.parentNode || \"ownerSVGElement\" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr(\"fill\", \"red\");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == \"g\") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: \"#fc0\",\n     |     stroke: \"#000\",\n     |     strokeWidth: 2, // CamelCase...\n     |     \"fill-opacity\": 0.5, // or dash-separated names\n     |     width: \"*=2\" // prefixed values\n     | });\n     | console.log(el.attr(\"fill\")); // #fc0\n     * Prefixed values in format `\"+=10\"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `\"+=2em\"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, \"string\")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve(\"snap.util.getattr.\" + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve(\"snap.util.attr.\" + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement(\"div\");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = \"<svg>\" + svg + \"</svg>\";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName(\"svg\")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == \"string\") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName && w.tagName.toLowerCase() == \"svg\") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName(\"desc\")[0];\n        defs = w.getElementsByTagName(\"defs\")[0];\n        if (!desc) {\n            desc = $(\"desc\");\n            desc.appendChild(doc.createTextNode(\"Created with Snap\"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $(\"defs\");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make(\"svg\", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"svg\") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == \"object\" && dom.type == \"image/svg+xml\") {\n        return new Paper(dom.contentDocument.getElementsByTagName(\"svg\")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el(\"circle\").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el(\"circle\", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on(\"snap.util.getattr\", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return \"-\" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    \"alignment-baseline\": 0,\n    \"baseline-shift\": 0,\n    \"clip\": 0,\n    \"clip-path\": 0,\n    \"clip-rule\": 0,\n    \"color\": 0,\n    \"color-interpolation\": 0,\n    \"color-interpolation-filters\": 0,\n    \"color-profile\": 0,\n    \"color-rendering\": 0,\n    \"cursor\": 0,\n    \"direction\": 0,\n    \"display\": 0,\n    \"dominant-baseline\": 0,\n    \"enable-background\": 0,\n    \"fill\": 0,\n    \"fill-opacity\": 0,\n    \"fill-rule\": 0,\n    \"filter\": 0,\n    \"flood-color\": 0,\n    \"flood-opacity\": 0,\n    \"font\": 0,\n    \"font-family\": 0,\n    \"font-size\": 0,\n    \"font-size-adjust\": 0,\n    \"font-stretch\": 0,\n    \"font-style\": 0,\n    \"font-variant\": 0,\n    \"font-weight\": 0,\n    \"glyph-orientation-horizontal\": 0,\n    \"glyph-orientation-vertical\": 0,\n    \"image-rendering\": 0,\n    \"kerning\": 0,\n    \"letter-spacing\": 0,\n    \"lighting-color\": 0,\n    \"marker\": 0,\n    \"marker-end\": 0,\n    \"marker-mid\": 0,\n    \"marker-start\": 0,\n    \"mask\": 0,\n    \"opacity\": 0,\n    \"overflow\": 0,\n    \"pointer-events\": 0,\n    \"shape-rendering\": 0,\n    \"stop-color\": 0,\n    \"stop-opacity\": 0,\n    \"stroke\": 0,\n    \"stroke-dasharray\": 0,\n    \"stroke-dashoffset\": 0,\n    \"stroke-linecap\": 0,\n    \"stroke-linejoin\": 0,\n    \"stroke-miterlimit\": 0,\n    \"stroke-opacity\": 0,\n    \"stroke-width\": 0,\n    \"text-anchor\": 0,\n    \"text-decoration\": 0,\n    \"text-rendering\": 0,\n    \"unicode-bidi\": 0,\n    \"visibility\": 0,\n    \"word-spacing\": 0,\n    \"writing-mode\": 0\n};\n\neve.on(\"snap.util.attr\", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(\".\") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return \"-\" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, \"function\")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, \"object\")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + \"=\" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join(\"&\");\n        }\n        req.open(postData ? \"POST\" : \"GET\", url, true);\n        if (postData) {\n            req.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n        }\n        if (callback) {\n            eve.once(\"snap.ajax.\" + id + \".0\", callback);\n            eve.once(\"snap.ajax.\" + id + \".200\", callback);\n            eve.once(\"snap.ajax.\" + id + \".304\", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve(\"snap.ajax.\" + id + \".\" + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: \"#f00\"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == \"svg\") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = \"hasOwnProperty\",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (this.type == \"tspan\") {\n            return Snap._.box(this.node.getClientRects().item(0));\n        }\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == \"use\") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr(\"x\") || 0, el.attr(\"y\") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr(\"xlink:href\");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf(\"#\") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == \"linearGradient\" || el.type == \"radialGradient\") {\n                tstr = el.node.getAttribute(\"gradientTransform\");\n            } else if (el.type == \"pattern\") {\n                tstr = el.node.getAttribute(\"patternTransform\");\n            } else {\n                tstr = el.node.getAttribute(\"transform\");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || \"\");\n            }\n            if (is(tstr, \"array\")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != \"svg\" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == \"linearGradient\" || this.type == \"radialGradient\") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == \"pattern\") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element's parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == \"set\") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == \"set\") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It's a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == \"linearGradient\" || this.type == \"radialGradient\" ||\n            this.type == \"pattern\") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make(\"use\", this.node.parentNode);\n        }\n        $(use.node, {\n            \"xlink:href\": \"#\" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll(\"*\"),\n            it,\n            url = /^\\s*url\\((\"|'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = Snap.url(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, \"xlink:href\");\n            if (val && val.charAt() == \"#\") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr(\"xlink:href\", \"#\" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, \"fill\");\n            urltest(it, \"stroke\");\n            urltest(it, \"filter\");\n            urltest(it, \"mask\");\n            urltest(it, \"clip-path\");\n            linktest(it);\n            var oldid = $(it.node, \"id\");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, \"id\")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path(\"M10-5-10,15M15,0,0,15M0-5-20,15\").attr({\n     |         fill: \"none\",\n     |         stroke: \"#bada55\",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make(\"pattern\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: \"userSpaceOnUse\",\n            id: p.id,\n            viewBox: [x, y, width, height].join(\" \")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn't it assume the element's current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn't they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make(\"marker\", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, \"object\") && \"x\" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(\" \"),\n            markerWidth: width,\n            markerHeight: height,\n            orient: \"auto\",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: \"#000\"})\n     |          .data(\"i\", i)\n     |          .click(function () {\n     |             alert(this.data(\"i\"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve(\"snap.data.get.\" + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, \"object\")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve(\"snap.data.get.\" + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve(\"snap.data.set.\" + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML's `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element's contents, equivalent to HTML's `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? \"<\" + this.type : \"\",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += \" \" + attr[i].name + '=\"' +\n                            attr[i].value.replace(/\"/g, '\\\\\"') + '\"';\n                }\n            }\n            if (chld.length) {\n                type && (res += \">\");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += \"</\" + this.type + \">\");\n            } else {\n                type && (res += \"/>\");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format('<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"{width}\" height=\"{height}\" viewBox=\"{x} {y} {width} {height}\">{contents}</svg>', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2016 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        has = \"hasOwnProperty\";\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once(\"mina.finish.\" + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = attrs.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, \"array\") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve(\"snap.animcreated.\" + el.id, anim);\n        eve.once(\"mina.finish.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once(\"mina.stop.\" + anim.id, function () {\n            eve.off(\"mina.*.\" + anim.id);\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = \"\";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == \"[object SVGMatrix]\") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.add(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + b * this.c,\n                bNew = a * this.b + b * this.d;\n            this.e += e * this.a + f * this.c;\n            this.f += e * this.b + f * this.d;\n            this.c = c * this.a + d * this.c;\n            this.d = c * this.b + d * this.d;\n\n            this.a = aNew;\n            this.b = bNew;\n            return this;\n        };\n        /*\\\n         * Matrix.multLeft\n         [ method ]\n         **\n         * Multiplies a passed affine transform to the left: M * this.\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        Matrix.prototype.multLeft = function (a, b, c, d, e, f) {\n            if (a && a instanceof Matrix) {\n                return this.multLeft(a.a, a.b, a.c, a.d, a.e, a.f);\n            }\n            var aNew = a * this.a + c * this.b,\n                cNew = a * this.c + c * this.d,\n                eNew = a * this.e + c * this.f + e;\n            this.b = b * this.a + d * this.b;\n            this.d = b * this.c + d * this.d;\n            this.f = b * this.e + d * this.f + f;\n\n            this.a = aNew;\n            this.c = cNew;\n            this.e = eNew;\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            this.e += x * this.a + y * this.c;\n            this.f += x * this.b + y * this.d;\n            return this;\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.translate(cx, cy);\n            this.a *= x;\n            this.b *= x;\n            this.c *= y;\n            this.d *= y;\n            (cx || cy) && this.translate(-cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.skewX\n         [ method ]\n         **\n         * Skews the matrix along the x-axis\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skewX = function (x) {\n            return this.skew(x, 0);\n        };\n        /*\\\n         * Matrix.skewY\n         [ method ]\n         **\n         * Skews the matrix along the y-axis\n         - y (number) Angle to skew along the y-axis (in degrees).\n        \\*/\n        matrixproto.skewY = function (y) {\n            return this.skew(0, y);\n        };\n        /*\\\n         * Matrix.skew\n         [ method ]\n         **\n         * Skews the matrix\n         - y (number) Angle to skew along the y-axis (in degrees).\n         - x (number) Angle to skew along the x-axis (in degrees).\n        \\*/\n        matrixproto.skew = function (x, y) {\n            x = x || 0;\n            y = y || 0;\n            x = Snap.rad(x);\n            y = Snap.rad(y);\n            var c = math.tan(x).toFixed(9);\n            var b = math.tan(y).toFixed(9);\n            return this.add(1, b, c, 1, 0, 0);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return \"matrix(\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + \")\";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.b], [this.c, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? \"t\" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) +\n                        (s.rotate ? \"r\" + [+s.rotate.toFixed(4), 0, 0] : E) +\n                        (s.scalex != 1 || s.scaley != 1 ? \"s\" + [s.scalex, s.scaley, 0, 0] : E);\n            } else {\n                return \"m\" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = \"hasOwnProperty\",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\((['\"]?)([^)]+)\\1\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = \"\";\n    /*\\\n     * Snap.deurl\n     [ method ]\n     **\n     * Unwraps path from `\"url(<path>)\"`.\n     - value (string) url path\n     = (string) unwrapped path\n    \\*/\n    Snap.deurl = function (value) {\n        var res = String(value).match(reURLValue);\n        return res ? res[2] : value;\n    }\n    // Attributes event handlers\n    eve.on(\"snap.util.attr.mask\", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == \"mask\") {\n                var mask = value;\n            } else {\n                mask = make(\"mask\", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on(\"snap.util.attr.clip\", clipIt);\n        eve.on(\"snap.util.attr.clip-path\", clipIt);\n        eve.on(\"snap.util.attr.clipPath\", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            var clip,\n                node = value.node;\n            while (node) {\n                if (node.nodeName === \"clipPath\") {\n                    clip = new Element(node);\n                    break;\n                }\n                if (node.nodeName === \"svg\") {\n                    clip = undefined;\n                    break;\n                }\n                node = node.parentNode;\n            }\n            if (!clip) {\n                clip = make(\"clipPath\", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                \"clip-path\": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == \"radialGradient\" ||\n                value.node.firstChild.tagName == \"linearGradient\" ||\n                value.node.firstChild.tagName == \"pattern\")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == \"radialGradient\" || value.type == \"linearGradient\"\n                   || value.type == \"pattern\") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on(\"snap.util.attr.fill\", fillStroke(\"fill\"));\n    eve.on(\"snap.util.attr.stroke\", fillStroke(\"stroke\"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on(\"snap.util.grad.parse\", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split(\"-\");\n        stops = stops.map(function (el) {\n            el = el.split(\":\");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        var len = stops.length,\n            start = 0,\n            j = 0;\n        function seed(i, end) {\n            var step = (end - start) / (i - j);\n            for (var k = j; k < i; k++) {\n                stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n            }\n            j = i;\n            start = end;\n        }\n        len--;\n        for (var i = 0; i < len; i++) if (\"offset\" in stops[i]) {\n            seed(i, stops[i].offset);\n        }\n        stops[len].offset = stops[len].offset || 100;\n        seed(len, stops[len].offset);\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on(\"snap.util.attr.d\", function (value) {\n        eve.stop();\n        if (is(value, \"array\") && is(value[0], \"array\")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.#text\", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on(\"snap.util.attr.path\", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on(\"snap.util.attr.class\", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on(\"snap.util.attr.viewBox\", function (value) {\n        var vb;\n        if (is(value, \"object\") && \"x\" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(\" \");\n        } else if (is(value, \"array\")) {\n            vb = value.join(\" \");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.transform\", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on(\"snap.util.attr.r\", function (value) {\n        if (this.type == \"rect\") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.textpath\", function (value) {\n        eve.stop();\n        if (this.type == \"text\") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, \"string\")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr(\"id\");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({\"xlink:href\": \"#\" + id});\n                } else {\n                    tp = $(\"textPath\", {\n                        \"xlink:href\": \"#\" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on(\"snap.util.attr.text\", function (value) {\n        if (this.type == \"text\") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $(\"tspan\");\n                    if (is(chunk, \"array\")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += \"px\";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on(\"snap.util.attr.fontSize\", setFontSize)(-1);\n    eve.on(\"snap.util.attr.font-size\", setFontSize)(-1);\n\n\n    eve.on(\"snap.util.getattr.transform\", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on(\"snap.util.getattr.textpath\", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue(\"marker-\" + end);\n                if (style == \"none\") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = \"marker\" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == \"\" || !value) {\n                    this.node.style[name] = \"none\";\n                    return;\n                }\n                if (value.type == \"marker\") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on(\"snap.util.getattr.marker-end\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.markerEnd\", getter(\"end\"))(-1);\n        eve.on(\"snap.util.getattr.marker-start\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.markerStart\", getter(\"start\"))(-1);\n        eve.on(\"snap.util.getattr.marker-mid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.getattr.markerMid\", getter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.marker-end\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.markerEnd\", setter(\"end\"))(-1);\n        eve.on(\"snap.util.attr.marker-start\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.markerStart\", setter(\"start\"))(-1);\n        eve.on(\"snap.util.attr.marker-mid\", setter(\"mid\"))(-1);\n        eve.on(\"snap.util.attr.markerMid\", setter(\"mid\"))(-1);\n    }());\n    eve.on(\"snap.util.getattr.r\", function () {\n        if (this.type == \"rect\" && $(this.node, \"rx\") == $(this.node, \"ry\")) {\n            eve.stop();\n            return $(this.node, \"rx\");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == \"tspan\") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on(\"snap.util.getattr.text\", function () {\n        if (this.type == \"text\" || this.type == \"tspan\") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.#text\", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on(\"snap.util.getattr.fill\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.fill\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.stroke\", function (internal) {\n        if (internal) {\n            return;\n        }\n        eve.stop();\n        var value = eve(\"snap.util.getattr.stroke\", this, true).firstDefined();\n        return Snap(Snap.deurl(value)) || value;\n    })(-1);\n    eve.on(\"snap.util.getattr.viewBox\", function () {\n        eve.stop();\n        var vb = $(this.node, \"viewBox\");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.points\", function () {\n        var p = $(this.node, \"points\");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on(\"snap.util.getattr.path\", function () {\n        var p = $(this.node, \"d\");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on(\"snap.util.getattr.class\", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on(\"snap.util.getattr.fontSize\", getFontSize)(-1);\n    eve.on(\"snap.util.getattr.font-size\", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while (clazz = classes[j++]) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(\" \");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || \"\").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while (clazz = classes[j++]) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(\" \");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            \"+\": function (x, y) {\n                    return x + y;\n                },\n            \"-\": function (x, y) {\n                    return x - y;\n                },\n            \"/\": function (x, y) {\n                    return x / y;\n                },\n            \"*\": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on(\"snap.util.attr\", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(\".\") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || \"\",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, \"object\") && x == \"[object Object]\") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el(\"rect\", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el(\"circle\", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement(\"img\"),\n                body = glob.doc.body;\n            img.style.cssText = \"position:absolute;left:-9999em;top:-9999em\";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image(\"apple.png\", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el(\"image\");\n        if (is(src, \"object\") && \"src\" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                \"xlink:href\": src,\n                preserveAspectRatio: \"none\"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, \"object\") && cx == \"[object Object]\") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el(\"ellipse\", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path's definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | \"M10,20L30,40\"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href=\"http://www.w3.org/TR/SVG/paths.html#PathData\" title=\"Details of a path's data attribute's format are described in the SVG specification.\">SVG path string format</a> or <a href=\"https://developer.mozilla.org/en/SVG/Tutorial/Paths\">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href=\"http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline\">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path(\"M10 10L90 90\");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, \"object\") && !is(d, \"array\")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el(\"path\", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el(\"g\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, \"object\") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el(\"svg\", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el(\"mask\");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, \"object\")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: \"userSpaceOnUse\"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el(\"pattern\", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr(\"id\")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr(\"id\");\n            }\n            if (String(id).charAt() == \"#\") {\n                id = id.substring(1);\n            }\n            return this.el(\"use\", {\"xlink:href\": \"#\" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el(\"symbol\", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, \"Snap\");\n     | var t2 = paper.text(50, 50, [\"S\",\"n\",\"a\",\"p\"]);\n     | // Text path usage\n     | t1.attr({textpath: \"M10,10L100,100\"});\n     | // or\n     | var pth = paper.path(\"M10,10L100,100\");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, \"object\")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || \"\"\n            };\n        }\n        return this.el(\"text\", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, \"object\")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el(\"line\", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polyline\", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, \"object\") && !is(points, \"array\")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el(\"polygon\", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients' helpers\n        /*\\\n         * Element.stops\n         [ method ]\n         **\n         * Only for gradients!\n         * Returns array of gradient stops elements.\n         = (array) the stops array.\n        \\*/\n        function Gstops() {\n            return this.selectAll(\"stop\");\n        }\n        /*\\\n         * Element.addStop\n         [ method ]\n         **\n         * Only for gradients!\n         * Adds another stop to the gradient.\n         - color (string) stops color\n         - offset (number) stops offset 0..100\n         = (object) gradient element\n        \\*/\n        function GaddStop(color, offset) {\n            var stop = $(\"stop\"),\n                attr = {\n                    offset: +offset + \"%\"\n                };\n            color = Snap.color(color);\n            attr[\"stop-color\"] = color.hex;\n            if (color.opacity < 1) {\n                attr[\"stop-opacity\"] = color.opacity;\n            }\n            $(stop, attr);\n            var stops = this.stops(),\n                inserted;\n            for (var i = 0; i < stops.length; i++) {\n                var stopOffset = parseFloat(stops[i].attr(\"offset\"));\n                if (stopOffset > offset) {\n                    this.node.insertBefore(stop, stops[i].node);\n                    inserted = true;\n                    break;\n                }\n            }\n            if (!inserted) {\n                this.node.appendChild(stop);\n            }\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == \"linearGradient\") {\n                var x1 = $(this.node, \"x1\") || 0,\n                    x2 = $(this.node, \"x2\") || 1,\n                    y1 = $(this.node, \"y1\") || 0,\n                    y2 = $(this.node, \"y2\") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        /*\\\n         * Element.setStops\n         [ method ]\n         **\n         * Only for gradients!\n         * Updates stops of the gradient based on passed gradient descriptor. See @Ppaer.gradient\n         - str (string) gradient descriptor part after `()`.\n         = (object) gradient element\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         | g.setStops(\"#fff-#000-#f00-#fc0\");\n        \\*/\n        function GsetStops(str) {\n            var grad = str,\n                stops = this.stops();\n            if (typeof str == \"string\") {\n                grad = eve(\"snap.util.grad.parse\", null, \"l(0,0,0,1)\" + str).firstDefined().stops;\n            }\n            if (!Snap.is(grad, \"array\")) {\n                return;\n            }\n            for (var i = 0; i < stops.length; i++) {\n                if (grad[i]) {\n                    var color = Snap.color(grad[i].color),\n                        attr = {\"offset\": grad[i].offset + \"%\"};\n                    attr[\"stop-color\"] = color.hex;\n                    if (color.opacity < 1) {\n                        attr[\"stop-opacity\"] = color.opacity;\n                    }\n                    stops[i].attr(attr);\n                } else {\n                    stops[i].remove();\n                }\n            }\n            for (i = stops.length; i < grad.length; i++) {\n                this.addStop(grad[i].color, grad[i].offset);\n            }\n            return this;\n        }\n        function gradient(defs, str) {\n            var grad = eve(\"snap.util.grad.parse\", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == \"l\") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: \"userSpaceOnUse\"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length;\n            for (var i = 0; i < len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make(\"linearGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            el.setStops = GsetStops;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make(\"radialGradient\", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient(\"l(0, 0, 1, 1)#000-#f00-#fff\");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient(\"L(0, 0, 100, 100)#000-#f00:25-#fff\");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient(\"r(0.5, 0.5, 0.5)#000-#fff\");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement(\"div\"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: \"http://www.w3.org/2000/svg\"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != \"defs\") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = \"hasOwnProperty\",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(\" \")\n        };\n    }\n    function toString() {\n        return this.join(\",\").replace(p2s, \"$1\");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr(\"d\");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = \"\", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == \"M\") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                \"C\" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                \"M\" + O(point.x),\n                                O(point.y) + \"C\" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = 90 - math.atan2(mx - nx, my - ny) * 180 / PI;\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, \"array\")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? \"y\" : \"x\",\n                    cj = abs(dj1.x - dj.x) < .001 ? \"y\" : \"x\",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == \"M\") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == \"C\") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == \"M\") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == \"C\") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [[\"M\", x, y], [\"H\", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0,\n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == \"M\") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                [\"M\", +x + +r, y],\n                [\"l\", w - r * 2, 0],\n                [\"a\", r, r, 0, 0, 1, r, r],\n                [\"l\", 0, h - r * 2],\n                [\"a\", r, r, 0, 0, 1, -r, r],\n                [\"l\", r * 2 - w, 0],\n                [\"a\", r, r, 0, 0, 1, -r, -r],\n                [\"l\", 0, r * 2 - h],\n                [\"a\", r, r, 0, 0, 1, r, -r],\n                [\"z\"]\n            ];\n        }\n        var res = [[\"M\", x, y], [\"l\", w, 0], [\"l\", 0, h], [\"l\", -w, 0], [\"z\"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [[\"M\", x1, y1], [\"A\", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                [\"M\", x, y],\n                [\"m\", 0, -ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, 2 * ry],\n                [\"a\", rx, ry, 0, 1, 1, 0, -2 * ry],\n                [\"z\"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr(\"path\");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return \"M\" + [el.attr(\"x1\") || 0, el.attr(\"y1\") || 0, el.attr(\"x2\"), el.attr(\"y2\")];\n        },\n        polyline: function (el) {\n            return \"M\" + el.attr(\"points\");\n        },\n        polygon: function (el) {\n            return \"M\" + el.attr(\"points\") + \"z\";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, \"array\") || !Snap.is(pathArray && pathArray[0], \"array\")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == \"M\") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push([\"M\", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case \"a\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case \"v\":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case \"m\":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - (j % 2 ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == \"m\") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case \"z\":\n                    x = mx;\n                    y = my;\n                    break;\n                case \"h\":\n                    x += +res[i][len - 1];\n                    break;\n                case \"v\":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, \"array\") || !is(pathArray && pathArray[0], \"array\")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [[\"M\", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == \"M\") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = [\"M\", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == \"M\" &&\n            pathArray[1][0].toUpperCase() == \"R\" &&\n            pathArray[2][0].toUpperCase() == \"Z\";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case \"A\":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case \"V\":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case \"H\":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case \"R\":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case \"O\":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case \"U\":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = [\"U\"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case \"M\":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + (j % 2 ? x : y);\n                        }\n                }\n            } else if (pa0 == \"R\") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = [\"R\"].concat(pa.slice(-2));\n            } else if (pa0 == \"O\") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == \"U\") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = [\"U\"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != \"O\") {\n                switch (r[0]) {\n                    case \"Z\":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case \"H\":\n                        x = r[1];\n                        break;\n                    case \"V\":\n                        y = r[1];\n                        break;\n                    case \"M\":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!rx || !ry) {\n            return [x1, y1, x2, y2, x2, y2];\n        }\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = x * x / (rx * rx) + y * y / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(\",\");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n\n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;\n            bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return [\"C\", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case \"M\":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case \"A\":\n                        path = [\"C\"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case \"S\":\n                        if (pcom == \"C\" || pcom == \"S\") { // In \"S\" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command's control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = [\"C\", nx, ny].concat(path.slice(1));\n                        break;\n                    case \"T\":\n                        if (pcom == \"Q\" || pcom == \"T\") { // In \"T\" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case \"S\".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = [\"C\"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case \"Q\":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = [\"C\"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case \"L\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case \"H\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case \"V\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case \"Z\":\n                        path = [\"C\"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = \"A\"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = \"A\"); // the same as above\n                        pp.splice(i++, 0, [\"C\"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == \"M\" && path2[i][0] != \"M\") {\n                    path2.splice(i, 0, [\"M\", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = \"\", // temporary holder for original path command\n            pcom = \"\"; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != \"C\") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != \"A\" && pfirst == \"C\") pcoms1[i] = \"C\"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != \"C\") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != \"A\" && pfirst == \"C\") {\n                    pcoms2[i] = \"C\";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push([\"C\",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path's total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr(\"d\"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I'm calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr(\"d\"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty(\"x\") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n\tthis.bindings = {};\n        this.length = 0;\n        this.type = \"set\";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == \"function\" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, \"array\") && Snap.is(args[args.length - 1], \"array\")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once(\"snap.animcreated.\" + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    /*\\\n     * Set.remove\n     [ method ]\n     **\n     * Removes all children of the set.\n     *\n     = (object) Set object\n    \\*/\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == \"function\") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    /*\\\n     * Set.attr\n     [ method ]\n     **\n     * Equivalent of @Element.attr.\n     = (object) Set object\n    \\*/\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Inserts set elements after given element.\n     **\n     - element (object) set will be inserted after this element\n     = (object) Set object\n    \\*/\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    /*\\\n     * Set.getBBox\n     [ method ]\n     **\n     * Union of all bboxes of the set. See @Element.getBBox.\n     = (object) bounding box descriptor. See @Element.getBBox.\n    \\*/\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    /*\\\n     * Set.insertAfter\n     [ method ]\n     **\n     * Creates a clone of the set.\n     **\n     = (object) New Set object\n    \\*/\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return \"Snap\\u2018s set\";\n    };\n    setproto.type = \"set\";\n    // export\n    /*\\\n     * Snap.Set\n     [ property ]\n     **\n     * Set constructor.\n    \\*/\n    Snap.Set = Set;\n    /*\\\n     * Snap.set\n     [ method ]\n     **\n     * Creates a set and fills it with list of arguments.\n     **\n     = (object) New Set object\n     | var r = paper.rect(0, 0, 10, 10),\n     |     s1 = Snap.set(), // empty set\n     |     s2 = Snap.set(r, paper.circle(100, 100, 20)); // prefilled set\n    \\*/\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[%a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = \"colour\";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case \"t\": return [l, 0, 0];\n            case \"m\": return [l, 1, 0, 0, 1, 0, 0];\n            case \"r\": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case \"s\": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t1 = t1 || new Snap.Matrix;\n        t2 = t2 || new Snap.Matrix;\n        t1 = Snap.parseTransformString(t1.toTransformString()) || [];\n        t2 = Snap.parseTransformString(t2.toTransformString()) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if (tt1[0] != tt2[0] ||\n                tt1[0].toLowerCase() == \"r\" && (tt1[2] != tt2[2] || tt1[3] != tt2[3]) ||\n                tt1[0].toLowerCase() == \"s\" && (tt1[3] != tt2[3] || tt1[4] != tt2[4])\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [[\"m\", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [[\"m\", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(\" \");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2], clr[3]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = \"[\";\n            a = ['\"' + path[i][0] + '\"'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = \"val[\" + k++ + \"]\";\n            }\n            out += a + \"]\";\n            b[i] = out;\n        }\n        return Function(\"val\", \"return Snap.path.toString.call([\" + b + \"])\");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(obj);\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, \"array\") || !Snap.is(arr2, \"array\")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve(\"snap.util.equal\", this, name, b).firstDefined();\n    };\n    eve.on(\"snap.util.equal\", function (name, b) {\n        var A, B, a = Str(this.attr(name) || \"\"),\n            el = this;\n        if (names[name] == \"colour\") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == \"viewBox\") {\n            A = this.attr(name).vb.split(\" \").map(Number);\n            B = b.split(\" \").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == \"transform\" || name == \"gradientTransform\" || name == \"patternTransform\") {\n            if (typeof b == \"string\") {\n                b = Str(b).replace(/\\.{3}|\\u2026/g, a);\n            }\n            a = this.matrix;\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.transform2matrix(Snap._.svgTransform2string(b), this.getBBox());\n            } else {\n                b = Snap._.transform2matrix(b, this.getBBox());\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == \"d\" || name == \"path\") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == \"points\") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = \"hasOwnProperty\",\n    supportsTouch = \"createTouch\" in glob.doc,\n    events = [\n        \"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\",\n        \"mouseover\", \"mouseup\", \"touchstart\", \"touchmove\", \"touchend\",\n        \"touchcancel\"\n    ],\n    touchMap = {\n        mousedown: \"touchstart\",\n        mousemove: \"touchmove\",\n        mouseup: \"touchend\"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == \"y\" ? \"scrollTop\" : \"scrollLeft\",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? \"documentElement\" : \"body\"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll(\"y\", element),\n                    scrollX = getScroll(\"x\", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll(\"y\"),\n            scrollX = getScroll(\"x\"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = \"none\";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve(\"snap.drag.over.\" + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve(\"snap.drag.move.\" + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve(\"snap.drag.end.\" + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off(\"snap.drag.*.\" + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, \"function\")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap[\"un\" + eventName] =\n            elproto[\"un\" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member's doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element's ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element's drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? \"T\" : \"t\") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on(\"snap.drag.start.\" + el.id, onstart);\n            onmove && eve.on(\"snap.drag.move.\" + el.id, onmove);\n            onend && eve.on(\"snap.drag.end.\" + el.id, onend);\n            eve(\"snap.drag.start.\" + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve(\"snap.draginit.\" + el.id, el, e, x, y);\n        }\n        eve.on(\"snap.draginit.\" + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element's `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on(\"snap.drag.over.\" + this.id, f) : eve.unbind(\"snap.drag.over.\" + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind(\"snap.drag.*.\" + this.id);\n            eve.unbind(\"snap.draginit.\" + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter('<feGaussianBlur stdDeviation=\"2\"/>'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != \"svg\") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $(\"filter\");\n        $(filter, {\n            id: id,\n            filterUnits: \"userSpaceOnUse\"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n\n    eve.on(\"snap.util.getattr.filter\", function () {\n        eve.stop();\n        var p = $(this.node, \"filter\");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on(\"snap.util.attr.filter\", function (value) {\n        if (value instanceof Element && value.type == \"filter\") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == \"none\") {\n            eve.stop();\n            this.node.removeAttribute(\"filter\");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format('\\<feGaussianBlur stdDeviation=\"{def}\"/>', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, .3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (opacity == null) {\n            if (color == null) {\n                opacity = blur;\n                blur = 4;\n                color = \"#000\";\n            } else {\n                opacity = color;\n                color = blur;\n                blur = 4;\n            }\n        }\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format('<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"{blur}\"/><feOffset dx=\"{dx}\" dy=\"{dy}\" result=\"offsetblur\"/><feFlood flood-color=\"{color}\"/><feComposite in2=\"offsetblur\" operator=\"in\"/><feComponentTransfer><feFuncA type=\"linear\" slope=\"{opacity}\"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/></feMerge>', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0\"/>', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"matrix\" values=\"{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0\"/>', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feColorMatrix type=\"saturate\" values=\"{amount}\"/>', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format('<feColorMatrix type=\"hueRotate\" values=\"{angle}\"/>', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type=\"matrix\" values=\"-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0\" color-interpolation-filters=\"sRGB\"/>\n        return Snap.format('<feComponentTransfer><feFuncR type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncG type=\"table\" tableValues=\"{amount} {amount2}\"/><feFuncB type=\"table\" tableValues=\"{amount} {amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\"/><feFuncG type=\"linear\" slope=\"{amount}\"/><feFuncB type=\"linear\" slope=\"{amount}\"/></feComponentTransfer>', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format('<feComponentTransfer><feFuncR type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncG type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/><feFuncB type=\"linear\" slope=\"{amount}\" intercept=\"{amount2}\"/></feComponentTransfer>', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return \"T\" + this.dx + \",\" + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, \"top\"));\n     * or\n     | var dy = el.getAlign(el2, \"top\").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, \"string\")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : \"c\";\n        switch (way) {\n            case \"t\":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case \"b\":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case \"m\":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case \"l\":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case \"r\":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `\"top\"`, `\"middle\"`, `\"bottom\"`, `\"left\"`, `\"center\"`, `\"right\"`\n     = (object) this element\n     > Usage\n     | el.align(el2, \"top\");\n     * or\n     | el.align(\"middle\");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform(\"...\" + this.getAlign(el, way));\n    };\n});\n\n// Copyright (c) 2017 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    // Colours are from https://www.materialui.co\n    var red         = \"#ffebee#ffcdd2#ef9a9a#e57373#ef5350#f44336#e53935#d32f2f#c62828#b71c1c#ff8a80#ff5252#ff1744#d50000\",\n        pink        = \"#FCE4EC#F8BBD0#F48FB1#F06292#EC407A#E91E63#D81B60#C2185B#AD1457#880E4F#FF80AB#FF4081#F50057#C51162\",\n        purple      = \"#F3E5F5#E1BEE7#CE93D8#BA68C8#AB47BC#9C27B0#8E24AA#7B1FA2#6A1B9A#4A148C#EA80FC#E040FB#D500F9#AA00FF\",\n        deeppurple  = \"#EDE7F6#D1C4E9#B39DDB#9575CD#7E57C2#673AB7#5E35B1#512DA8#4527A0#311B92#B388FF#7C4DFF#651FFF#6200EA\",\n        indigo      = \"#E8EAF6#C5CAE9#9FA8DA#7986CB#5C6BC0#3F51B5#3949AB#303F9F#283593#1A237E#8C9EFF#536DFE#3D5AFE#304FFE\",\n        blue        = \"#E3F2FD#BBDEFB#90CAF9#64B5F6#64B5F6#2196F3#1E88E5#1976D2#1565C0#0D47A1#82B1FF#448AFF#2979FF#2962FF\",\n        lightblue   = \"#E1F5FE#B3E5FC#81D4FA#4FC3F7#29B6F6#03A9F4#039BE5#0288D1#0277BD#01579B#80D8FF#40C4FF#00B0FF#0091EA\",\n        cyan        = \"#E0F7FA#B2EBF2#80DEEA#4DD0E1#26C6DA#00BCD4#00ACC1#0097A7#00838F#006064#84FFFF#18FFFF#00E5FF#00B8D4\",\n        teal        = \"#E0F2F1#B2DFDB#80CBC4#4DB6AC#26A69A#009688#00897B#00796B#00695C#004D40#A7FFEB#64FFDA#1DE9B6#00BFA5\",\n        green       = \"#E8F5E9#C8E6C9#A5D6A7#81C784#66BB6A#4CAF50#43A047#388E3C#2E7D32#1B5E20#B9F6CA#69F0AE#00E676#00C853\",\n        lightgreen  = \"#F1F8E9#DCEDC8#C5E1A5#AED581#9CCC65#8BC34A#7CB342#689F38#558B2F#33691E#CCFF90#B2FF59#76FF03#64DD17\",\n        lime        = \"#F9FBE7#F0F4C3#E6EE9C#DCE775#D4E157#CDDC39#C0CA33#AFB42B#9E9D24#827717#F4FF81#EEFF41#C6FF00#AEEA00\",\n        yellow      = \"#FFFDE7#FFF9C4#FFF59D#FFF176#FFEE58#FFEB3B#FDD835#FBC02D#F9A825#F57F17#FFFF8D#FFFF00#FFEA00#FFD600\",\n        amber       = \"#FFF8E1#FFECB3#FFE082#FFD54F#FFCA28#FFC107#FFB300#FFA000#FF8F00#FF6F00#FFE57F#FFD740#FFC400#FFAB00\",\n        orange      = \"#FFF3E0#FFE0B2#FFCC80#FFB74D#FFA726#FF9800#FB8C00#F57C00#EF6C00#E65100#FFD180#FFAB40#FF9100#FF6D00\",\n        deeporange  = \"#FBE9E7#FFCCBC#FFAB91#FF8A65#FF7043#FF5722#F4511E#E64A19#D84315#BF360C#FF9E80#FF6E40#FF3D00#DD2C00\",\n        brown       = \"#EFEBE9#D7CCC8#BCAAA4#A1887F#8D6E63#795548#6D4C41#5D4037#4E342E#3E2723\",\n        grey        = \"#FAFAFA#F5F5F5#EEEEEE#E0E0E0#BDBDBD#9E9E9E#757575#616161#424242#212121\",\n        bluegrey    = \"#ECEFF1#CFD8DC#B0BEC5#90A4AE#78909C#607D8B#546E7A#455A64#37474F#263238\";\n    /*\\\n     * Snap.mui\n     [ property ]\n     **\n     * Contain Material UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.mui.deeppurple, stroke: Snap.mui.amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.mui = {};\n    /*\\\n     * Snap.flat\n     [ property ]\n     **\n     * Contain Flat UI colours.\n     | Snap().rect(0, 0, 10, 10).attr({fill: Snap.flat.carrot, stroke: Snap.flat.wetasphalt});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.flat = {};\n    function saveColor(colors) {\n        colors = colors.split(/(?=#)/);\n        var color = new String(colors[5]);\n        color[50] = colors[0];\n        color[100] = colors[1];\n        color[200] = colors[2];\n        color[300] = colors[3];\n        color[400] = colors[4];\n        color[500] = colors[5];\n        color[600] = colors[6];\n        color[700] = colors[7];\n        color[800] = colors[8];\n        color[900] = colors[9];\n        if (colors[10]) {\n            color.A100 = colors[10];\n            color.A200 = colors[11];\n            color.A400 = colors[12];\n            color.A700 = colors[13];\n        }\n        return color;\n    }\n    Snap.mui.red = saveColor(red);\n    Snap.mui.pink = saveColor(pink);\n    Snap.mui.purple = saveColor(purple);\n    Snap.mui.deeppurple = saveColor(deeppurple);\n    Snap.mui.indigo = saveColor(indigo);\n    Snap.mui.blue = saveColor(blue);\n    Snap.mui.lightblue = saveColor(lightblue);\n    Snap.mui.cyan = saveColor(cyan);\n    Snap.mui.teal = saveColor(teal);\n    Snap.mui.green = saveColor(green);\n    Snap.mui.lightgreen = saveColor(lightgreen);\n    Snap.mui.lime = saveColor(lime);\n    Snap.mui.yellow = saveColor(yellow);\n    Snap.mui.amber = saveColor(amber);\n    Snap.mui.orange = saveColor(orange);\n    Snap.mui.deeporange = saveColor(deeporange);\n    Snap.mui.brown = saveColor(brown);\n    Snap.mui.grey = saveColor(grey);\n    Snap.mui.bluegrey = saveColor(bluegrey);\n    Snap.flat.turquoise = \"#1abc9c\";\n    Snap.flat.greensea = \"#16a085\";\n    Snap.flat.sunflower = \"#f1c40f\";\n    Snap.flat.orange = \"#f39c12\";\n    Snap.flat.emerland = \"#2ecc71\";\n    Snap.flat.nephritis = \"#27ae60\";\n    Snap.flat.carrot = \"#e67e22\";\n    Snap.flat.pumpkin = \"#d35400\";\n    Snap.flat.peterriver = \"#3498db\";\n    Snap.flat.belizehole = \"#2980b9\";\n    Snap.flat.alizarin = \"#e74c3c\";\n    Snap.flat.pomegranate = \"#c0392b\";\n    Snap.flat.amethyst = \"#9b59b6\";\n    Snap.flat.wisteria = \"#8e44ad\";\n    Snap.flat.clouds = \"#ecf0f1\";\n    Snap.flat.silver = \"#bdc3c7\";\n    Snap.flat.wetasphalt = \"#34495e\";\n    Snap.flat.midnightblue = \"#2c3e50\";\n    Snap.flat.concrete = \"#95a5a6\";\n    Snap.flat.asbestos = \"#7f8c8d\";\n    /*\\\n     * Snap.importMUIColors\n     [ method ]\n     **\n     * Imports Material UI colours into global object.\n     | Snap.importMUIColors();\n     | Snap().rect(0, 0, 10, 10).attr({fill: deeppurple, stroke: amber[600]});\n     # For colour reference: <a href=\"https://www.materialui.co\">https://www.materialui.co</a>.\n    \\*/\n    Snap.importMUIColors = function () {\n        for (var color in Snap.mui) {\n            if (Snap.mui.hasOwnProperty(color)) {\n                window[color] = Snap.mui[color];\n            }\n        }\n    };\n});\n\nreturn Snap;\n}));\n\n\n// WEBPACK FOOTER //\n// ./~/snapsvg/dist/snap.svg.js"],"sourceRoot":""}